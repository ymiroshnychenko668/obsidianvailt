
"smart_completions:Untitled Chat 2025-07-29 14-15-17-1753787717631": {"completion":{"request":{"messages":[{"role":"user","content":[{"type":"text","text":"learn provided code of the PLM system projectCreate prompt for codex based on provided code and this input\"Add entity \"software package\" to the project entityImplement git integration in GithubService and GitlabServiceImplement GitService interface in order to be able abstract particular git implementationImplement methods for commit, push, pull, create branches, showing historyCreate separate vaadin \"view\" for the \"software package\" and implement ui controls for working with git and pointed functionality above. Also describe an ability to navigate by source tree. Describe this components for codexIn the view of the product add an ability to list repositories, add existing repositoriesRepository can be created on the github and gitlab. Investigate api and point methods could be used and point it in the prompt for codexProvide an ability to attach separate component to the \"software package\" fileAlso user could have an ability to attach specific components or BOMs to the files in the repository with respect to branches.Investigate code in details and describe tasks in details with references to the provided code\""},{"type":"text","text":"<context>\n<file_tree>\n└── all_java_combined.md\n</file_tree>\n<context_primary path=\"all_java_combined.md\" mtime=\"10 minutes ago\">\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/dto/mappers/UnitsMapperImpl.java =====\npackage com.ua.crow.dto.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class UnitsMapperImpl extends UnitsMapper {\n\n    @Override\n    public UnitsDto toDto(Units units) {\n        if ( units == null ) {\n            return null;\n        }\n\n        UnitsDto unitsDto = new UnitsDto();\n\n        unitsDto.setId( units.getId() );\n        unitsDto.setDeleted( units.isDeleted() );\n        unitsDto.setName( units.getName() );\n        unitsDto.setUkrName( units.getUkrName() );\n        unitsDto.setType( units.getType() );\n        unitsDto.setShortName( units.getShortName() );\n\n        return unitsDto;\n    }\n\n    @Override\n    public Units toPojo(UnitsDto unitsDto) {\n        if ( unitsDto == null ) {\n            return null;\n        }\n\n        Units units = new Units();\n\n        units.setId( unitsDto.getId() );\n        units.setDeleted( unitsDto.isDeleted() );\n        units.setName( unitsDto.getName() );\n        units.setUkrName( unitsDto.getUkrName() );\n        units.setType( unitsDto.getType() );\n        units.setShortName( unitsDto.getShortName() );\n\n        return units;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ResourceGroupMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ResourceGroupMapperImpl extends ResourceGroupMapper {\n\n    @Override\n    public ResourceGroupDto toDto(ResourceGroup task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ResourceGroupDto resourceGroupDto = new ResourceGroupDto();\n\n        resourceGroupDto.setId( task.getId() );\n        resourceGroupDto.setTenantId( task.getTenantId() );\n        resourceGroupDto.setDeleted( task.isDeleted() );\n        resourceGroupDto.setName( task.getName() );\n        resourceGroupDto.setUkrName( task.getUkrName() );\n        resourceGroupDto.setCreator( task.getCreator() );\n        resourceGroupDto.setModifier( task.getModifier() );\n        resourceGroupDto.setCreatedAt( task.getCreatedAt() );\n        resourceGroupDto.setModifiedAt( task.getModifiedAt() );\n        resourceGroupDto.setWithdrawAlgorythm( task.getWithdrawAlgorythm() );\n        resourceGroupDto.setMinimalUnitToWithdraw( task.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = task.getResources();\n        if ( list != null ) {\n            resourceGroupDto.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n        resourceGroupDto.setParent( task.getParent() );\n\n        return resourceGroupDto;\n    }\n\n    @Override\n    public ResourceGroup toResourceGroup(ResourceGroupDto task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n\n        resourceGroup.setId( task.getId() );\n        resourceGroup.setTenantId( task.getTenantId() );\n        resourceGroup.setDeleted( task.isDeleted() );\n        resourceGroup.setName( task.getName() );\n        resourceGroup.setUkrName( task.getUkrName() );\n        resourceGroup.setCreator( task.getCreator() );\n        resourceGroup.setModifier( task.getModifier() );\n        resourceGroup.setCreatedAt( task.getCreatedAt() );\n        resourceGroup.setModifiedAt( task.getModifiedAt() );\n        resourceGroup.setParent( task.getParent() );\n        resourceGroup.setWithdrawAlgorythm( task.getWithdrawAlgorythm() );\n        resourceGroup.setMinimalUnitToWithdraw( task.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = task.getResources();\n        if ( list != null ) {\n            resourceGroup.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n\n        return resourceGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ShortFusionBomMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ShortFusionBomMapperImpl extends ShortFusionBomMapper {\n\n    @Override\n    public FusionComponentDto toShortDto(FusionComponent bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionComponentDto fusionComponentDto = new FusionComponentDto();\n\n        fusionComponentDto.setPartName( bom.getPartName() );\n        fusionComponentDto.setPartNumber( bom.getPartNumber() );\n        fusionComponentDto.setType( bom.getType() );\n\n        return fusionComponentDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/BomShortMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class BomShortMapperImpl extends BomShortMapper {\n\n    @Override\n    public BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveReleaseDto bomActiveReleaseDto = new BomActiveReleaseDto();\n\n        bomActiveReleaseDto.setId( bomActiveRelease.getId() );\n        bomActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveReleaseDto.setName( bomActiveRelease.getName() );\n        bomActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        bomActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        bomActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        bomActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveReleaseDto.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveReleaseDto.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveReleaseDto.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveReleaseDto.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveReleaseDto.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveReleaseDto.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveReleaseDto.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveReleaseDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ResourceItemMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ResourceItemMapperImpl extends ResourceItemMapper {\n\n    @Override\n    public ResourceItemDTO toDto(ResourceItem comment) {\n        if ( comment == null ) {\n            return null;\n        }\n\n        ResourceItemDTO resourceItemDTO = new ResourceItemDTO();\n\n        resourceItemDTO.setId( comment.getId() );\n        resourceItemDTO.setDeleted( comment.isDeleted() );\n        resourceItemDTO.setName( comment.getName() );\n        resourceItemDTO.setUkrName( comment.getUkrName() );\n        resourceItemDTO.setCreator( comment.getCreator() );\n        resourceItemDTO.setModifier( comment.getModifier() );\n        resourceItemDTO.setCreatedAt( comment.getCreatedAt() );\n        resourceItemDTO.setModifiedAt( comment.getModifiedAt() );\n        resourceItemDTO.setWithdrawAlgorythm( comment.getWithdrawAlgorythm() );\n        resourceItemDTO.setMinimalUnitToWithdraw( comment.getMinimalUnitToWithdraw() );\n        resourceItemDTO.setPrice( comment.getPrice() );\n        resourceItemDTO.setGroup( resourceGroupToResourceGroupDto( comment.getGroup() ) );\n\n        return resourceItemDTO;\n    }\n\n    @Override\n    public ResourceItem toPojo(ResourceItemDTO comment) {\n        if ( comment == null ) {\n            return null;\n        }\n\n        ResourceItem resourceItem = new ResourceItem();\n\n        resourceItem.setId( comment.getId() );\n        resourceItem.setDeleted( comment.isDeleted() );\n        resourceItem.setName( comment.getName() );\n        resourceItem.setUkrName( comment.getUkrName() );\n        resourceItem.setCreator( comment.getCreator() );\n        resourceItem.setModifier( comment.getModifier() );\n        resourceItem.setCreatedAt( comment.getCreatedAt() );\n        resourceItem.setModifiedAt( comment.getModifiedAt() );\n        resourceItem.setWithdrawAlgorythm( comment.getWithdrawAlgorythm() );\n        resourceItem.setMinimalUnitToWithdraw( comment.getMinimalUnitToWithdraw() );\n        resourceItem.setPrice( comment.getPrice() );\n        resourceItem.setGroup( resourceGroupDtoToResourceGroup( comment.getGroup() ) );\n\n        return resourceItem;\n    }\n\n    protected List<ResourceGroupDto> resourceGroupListToResourceGroupDtoList(List<ResourceGroup> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroupDto> list1 = new ArrayList<ResourceGroupDto>( list.size() );\n        for ( ResourceGroup resourceGroup : list ) {\n            list1.add( resourceGroupToResourceGroupDto( resourceGroup ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroupDto resourceGroupToResourceGroupDto(ResourceGroup resourceGroup) {\n        if ( resourceGroup == null ) {\n            return null;\n        }\n\n        ResourceGroupDto resourceGroupDto = new ResourceGroupDto();\n\n        resourceGroupDto.setId( resourceGroup.getId() );\n        resourceGroupDto.setTenantId( resourceGroup.getTenantId() );\n        resourceGroupDto.setDeleted( resourceGroup.isDeleted() );\n        resourceGroupDto.setName( resourceGroup.getName() );\n        resourceGroupDto.setUkrName( resourceGroup.getUkrName() );\n        resourceGroupDto.setCreator( resourceGroup.getCreator() );\n        resourceGroupDto.setModifier( resourceGroup.getModifier() );\n        resourceGroupDto.setCreatedAt( resourceGroup.getCreatedAt() );\n        resourceGroupDto.setModifiedAt( resourceGroup.getModifiedAt() );\n        resourceGroupDto.setWithdrawAlgorythm( resourceGroup.getWithdrawAlgorythm() );\n        resourceGroupDto.setMinimalUnitToWithdraw( resourceGroup.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = resourceGroup.getResources();\n        if ( list != null ) {\n            resourceGroupDto.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n        resourceGroupDto.setParent( resourceGroup.getParent() );\n        resourceGroupDto.setChildren( resourceGroupListToResourceGroupDtoList( resourceGroup.getChildren() ) );\n\n        return resourceGroupDto;\n    }\n\n    protected List<ResourceGroup> resourceGroupDtoListToResourceGroupList(List<ResourceGroupDto> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroup> list1 = new ArrayList<ResourceGroup>( list.size() );\n        for ( ResourceGroupDto resourceGroupDto : list ) {\n            list1.add( resourceGroupDtoToResourceGroup( resourceGroupDto ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroup resourceGroupDtoToResourceGroup(ResourceGroupDto resourceGroupDto) {\n        if ( resourceGroupDto == null ) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n\n        resourceGroup.setId( resourceGroupDto.getId() );\n        resourceGroup.setTenantId( resourceGroupDto.getTenantId() );\n        resourceGroup.setDeleted( resourceGroupDto.isDeleted() );\n        resourceGroup.setName( resourceGroupDto.getName() );\n        resourceGroup.setUkrName( resourceGroupDto.getUkrName() );\n        resourceGroup.setCreator( resourceGroupDto.getCreator() );\n        resourceGroup.setModifier( resourceGroupDto.getModifier() );\n        resourceGroup.setCreatedAt( resourceGroupDto.getCreatedAt() );\n        resourceGroup.setModifiedAt( resourceGroupDto.getModifiedAt() );\n        resourceGroup.setParent( resourceGroupDto.getParent() );\n        resourceGroup.setChildren( resourceGroupDtoListToResourceGroupList( resourceGroupDto.getChildren() ) );\n        resourceGroup.setWithdrawAlgorythm( resourceGroupDto.getWithdrawAlgorythm() );\n        resourceGroup.setMinimalUnitToWithdraw( resourceGroupDto.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list1 = resourceGroupDto.getResources();\n        if ( list1 != null ) {\n            resourceGroup.setResources( new ArrayList<ResourceItem>( list1 ) );\n        }\n\n        return resourceGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ProductMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ProductMapperImpl extends ProductMapper {\n\n    @Override\n    public ProductActiveReleaseDto toDto(ProductActiveRelease task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ProductActiveReleaseDto productActiveReleaseDto = new ProductActiveReleaseDto();\n\n        productActiveReleaseDto.setId( task.getId() );\n        productActiveReleaseDto.setDeleted( task.isDeleted() );\n        productActiveReleaseDto.setName( task.getName() );\n        productActiveReleaseDto.setUkrName( task.getUkrName() );\n        productActiveReleaseDto.setCreator( task.getCreator() );\n        productActiveReleaseDto.setModifier( task.getModifier() );\n        productActiveReleaseDto.setCreatedAt( task.getCreatedAt() );\n        productActiveReleaseDto.setModifiedAt( task.getModifiedAt() );\n\n        return productActiveReleaseDto;\n    }\n\n    @Override\n    public ProductActiveRelease toProduct(ProductActiveReleaseDto task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ProductActiveRelease productActiveRelease = new ProductActiveRelease();\n\n        productActiveRelease.setId( task.getId() );\n        productActiveRelease.setDeleted( task.isDeleted() );\n        productActiveRelease.setName( task.getName() );\n        productActiveRelease.setUkrName( task.getUkrName() );\n        productActiveRelease.setCreator( task.getCreator() );\n        productActiveRelease.setModifier( task.getModifier() );\n        productActiveRelease.setCreatedAt( task.getCreatedAt() );\n        productActiveRelease.setModifiedAt( task.getModifiedAt() );\n\n        return productActiveRelease;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentPropertyTypeMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentPropertyTypeMapperImpl extends ComponentPropertyTypeMapper {\n\n    @Override\n    public BomItemPropertyTypeDto toDto(BomItemPropertyType bomItemPropertyType) {\n        if ( bomItemPropertyType == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeDto bomItemPropertyTypeDto = new BomItemPropertyTypeDto();\n\n        bomItemPropertyTypeDto.setId( bomItemPropertyType.getId() );\n        bomItemPropertyTypeDto.setDeleted( bomItemPropertyType.isDeleted() );\n        bomItemPropertyTypeDto.setName( bomItemPropertyType.getName() );\n        bomItemPropertyTypeDto.setUkrName( bomItemPropertyType.getUkrName() );\n        bomItemPropertyTypeDto.setCreator( bomItemPropertyType.getCreator() );\n        bomItemPropertyTypeDto.setModifier( bomItemPropertyType.getModifier() );\n        bomItemPropertyTypeDto.setCreatedAt( bomItemPropertyType.getCreatedAt() );\n        bomItemPropertyTypeDto.setModifiedAt( bomItemPropertyType.getModifiedAt() );\n        bomItemPropertyTypeDto.setUnits( unitsToUnitsDto( bomItemPropertyType.getUnits() ) );\n        bomItemPropertyTypeDto.setGroup( bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto( bomItemPropertyType.getGroup() ) );\n        bomItemPropertyTypeDto.setDataType( bomItemPropertyType.getDataType() );\n\n        return bomItemPropertyTypeDto;\n    }\n\n    @Override\n    public BomItemPropertyType toPojo(BomItemPropertyTypeDto bomItemPropertyTypeDto) {\n        if ( bomItemPropertyTypeDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyType bomItemPropertyType = new BomItemPropertyType();\n\n        bomItemPropertyType.setId( bomItemPropertyTypeDto.getId() );\n        bomItemPropertyType.setDeleted( bomItemPropertyTypeDto.isDeleted() );\n        bomItemPropertyType.setName( bomItemPropertyTypeDto.getName() );\n        bomItemPropertyType.setUkrName( bomItemPropertyTypeDto.getUkrName() );\n        bomItemPropertyType.setCreator( bomItemPropertyTypeDto.getCreator() );\n        bomItemPropertyType.setModifier( bomItemPropertyTypeDto.getModifier() );\n        bomItemPropertyType.setCreatedAt( bomItemPropertyTypeDto.getCreatedAt() );\n        bomItemPropertyType.setModifiedAt( bomItemPropertyTypeDto.getModifiedAt() );\n        bomItemPropertyType.setUnits( unitsDtoToUnits( bomItemPropertyTypeDto.getUnits() ) );\n        bomItemPropertyType.setGroup( bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup( bomItemPropertyTypeDto.getGroup() ) );\n        bomItemPropertyType.setDataType( bomItemPropertyTypeDto.getDataType() );\n\n        return bomItemPropertyType;\n    }\n\n    protected UnitsDto unitsToUnitsDto(Units units) {\n        if ( units == null ) {\n            return null;\n        }\n\n        UnitsDto unitsDto = new UnitsDto();\n\n        unitsDto.setId( units.getId() );\n        unitsDto.setDeleted( units.isDeleted() );\n        unitsDto.setName( units.getName() );\n        unitsDto.setUkrName( units.getUkrName() );\n        unitsDto.setType( units.getType() );\n        unitsDto.setShortName( units.getShortName() );\n\n        return unitsDto;\n    }\n\n    protected BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup) {\n        if ( bomItemPropertyTypeGroup == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto = new BomItemPropertyTypeGroupDto();\n\n        bomItemPropertyTypeGroupDto.setId( bomItemPropertyTypeGroup.getId() );\n        bomItemPropertyTypeGroupDto.setDeleted( bomItemPropertyTypeGroup.isDeleted() );\n        bomItemPropertyTypeGroupDto.setName( bomItemPropertyTypeGroup.getName() );\n        bomItemPropertyTypeGroupDto.setUkrName( bomItemPropertyTypeGroup.getUkrName() );\n        bomItemPropertyTypeGroupDto.setCreator( bomItemPropertyTypeGroup.getCreator() );\n        bomItemPropertyTypeGroupDto.setModifier( bomItemPropertyTypeGroup.getModifier() );\n        bomItemPropertyTypeGroupDto.setCreatedAt( bomItemPropertyTypeGroup.getCreatedAt() );\n        bomItemPropertyTypeGroupDto.setModifiedAt( bomItemPropertyTypeGroup.getModifiedAt() );\n\n        return bomItemPropertyTypeGroupDto;\n    }\n\n    protected Units unitsDtoToUnits(UnitsDto unitsDto) {\n        if ( unitsDto == null ) {\n            return null;\n        }\n\n        Units units = new Units();\n\n        units.setId( unitsDto.getId() );\n        units.setDeleted( unitsDto.isDeleted() );\n        units.setName( unitsDto.getName() );\n        units.setUkrName( unitsDto.getUkrName() );\n        units.setType( unitsDto.getType() );\n        units.setShortName( unitsDto.getShortName() );\n\n        return units;\n    }\n\n    protected BomItemPropertyTypeGroup bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup(BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto) {\n        if ( bomItemPropertyTypeGroupDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroup bomItemPropertyTypeGroup = new BomItemPropertyTypeGroup();\n\n        bomItemPropertyTypeGroup.setId( bomItemPropertyTypeGroupDto.getId() );\n        bomItemPropertyTypeGroup.setDeleted( bomItemPropertyTypeGroupDto.isDeleted() );\n        bomItemPropertyTypeGroup.setName( bomItemPropertyTypeGroupDto.getName() );\n        bomItemPropertyTypeGroup.setUkrName( bomItemPropertyTypeGroupDto.getUkrName() );\n        bomItemPropertyTypeGroup.setCreator( bomItemPropertyTypeGroupDto.getCreator() );\n        bomItemPropertyTypeGroup.setModifier( bomItemPropertyTypeGroupDto.getModifier() );\n        bomItemPropertyTypeGroup.setCreatedAt( bomItemPropertyTypeGroupDto.getCreatedAt() );\n        bomItemPropertyTypeGroup.setModifiedAt( bomItemPropertyTypeGroupDto.getModifiedAt() );\n\n        return bomItemPropertyTypeGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/FusionBomMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class FusionBomMapperImpl extends FusionBomMapper {\n\n    @Override\n    public FusionBomDto toDto(FusionBom bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionBomDto fusionBomDto = new FusionBomDto();\n\n        fusionBomDto.setFusionId( bom.getFusionId() );\n        fusionBomDto.setProduct( productActiveReleaseToProductActiveReleaseDto( bom.getProduct() ) );\n        fusionBomDto.setDocumentName( bom.getDocumentName() );\n        fusionBomDto.setVersion( bom.getVersion() );\n        fusionBomDto.setProcessed( bom.isProcessed() );\n        fusionBomDto.setEngineeringBomId( bom.getEngineeringBomId() );\n        fusionBomDto.setDescription( bom.getDescription() );\n        fusionBomDto.setLibraryItem( bom.isLibraryItem() );\n        fusionBomDto.setRevisionId( bom.getRevisionId() );\n        fusionBomDto.setPartNumber( bom.getPartNumber() );\n        fusionBomDto.setConfiguration( bom.isConfiguration() );\n        fusionBomDto.setConfiguredDesign( bom.isConfiguredDesign() );\n        fusionBomDto.setDeleted( bom.isDeleted() );\n        fusionBomDto.setCreator( bom.getCreator() );\n        fusionBomDto.setModifier( bom.getModifier() );\n        fusionBomDto.setCreatedAt( bom.getCreatedAt() );\n        fusionBomDto.setModifiedAt( bom.getModifiedAt() );\n        fusionBomDto.setName( bom.getName() );\n\n        return fusionBomDto;\n    }\n\n    @Override\n    public FusionBom toFusionBom(FusionBomDto bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionBom fusionBom = new FusionBom();\n\n        fusionBom.setFusionId( bom.getFusionId() );\n        fusionBom.setRevisionId( bom.getRevisionId() );\n        fusionBom.setProduct( productActiveReleaseDtoToProductActiveRelease( bom.getProduct() ) );\n        fusionBom.setPartNumber( bom.getPartNumber() );\n        fusionBom.setDescription( bom.getDescription() );\n        fusionBom.setProcessed( bom.isProcessed() );\n        fusionBom.setEngineeringBomId( bom.getEngineeringBomId() );\n        fusionBom.setDocumentName( bom.getDocumentName() );\n        fusionBom.setName( bom.getName() );\n        fusionBom.setVersion( bom.getVersion() );\n        fusionBom.setLibraryItem( bom.isLibraryItem() );\n        fusionBom.setConfiguration( bom.isConfiguration() );\n        fusionBom.setConfiguredDesign( bom.isConfiguredDesign() );\n        fusionBom.setDeleted( bom.isDeleted() );\n        fusionBom.setCreator( bom.getCreator() );\n        fusionBom.setModifier( bom.getModifier() );\n        fusionBom.setCreatedAt( bom.getCreatedAt() );\n        fusionBom.setModifiedAt( bom.getModifiedAt() );\n\n        return fusionBom;\n    }\n\n    protected Set<ComponentActiveReleaseDto> bomComponentRelSetToComponentActiveReleaseDtoSet(Set<BomComponentRel> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<ComponentActiveReleaseDto> set1 = new LinkedHashSet<ComponentActiveReleaseDto>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( BomComponentRel bomComponentRel : set ) {\n            set1.add( bomComponentRelToComponentActiveReleaseDto( bomComponentRel ) );\n        }\n\n        return set1;\n    }\n\n    protected EngineeringBomWoChildren bomActiveReleaseToEngineeringBomWoChildren(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        EngineeringBomWoChildren engineeringBomWoChildren = new EngineeringBomWoChildren();\n\n        engineeringBomWoChildren.setId( bomActiveRelease.getId() );\n        engineeringBomWoChildren.setDeleted( bomActiveRelease.isDeleted() );\n        engineeringBomWoChildren.setName( bomActiveRelease.getName() );\n        engineeringBomWoChildren.setUkrName( bomActiveRelease.getUkrName() );\n        engineeringBomWoChildren.setCreator( bomActiveRelease.getCreator() );\n        engineeringBomWoChildren.setModifier( bomActiveRelease.getModifier() );\n        engineeringBomWoChildren.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        engineeringBomWoChildren.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        engineeringBomWoChildren.setProduct( productActiveReleaseToProductActiveReleaseDto( bomActiveRelease.getProduct() ) );\n        engineeringBomWoChildren.setDescription( bomActiveRelease.getDescription() );\n        engineeringBomWoChildren.setPartNumber( bomActiveRelease.getPartNumber() );\n        engineeringBomWoChildren.setChildren( bomComponentRelSetToComponentActiveReleaseDtoSet( bomActiveRelease.getChildren() ) );\n        engineeringBomWoChildren.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        engineeringBomWoChildren.setFusionId( bomActiveRelease.getFusionId() );\n        engineeringBomWoChildren.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        engineeringBomWoChildren.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        engineeringBomWoChildren.setConfiguration( bomActiveRelease.isConfiguration() );\n        engineeringBomWoChildren.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        engineeringBomWoChildren.setConsistent( bomActiveRelease.isConsistent() );\n\n        return engineeringBomWoChildren;\n    }\n\n    protected ComponentActiveReleaseDto bomComponentRelToComponentActiveReleaseDto(BomComponentRel bomComponentRel) {\n        if ( bomComponentRel == null ) {\n            return null;\n        }\n\n        ComponentActiveReleaseDto componentActiveReleaseDto = new ComponentActiveReleaseDto();\n\n        componentActiveReleaseDto.setQuantity( bomComponentRel.getQuantity() );\n        componentActiveReleaseDto.setParentBom( bomActiveReleaseToEngineeringBomWoChildren( bomComponentRel.getParentBom() ) );\n\n        return componentActiveReleaseDto;\n    }\n\n    protected BomActiveReleaseDto bomActiveReleaseToBomActiveReleaseDto(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveReleaseDto bomActiveReleaseDto = new BomActiveReleaseDto();\n\n        bomActiveReleaseDto.setId( bomActiveRelease.getId() );\n        bomActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveReleaseDto.setName( bomActiveRelease.getName() );\n        bomActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        bomActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        bomActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveReleaseDto.setProduct( productActiveReleaseToProductActiveReleaseDto( bomActiveRelease.getProduct() ) );\n        bomActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        bomActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveReleaseDto.setChildren( bomComponentRelSetToComponentActiveReleaseDtoSet( bomActiveRelease.getChildren() ) );\n        bomActiveReleaseDto.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveReleaseDto.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveReleaseDto.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveReleaseDto.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveReleaseDto.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveReleaseDto.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveReleaseDto.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveReleaseDto;\n    }\n\n    protected Set<BomActiveReleaseDto> bomActiveReleaseSetToBomActiveReleaseDtoSet(Set<BomActiveRelease> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<BomActiveReleaseDto> set1 = new LinkedHashSet<BomActiveReleaseDto>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( BomActiveRelease bomActiveRelease : set ) {\n            set1.add( bomActiveReleaseToBomActiveReleaseDto( bomActiveRelease ) );\n        }\n\n        return set1;\n    }\n\n    protected ProductActiveReleaseDto productActiveReleaseToProductActiveReleaseDto(ProductActiveRelease productActiveRelease) {\n        if ( productActiveRelease == null ) {\n            return null;\n        }\n\n        ProductActiveReleaseDto productActiveReleaseDto = new ProductActiveReleaseDto();\n\n        productActiveReleaseDto.setId( productActiveRelease.getId() );\n        productActiveReleaseDto.setDeleted( productActiveRelease.isDeleted() );\n        productActiveReleaseDto.setName( productActiveRelease.getName() );\n        productActiveReleaseDto.setUkrName( productActiveRelease.getUkrName() );\n        productActiveReleaseDto.setCreator( productActiveRelease.getCreator() );\n        productActiveReleaseDto.setModifier( productActiveRelease.getModifier() );\n        productActiveReleaseDto.setCreatedAt( productActiveRelease.getCreatedAt() );\n        productActiveReleaseDto.setModifiedAt( productActiveRelease.getModifiedAt() );\n        productActiveReleaseDto.setEngineeringBoms( bomActiveReleaseSetToBomActiveReleaseDtoSet( productActiveRelease.getEngineeringBoms() ) );\n\n        return productActiveReleaseDto;\n    }\n\n    protected Set<BomComponentRel> componentActiveReleaseDtoSetToBomComponentRelSet(Set<ComponentActiveReleaseDto> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<BomComponentRel> set1 = new LinkedHashSet<BomComponentRel>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( ComponentActiveReleaseDto componentActiveReleaseDto : set ) {\n            set1.add( componentActiveReleaseDtoToBomComponentRel( componentActiveReleaseDto ) );\n        }\n\n        return set1;\n    }\n\n    protected BomActiveRelease engineeringBomWoChildrenToBomActiveRelease(EngineeringBomWoChildren engineeringBomWoChildren) {\n        if ( engineeringBomWoChildren == null ) {\n            return null;\n        }\n\n        BomActiveRelease bomActiveRelease = new BomActiveRelease();\n\n        bomActiveRelease.setId( engineeringBomWoChildren.getId() );\n        bomActiveRelease.setDeleted( engineeringBomWoChildren.isDeleted() );\n        bomActiveRelease.setName( engineeringBomWoChildren.getName() );\n        bomActiveRelease.setUkrName( engineeringBomWoChildren.getUkrName() );\n        bomActiveRelease.setCreator( engineeringBomWoChildren.getCreator() );\n        bomActiveRelease.setModifier( engineeringBomWoChildren.getModifier() );\n        bomActiveRelease.setCreatedAt( engineeringBomWoChildren.getCreatedAt() );\n        bomActiveRelease.setModifiedAt( engineeringBomWoChildren.getModifiedAt() );\n        bomActiveRelease.setProduct( productActiveReleaseDtoToProductActiveRelease( engineeringBomWoChildren.getProduct() ) );\n        bomActiveRelease.setDescription( engineeringBomWoChildren.getDescription() );\n        bomActiveRelease.setPartNumber( engineeringBomWoChildren.getPartNumber() );\n        bomActiveRelease.setFusionVersion( engineeringBomWoChildren.getFusionVersion() );\n        bomActiveRelease.setFusionId( engineeringBomWoChildren.getFusionId() );\n        bomActiveRelease.setLibraryItem( engineeringBomWoChildren.isLibraryItem() );\n        bomActiveRelease.setFusionRevisionId( engineeringBomWoChildren.getFusionRevisionId() );\n        bomActiveRelease.setConfiguration( engineeringBomWoChildren.isConfiguration() );\n        bomActiveRelease.setConfiguredDesign( engineeringBomWoChildren.isConfiguredDesign() );\n        bomActiveRelease.setConsistent( engineeringBomWoChildren.isConsistent() );\n        bomActiveRelease.setChildren( componentActiveReleaseDtoSetToBomComponentRelSet( engineeringBomWoChildren.getChildren() ) );\n\n        return bomActiveRelease;\n    }\n\n    protected BomComponentRel componentActiveReleaseDtoToBomComponentRel(ComponentActiveReleaseDto componentActiveReleaseDto) {\n        if ( componentActiveReleaseDto == null ) {\n            return null;\n        }\n\n        BomComponentRel bomComponentRel = new BomComponentRel();\n\n        bomComponentRel.setQuantity( componentActiveReleaseDto.getQuantity() );\n        bomComponentRel.setParentBom( engineeringBomWoChildrenToBomActiveRelease( componentActiveReleaseDto.getParentBom() ) );\n\n        return bomComponentRel;\n    }\n\n    protected BomActiveRelease bomActiveReleaseDtoToBomActiveRelease(BomActiveReleaseDto bomActiveReleaseDto) {\n        if ( bomActiveReleaseDto == null ) {\n            return null;\n        }\n\n        BomActiveRelease bomActiveRelease = new BomActiveRelease();\n\n        bomActiveRelease.setId( bomActiveReleaseDto.getId() );\n        bomActiveRelease.setDeleted( bomActiveReleaseDto.isDeleted() );\n        bomActiveRelease.setName( bomActiveReleaseDto.getName() );\n        bomActiveRelease.setUkrName( bomActiveReleaseDto.getUkrName() );\n        bomActiveRelease.setCreator( bomActiveReleaseDto.getCreator() );\n        bomActiveRelease.setModifier( bomActiveReleaseDto.getModifier() );\n        bomActiveRelease.setCreatedAt( bomActiveReleaseDto.getCreatedAt() );\n        bomActiveRelease.setModifiedAt( bomActiveReleaseDto.getModifiedAt() );\n        bomActiveRelease.setProduct( productActiveReleaseDtoToProductActiveRelease( bomActiveReleaseDto.getProduct() ) );\n        bomActiveRelease.setDescription( bomActiveReleaseDto.getDescription() );\n        bomActiveRelease.setPartNumber( bomActiveReleaseDto.getPartNumber() );\n        bomActiveRelease.setFusionVersion( bomActiveReleaseDto.getFusionVersion() );\n        bomActiveRelease.setFusionId( bomActiveReleaseDto.getFusionId() );\n        bomActiveRelease.setLibraryItem( bomActiveReleaseDto.isLibraryItem() );\n        bomActiveRelease.setFusionRevisionId( bomActiveReleaseDto.getFusionRevisionId() );\n        bomActiveRelease.setConfiguration( bomActiveReleaseDto.isConfiguration() );\n        bomActiveRelease.setConfiguredDesign( bomActiveReleaseDto.isConfiguredDesign() );\n        bomActiveRelease.setConsistent( bomActiveReleaseDto.isConsistent() );\n        bomActiveRelease.setChildren( componentActiveReleaseDtoSetToBomComponentRelSet( bomActiveReleaseDto.getChildren() ) );\n\n        return bomActiveRelease;\n    }\n\n    protected Set<BomActiveRelease> bomActiveReleaseDtoSetToBomActiveReleaseSet(Set<BomActiveReleaseDto> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<BomActiveRelease> set1 = new LinkedHashSet<BomActiveRelease>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( BomActiveReleaseDto bomActiveReleaseDto : set ) {\n            set1.add( bomActiveReleaseDtoToBomActiveRelease( bomActiveReleaseDto ) );\n        }\n\n        return set1;\n    }\n\n    protected ProductActiveRelease productActiveReleaseDtoToProductActiveRelease(ProductActiveReleaseDto productActiveReleaseDto) {\n        if ( productActiveReleaseDto == null ) {\n            return null;\n        }\n\n        ProductActiveRelease productActiveRelease = new ProductActiveRelease();\n\n        productActiveRelease.setId( productActiveReleaseDto.getId() );\n        productActiveRelease.setDeleted( productActiveReleaseDto.isDeleted() );\n        productActiveRelease.setName( productActiveReleaseDto.getName() );\n        productActiveRelease.setUkrName( productActiveReleaseDto.getUkrName() );\n        productActiveRelease.setCreator( productActiveReleaseDto.getCreator() );\n        productActiveRelease.setModifier( productActiveReleaseDto.getModifier() );\n        productActiveRelease.setCreatedAt( productActiveReleaseDto.getCreatedAt() );\n        productActiveRelease.setModifiedAt( productActiveReleaseDto.getModifiedAt() );\n        productActiveRelease.setEngineeringBoms( bomActiveReleaseDtoSetToBomActiveReleaseSet( productActiveReleaseDto.getEngineeringBoms() ) );\n\n        return productActiveRelease;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/FusionBomItemMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class FusionBomItemMapperImpl extends FusionBomItemMapper {\n\n    @Override\n    public FusionComponentDto toDto(FusionComponent bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionComponentDto fusionComponentDto = new FusionComponentDto();\n\n        fusionComponentDto.setFusionId( bom.getFusionId() );\n        fusionComponentDto.setRevisionId( bom.getRevisionId() );\n        fusionComponentDto.setType( bom.getType() );\n        fusionComponentDto.setPartName( bom.getPartName() );\n        fusionComponentDto.setPartNumber( bom.getPartNumber() );\n        fusionComponentDto.setDescription( bom.getDescription() );\n        fusionComponentDto.setSourceFile( bom.getSourceFile() );\n        fusionComponentDto.setPath( bom.getPath() );\n        fusionComponentDto.setRoot( bom.isRoot() );\n\n        return fusionComponentDto;\n    }\n\n    @Override\n    public FusionComponent toFusionBom(FusionComponentDto bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionComponent fusionComponent = new FusionComponent();\n\n        fusionComponent.setFusionId( bom.getFusionId() );\n        fusionComponent.setRevisionId( bom.getRevisionId() );\n        fusionComponent.setType( bom.getType() );\n        fusionComponent.setPartName( bom.getPartName() );\n        fusionComponent.setPartNumber( bom.getPartNumber() );\n        fusionComponent.setDescription( bom.getDescription() );\n        fusionComponent.setSourceFile( bom.getSourceFile() );\n        fusionComponent.setPath( bom.getPath() );\n        fusionComponent.setRoot( bom.isRoot() );\n\n        return fusionComponent;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/MaterialMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.Material;\nimport com.ua.crow.plm.dto.fusion.MaterialDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class MaterialMapperImpl extends MaterialMapper {\n\n    @Override\n    MaterialDto toDto(Material material) {\n        if ( material == null ) {\n            return null;\n        }\n\n        MaterialDto materialDto = new MaterialDto();\n\n        materialDto.setId( material.getId() );\n        materialDto.setDeleted( material.isDeleted() );\n        materialDto.setName( material.getName() );\n        materialDto.setUkrName( material.getUkrName() );\n\n        return materialDto;\n    }\n\n    @Override\n    Material toPojo(MaterialDto material) {\n        if ( material == null ) {\n            return null;\n        }\n\n        Material material1 = new Material();\n\n        material1.setId( material.getId() );\n        material1.setDeleted( material.isDeleted() );\n        material1.setName( material.getName() );\n        material1.setUkrName( material.getUkrName() );\n\n        return material1;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ItemTypeNameMappingMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ItemTypeNameMappingMapperImpl extends ItemTypeNameMappingMapper {\n\n    @Override\n    public ItemTypeNameMappingDto toDto(ItemTypeNameMapping mapping) {\n        if ( mapping == null ) {\n            return null;\n        }\n\n        ItemTypeNameMappingDto itemTypeNameMappingDto = new ItemTypeNameMappingDto();\n\n        itemTypeNameMappingDto.setId( mapping.getId() );\n        itemTypeNameMappingDto.setDeleted( mapping.isDeleted() );\n        itemTypeNameMappingDto.setType( mapping.getType() );\n        itemTypeNameMappingDto.setName( mapping.getName() );\n\n        return itemTypeNameMappingDto;\n    }\n\n    @Override\n    public ItemTypeNameMapping toEntity(ItemTypeNameMappingDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ItemTypeNameMapping itemTypeNameMapping = new ItemTypeNameMapping();\n\n        itemTypeNameMapping.setId( dto.getId() );\n        itemTypeNameMapping.setDeleted( dto.isDeleted() );\n        itemTypeNameMapping.setType( dto.getType() );\n        itemTypeNameMapping.setName( dto.getName() );\n\n        return itemTypeNameMapping;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/PropertyTypeGroupMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class PropertyTypeGroupMapperImpl extends PropertyTypeGroupMapper {\n\n    @Override\n    public BomItemPropertyTypeGroupDto toDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup) {\n        if ( bomItemPropertyTypeGroup == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto = new BomItemPropertyTypeGroupDto();\n\n        bomItemPropertyTypeGroupDto.setId( bomItemPropertyTypeGroup.getId() );\n        bomItemPropertyTypeGroupDto.setDeleted( bomItemPropertyTypeGroup.isDeleted() );\n        bomItemPropertyTypeGroupDto.setName( bomItemPropertyTypeGroup.getName() );\n        bomItemPropertyTypeGroupDto.setUkrName( bomItemPropertyTypeGroup.getUkrName() );\n        bomItemPropertyTypeGroupDto.setCreator( bomItemPropertyTypeGroup.getCreator() );\n        bomItemPropertyTypeGroupDto.setModifier( bomItemPropertyTypeGroup.getModifier() );\n        bomItemPropertyTypeGroupDto.setCreatedAt( bomItemPropertyTypeGroup.getCreatedAt() );\n        bomItemPropertyTypeGroupDto.setModifiedAt( bomItemPropertyTypeGroup.getModifiedAt() );\n\n        return bomItemPropertyTypeGroupDto;\n    }\n\n    @Override\n    public BomItemPropertyTypeGroup toPojo(BomItemPropertyTypeGroupDto bomItemPropertyTypeDto) {\n        if ( bomItemPropertyTypeDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroup bomItemPropertyTypeGroup = new BomItemPropertyTypeGroup();\n\n        bomItemPropertyTypeGroup.setId( bomItemPropertyTypeDto.getId() );\n        bomItemPropertyTypeGroup.setDeleted( bomItemPropertyTypeDto.isDeleted() );\n        bomItemPropertyTypeGroup.setName( bomItemPropertyTypeDto.getName() );\n        bomItemPropertyTypeGroup.setUkrName( bomItemPropertyTypeDto.getUkrName() );\n        bomItemPropertyTypeGroup.setCreator( bomItemPropertyTypeDto.getCreator() );\n        bomItemPropertyTypeGroup.setModifier( bomItemPropertyTypeDto.getModifier() );\n        bomItemPropertyTypeGroup.setCreatedAt( bomItemPropertyTypeDto.getCreatedAt() );\n        bomItemPropertyTypeGroup.setModifiedAt( bomItemPropertyTypeDto.getModifiedAt() );\n\n        return bomItemPropertyTypeGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentGroupMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentGroupMapperImpl extends ComponentGroupMapper {\n\n    @Override\n    public ComponentGroupDto toDto(ComponentGroup group) {\n        if ( group == null ) {\n            return null;\n        }\n\n        ComponentGroupDto componentGroupDto = new ComponentGroupDto();\n\n        componentGroupDto.setId( group.getId() );\n        componentGroupDto.setDeleted( group.isDeleted() );\n        componentGroupDto.setName( group.getName() );\n        componentGroupDto.setUkrName( group.getUkrName() );\n        componentGroupDto.setCreator( group.getCreator() );\n        componentGroupDto.setModifier( group.getModifier() );\n        componentGroupDto.setCreatedAt( group.getCreatedAt() );\n        componentGroupDto.setModifiedAt( group.getModifiedAt() );\n        componentGroupDto.setParent( toDto( group.getParent() ) );\n\n        return componentGroupDto;\n    }\n\n    @Override\n    public ComponentGroup toEntity(ComponentGroupDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ComponentGroup componentGroup = new ComponentGroup();\n\n        componentGroup.setId( dto.getId() );\n        componentGroup.setDeleted( dto.isDeleted() );\n        componentGroup.setName( dto.getName() );\n        componentGroup.setUkrName( dto.getUkrName() );\n        componentGroup.setCreator( dto.getCreator() );\n        componentGroup.setModifier( dto.getModifier() );\n        componentGroup.setCreatedAt( dto.getCreatedAt() );\n        componentGroup.setModifiedAt( dto.getModifiedAt() );\n        componentGroup.setParent( toEntity( dto.getParent() ) );\n\n        return componentGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentPropertyMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentPropertyMapperImpl extends ComponentPropertyMapper {\n\n    @Override\n    public CompPropertiesActiveReleaseDto toDto(ComponentProperty bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        CompPropertiesActiveReleaseDto compPropertiesActiveReleaseDto = new CompPropertiesActiveReleaseDto();\n\n        compPropertiesActiveReleaseDto.setId( bomActiveRelease.getId() );\n        compPropertiesActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        compPropertiesActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        compPropertiesActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        compPropertiesActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        compPropertiesActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        compPropertiesActiveReleaseDto.setStringValue( bomActiveRelease.getStringValue() );\n        compPropertiesActiveReleaseDto.setNumericValue( bomActiveRelease.getNumericValue() );\n        compPropertiesActiveReleaseDto.setPropertyType( bomItemPropertyTypeToBomItemPropertyTypeDto( bomActiveRelease.getPropertyType() ) );\n\n        return compPropertiesActiveReleaseDto;\n    }\n\n    @Override\n    public ComponentProperty toPojo(CompPropertiesActiveReleaseDto bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ComponentProperty componentProperty = new ComponentProperty();\n\n        componentProperty.setId( bomActiveRelease.getId() );\n        componentProperty.setDeleted( bomActiveRelease.isDeleted() );\n        componentProperty.setCreator( bomActiveRelease.getCreator() );\n        componentProperty.setModifier( bomActiveRelease.getModifier() );\n        componentProperty.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        componentProperty.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        componentProperty.setStringValue( bomActiveRelease.getStringValue() );\n        componentProperty.setNumericValue( bomActiveRelease.getNumericValue() );\n        componentProperty.setPropertyType( bomItemPropertyTypeDtoToBomItemPropertyType( bomActiveRelease.getPropertyType() ) );\n\n        return componentProperty;\n    }\n\n    protected UnitsDto unitsToUnitsDto(Units units) {\n        if ( units == null ) {\n            return null;\n        }\n\n        UnitsDto unitsDto = new UnitsDto();\n\n        unitsDto.setId( units.getId() );\n        unitsDto.setDeleted( units.isDeleted() );\n        unitsDto.setName( units.getName() );\n        unitsDto.setUkrName( units.getUkrName() );\n        unitsDto.setType( units.getType() );\n        unitsDto.setShortName( units.getShortName() );\n\n        return unitsDto;\n    }\n\n    protected BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup) {\n        if ( bomItemPropertyTypeGroup == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto = new BomItemPropertyTypeGroupDto();\n\n        bomItemPropertyTypeGroupDto.setId( bomItemPropertyTypeGroup.getId() );\n        bomItemPropertyTypeGroupDto.setDeleted( bomItemPropertyTypeGroup.isDeleted() );\n        bomItemPropertyTypeGroupDto.setName( bomItemPropertyTypeGroup.getName() );\n        bomItemPropertyTypeGroupDto.setUkrName( bomItemPropertyTypeGroup.getUkrName() );\n        bomItemPropertyTypeGroupDto.setCreator( bomItemPropertyTypeGroup.getCreator() );\n        bomItemPropertyTypeGroupDto.setModifier( bomItemPropertyTypeGroup.getModifier() );\n        bomItemPropertyTypeGroupDto.setCreatedAt( bomItemPropertyTypeGroup.getCreatedAt() );\n        bomItemPropertyTypeGroupDto.setModifiedAt( bomItemPropertyTypeGroup.getModifiedAt() );\n\n        return bomItemPropertyTypeGroupDto;\n    }\n\n    protected BomItemPropertyTypeDto bomItemPropertyTypeToBomItemPropertyTypeDto(BomItemPropertyType bomItemPropertyType) {\n        if ( bomItemPropertyType == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeDto bomItemPropertyTypeDto = new BomItemPropertyTypeDto();\n\n        bomItemPropertyTypeDto.setId( bomItemPropertyType.getId() );\n        bomItemPropertyTypeDto.setDeleted( bomItemPropertyType.isDeleted() );\n        bomItemPropertyTypeDto.setName( bomItemPropertyType.getName() );\n        bomItemPropertyTypeDto.setUkrName( bomItemPropertyType.getUkrName() );\n        bomItemPropertyTypeDto.setCreator( bomItemPropertyType.getCreator() );\n        bomItemPropertyTypeDto.setModifier( bomItemPropertyType.getModifier() );\n        bomItemPropertyTypeDto.setCreatedAt( bomItemPropertyType.getCreatedAt() );\n        bomItemPropertyTypeDto.setModifiedAt( bomItemPropertyType.getModifiedAt() );\n        bomItemPropertyTypeDto.setUnits( unitsToUnitsDto( bomItemPropertyType.getUnits() ) );\n        bomItemPropertyTypeDto.setGroup( bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto( bomItemPropertyType.getGroup() ) );\n        bomItemPropertyTypeDto.setDataType( bomItemPropertyType.getDataType() );\n\n        return bomItemPropertyTypeDto;\n    }\n\n    protected Units unitsDtoToUnits(UnitsDto unitsDto) {\n        if ( unitsDto == null ) {\n            return null;\n        }\n\n        Units units = new Units();\n\n        units.setId( unitsDto.getId() );\n        units.setDeleted( unitsDto.isDeleted() );\n        units.setName( unitsDto.getName() );\n        units.setUkrName( unitsDto.getUkrName() );\n        units.setType( unitsDto.getType() );\n        units.setShortName( unitsDto.getShortName() );\n\n        return units;\n    }\n\n    protected BomItemPropertyTypeGroup bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup(BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto) {\n        if ( bomItemPropertyTypeGroupDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroup bomItemPropertyTypeGroup = new BomItemPropertyTypeGroup();\n\n        bomItemPropertyTypeGroup.setId( bomItemPropertyTypeGroupDto.getId() );\n        bomItemPropertyTypeGroup.setDeleted( bomItemPropertyTypeGroupDto.isDeleted() );\n        bomItemPropertyTypeGroup.setName( bomItemPropertyTypeGroupDto.getName() );\n        bomItemPropertyTypeGroup.setUkrName( bomItemPropertyTypeGroupDto.getUkrName() );\n        bomItemPropertyTypeGroup.setCreator( bomItemPropertyTypeGroupDto.getCreator() );\n        bomItemPropertyTypeGroup.setModifier( bomItemPropertyTypeGroupDto.getModifier() );\n        bomItemPropertyTypeGroup.setCreatedAt( bomItemPropertyTypeGroupDto.getCreatedAt() );\n        bomItemPropertyTypeGroup.setModifiedAt( bomItemPropertyTypeGroupDto.getModifiedAt() );\n\n        return bomItemPropertyTypeGroup;\n    }\n\n    protected BomItemPropertyType bomItemPropertyTypeDtoToBomItemPropertyType(BomItemPropertyTypeDto bomItemPropertyTypeDto) {\n        if ( bomItemPropertyTypeDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyType bomItemPropertyType = new BomItemPropertyType();\n\n        bomItemPropertyType.setId( bomItemPropertyTypeDto.getId() );\n        bomItemPropertyType.setDeleted( bomItemPropertyTypeDto.isDeleted() );\n        bomItemPropertyType.setName( bomItemPropertyTypeDto.getName() );\n        bomItemPropertyType.setUkrName( bomItemPropertyTypeDto.getUkrName() );\n        bomItemPropertyType.setCreator( bomItemPropertyTypeDto.getCreator() );\n        bomItemPropertyType.setModifier( bomItemPropertyTypeDto.getModifier() );\n        bomItemPropertyType.setCreatedAt( bomItemPropertyTypeDto.getCreatedAt() );\n        bomItemPropertyType.setModifiedAt( bomItemPropertyTypeDto.getModifiedAt() );\n        bomItemPropertyType.setUnits( unitsDtoToUnits( bomItemPropertyTypeDto.getUnits() ) );\n        bomItemPropertyType.setGroup( bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup( bomItemPropertyTypeDto.getGroup() ) );\n        bomItemPropertyType.setDataType( bomItemPropertyTypeDto.getDataType() );\n\n        return bomItemPropertyType;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ReleaseVersionMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.dto.released.ReleaseVersionDTO;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ReleaseVersionMapperImpl extends ReleaseVersionMapper {\n\n    @Override\n    public ReleaseVersionDTO toDto(ReleaseVersion bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ReleaseVersionDTO releaseVersionDTO = new ReleaseVersionDTO();\n\n        releaseVersionDTO.setId( bomActiveRelease.getId() );\n        releaseVersionDTO.setDeleted( bomActiveRelease.isDeleted() );\n        releaseVersionDTO.setName( bomActiveRelease.getName() );\n        releaseVersionDTO.setUkrName( bomActiveRelease.getUkrName() );\n        releaseVersionDTO.setCreator( bomActiveRelease.getCreator() );\n        releaseVersionDTO.setModifier( bomActiveRelease.getModifier() );\n        releaseVersionDTO.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        releaseVersionDTO.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        releaseVersionDTO.setReleased( bomActiveRelease.isReleased() );\n        releaseVersionDTO.setReleaseDate( bomActiveRelease.getReleaseDate() );\n        releaseVersionDTO.setVer( bomActiveRelease.getVer() );\n        releaseVersionDTO.setDescription( bomActiveRelease.getDescription() );\n\n        return releaseVersionDTO;\n    }\n\n    @Override\n    public ReleaseVersion toPojo(ReleaseVersionDTO bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ReleaseVersion releaseVersion = new ReleaseVersion();\n\n        releaseVersion.setId( bomActiveRelease.getId() );\n        releaseVersion.setDeleted( bomActiveRelease.isDeleted() );\n        releaseVersion.setName( bomActiveRelease.getName() );\n        releaseVersion.setUkrName( bomActiveRelease.getUkrName() );\n        releaseVersion.setCreator( bomActiveRelease.getCreator() );\n        releaseVersion.setModifier( bomActiveRelease.getModifier() );\n        releaseVersion.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        releaseVersion.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        releaseVersion.setReleased( bomActiveRelease.isReleased() );\n        releaseVersion.setReleaseDate( bomActiveRelease.getReleaseDate() );\n        releaseVersion.setDescription( bomActiveRelease.getDescription() );\n        releaseVersion.setVer( bomActiveRelease.getVer() );\n\n        return releaseVersion;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentMapperImpl extends ComponentMapper {\n\n    @Override\n    public ComponentActiveReleaseDto toDto(ComponentActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ComponentActiveReleaseDto componentActiveReleaseDto = new ComponentActiveReleaseDto();\n\n        componentActiveReleaseDto.setId( bomActiveRelease.getId() );\n        componentActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        componentActiveReleaseDto.setName( bomActiveRelease.getName() );\n        componentActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        componentActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        componentActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        componentActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        componentActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        if ( bomActiveRelease.getItemType() != null ) {\n            componentActiveReleaseDto.setItemType( bomActiveRelease.getItemType().name() );\n        }\n        componentActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        componentActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        componentActiveReleaseDto.setResourceItem( resourceItemToResourceItemDTO( bomActiveRelease.getResourceItem() ) );\n\n        return componentActiveReleaseDto;\n    }\n\n    @Override\n    public ComponentActiveRelease toPojo(ComponentActiveReleaseDto bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ComponentActiveRelease componentActiveRelease = new ComponentActiveRelease();\n\n        componentActiveRelease.setId( bomActiveRelease.getId() );\n        componentActiveRelease.setDeleted( bomActiveRelease.isDeleted() );\n        componentActiveRelease.setName( bomActiveRelease.getName() );\n        componentActiveRelease.setUkrName( bomActiveRelease.getUkrName() );\n        componentActiveRelease.setCreator( bomActiveRelease.getCreator() );\n        componentActiveRelease.setModifier( bomActiveRelease.getModifier() );\n        componentActiveRelease.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        componentActiveRelease.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        if ( bomActiveRelease.getItemType() != null ) {\n            componentActiveRelease.setItemType( Enum.valueOf( ItemTypes.class, bomActiveRelease.getItemType() ) );\n        }\n        componentActiveRelease.setDescription( bomActiveRelease.getDescription() );\n        componentActiveRelease.setPartNumber( bomActiveRelease.getPartNumber() );\n        componentActiveRelease.setResourceItem( resourceItemDTOToResourceItem( bomActiveRelease.getResourceItem() ) );\n\n        return componentActiveRelease;\n    }\n\n    protected List<ResourceGroupDto> resourceGroupListToResourceGroupDtoList(List<ResourceGroup> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroupDto> list1 = new ArrayList<ResourceGroupDto>( list.size() );\n        for ( ResourceGroup resourceGroup : list ) {\n            list1.add( resourceGroupToResourceGroupDto( resourceGroup ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroupDto resourceGroupToResourceGroupDto(ResourceGroup resourceGroup) {\n        if ( resourceGroup == null ) {\n            return null;\n        }\n\n        ResourceGroupDto resourceGroupDto = new ResourceGroupDto();\n\n        resourceGroupDto.setId( resourceGroup.getId() );\n        resourceGroupDto.setTenantId( resourceGroup.getTenantId() );\n        resourceGroupDto.setDeleted( resourceGroup.isDeleted() );\n        resourceGroupDto.setName( resourceGroup.getName() );\n        resourceGroupDto.setUkrName( resourceGroup.getUkrName() );\n        resourceGroupDto.setCreator( resourceGroup.getCreator() );\n        resourceGroupDto.setModifier( resourceGroup.getModifier() );\n        resourceGroupDto.setCreatedAt( resourceGroup.getCreatedAt() );\n        resourceGroupDto.setModifiedAt( resourceGroup.getModifiedAt() );\n        resourceGroupDto.setWithdrawAlgorythm( resourceGroup.getWithdrawAlgorythm() );\n        resourceGroupDto.setMinimalUnitToWithdraw( resourceGroup.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = resourceGroup.getResources();\n        if ( list != null ) {\n            resourceGroupDto.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n        resourceGroupDto.setParent( resourceGroup.getParent() );\n        resourceGroupDto.setChildren( resourceGroupListToResourceGroupDtoList( resourceGroup.getChildren() ) );\n\n        return resourceGroupDto;\n    }\n\n    protected ResourceItemDTO resourceItemToResourceItemDTO(ResourceItem resourceItem) {\n        if ( resourceItem == null ) {\n            return null;\n        }\n\n        ResourceItemDTO resourceItemDTO = new ResourceItemDTO();\n\n        resourceItemDTO.setId( resourceItem.getId() );\n        resourceItemDTO.setDeleted( resourceItem.isDeleted() );\n        resourceItemDTO.setName( resourceItem.getName() );\n        resourceItemDTO.setUkrName( resourceItem.getUkrName() );\n        resourceItemDTO.setCreator( resourceItem.getCreator() );\n        resourceItemDTO.setModifier( resourceItem.getModifier() );\n        resourceItemDTO.setCreatedAt( resourceItem.getCreatedAt() );\n        resourceItemDTO.setModifiedAt( resourceItem.getModifiedAt() );\n        resourceItemDTO.setWithdrawAlgorythm( resourceItem.getWithdrawAlgorythm() );\n        resourceItemDTO.setMinimalUnitToWithdraw( resourceItem.getMinimalUnitToWithdraw() );\n        resourceItemDTO.setPrice( resourceItem.getPrice() );\n        resourceItemDTO.setGroup( resourceGroupToResourceGroupDto( resourceItem.getGroup() ) );\n\n        return resourceItemDTO;\n    }\n\n    protected List<ResourceGroup> resourceGroupDtoListToResourceGroupList(List<ResourceGroupDto> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroup> list1 = new ArrayList<ResourceGroup>( list.size() );\n        for ( ResourceGroupDto resourceGroupDto : list ) {\n            list1.add( resourceGroupDtoToResourceGroup( resourceGroupDto ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroup resourceGroupDtoToResourceGroup(ResourceGroupDto resourceGroupDto) {\n        if ( resourceGroupDto == null ) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n\n        resourceGroup.setId( resourceGroupDto.getId() );\n        resourceGroup.setTenantId( resourceGroupDto.getTenantId() );\n        resourceGroup.setDeleted( resourceGroupDto.isDeleted() );\n        resourceGroup.setName( resourceGroupDto.getName() );\n        resourceGroup.setUkrName( resourceGroupDto.getUkrName() );\n        resourceGroup.setCreator( resourceGroupDto.getCreator() );\n        resourceGroup.setModifier( resourceGroupDto.getModifier() );\n        resourceGroup.setCreatedAt( resourceGroupDto.getCreatedAt() );\n        resourceGroup.setModifiedAt( resourceGroupDto.getModifiedAt() );\n        resourceGroup.setParent( resourceGroupDto.getParent() );\n        resourceGroup.setChildren( resourceGroupDtoListToResourceGroupList( resourceGroupDto.getChildren() ) );\n        resourceGroup.setWithdrawAlgorythm( resourceGroupDto.getWithdrawAlgorythm() );\n        resourceGroup.setMinimalUnitToWithdraw( resourceGroupDto.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list1 = resourceGroupDto.getResources();\n        if ( list1 != null ) {\n            resourceGroup.setResources( new ArrayList<ResourceItem>( list1 ) );\n        }\n\n        return resourceGroup;\n    }\n\n    protected ResourceItem resourceItemDTOToResourceItem(ResourceItemDTO resourceItemDTO) {\n        if ( resourceItemDTO == null ) {\n            return null;\n        }\n\n        ResourceItem resourceItem = new ResourceItem();\n\n        resourceItem.setId( resourceItemDTO.getId() );\n        resourceItem.setDeleted( resourceItemDTO.isDeleted() );\n        resourceItem.setName( resourceItemDTO.getName() );\n        resourceItem.setUkrName( resourceItemDTO.getUkrName() );\n        resourceItem.setCreator( resourceItemDTO.getCreator() );\n        resourceItem.setModifier( resourceItemDTO.getModifier() );\n        resourceItem.setCreatedAt( resourceItemDTO.getCreatedAt() );\n        resourceItem.setModifiedAt( resourceItemDTO.getModifiedAt() );\n        resourceItem.setWithdrawAlgorythm( resourceItemDTO.getWithdrawAlgorythm() );\n        resourceItem.setMinimalUnitToWithdraw( resourceItemDTO.getMinimalUnitToWithdraw() );\n        resourceItem.setPrice( resourceItemDTO.getPrice() );\n        resourceItem.setGroup( resourceGroupDtoToResourceGroup( resourceItemDTO.getGroup() ) );\n\n        return resourceItem;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/FullBomMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class FullBomMapperImpl extends FullBomMapper {\n\n    @Override\n    public BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveReleaseDto bomActiveReleaseDto = new BomActiveReleaseDto();\n\n        bomActiveReleaseDto.setId( bomActiveRelease.getId() );\n        bomActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveReleaseDto.setName( bomActiveRelease.getName() );\n        bomActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        bomActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        bomActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        bomActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveReleaseDto.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveReleaseDto.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveReleaseDto.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveReleaseDto.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveReleaseDto.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveReleaseDto.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveReleaseDto.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveReleaseDto;\n    }\n\n    @Override\n    public EngineeringBomWoChildren toDtoWoChildren(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        EngineeringBomWoChildren engineeringBomWoChildren = new EngineeringBomWoChildren();\n\n        engineeringBomWoChildren.setId( bomActiveRelease.getId() );\n        engineeringBomWoChildren.setDeleted( bomActiveRelease.isDeleted() );\n        engineeringBomWoChildren.setName( bomActiveRelease.getName() );\n        engineeringBomWoChildren.setUkrName( bomActiveRelease.getUkrName() );\n        engineeringBomWoChildren.setCreator( bomActiveRelease.getCreator() );\n        engineeringBomWoChildren.setModifier( bomActiveRelease.getModifier() );\n        engineeringBomWoChildren.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        engineeringBomWoChildren.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        engineeringBomWoChildren.setDescription( bomActiveRelease.getDescription() );\n        engineeringBomWoChildren.setPartNumber( bomActiveRelease.getPartNumber() );\n        engineeringBomWoChildren.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        engineeringBomWoChildren.setFusionId( bomActiveRelease.getFusionId() );\n        engineeringBomWoChildren.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        engineeringBomWoChildren.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        engineeringBomWoChildren.setConfiguration( bomActiveRelease.isConfiguration() );\n        engineeringBomWoChildren.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        engineeringBomWoChildren.setConsistent( bomActiveRelease.isConsistent() );\n\n        return engineeringBomWoChildren;\n    }\n\n    @Override\n    public BomActiveRelease toPojo(BomActiveReleaseDto bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveRelease bomActiveRelease1 = new BomActiveRelease();\n\n        bomActiveRelease1.setId( bomActiveRelease.getId() );\n        bomActiveRelease1.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveRelease1.setName( bomActiveRelease.getName() );\n        bomActiveRelease1.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveRelease1.setCreator( bomActiveRelease.getCreator() );\n        bomActiveRelease1.setModifier( bomActiveRelease.getModifier() );\n        bomActiveRelease1.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveRelease1.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveRelease1.setDescription( bomActiveRelease.getDescription() );\n        bomActiveRelease1.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveRelease1.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveRelease1.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveRelease1.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveRelease1.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveRelease1.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveRelease1.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveRelease1.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveRelease1;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/BodyMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.database.fusion.Material;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.MaterialDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class BodyMapperImpl extends BodyMapper {\n\n    @Override\n    public Body toDto(FusionPhysicalProperty fusionPhysicalProperty) {\n        if ( fusionPhysicalProperty == null ) {\n            return null;\n        }\n\n        Body body = new Body();\n\n        body.setBodyName( fusionPhysicalProperty.getBodyName() );\n        body.setWidthMm( fusionPhysicalProperty.getWidthMm() );\n        body.setLengthMm( fusionPhysicalProperty.getLengthMm() );\n        body.setHeightMm( fusionPhysicalProperty.getHeightMm() );\n        body.setVolumeCm3( fusionPhysicalProperty.getVolumeCm3() );\n        body.setAreaCm2( fusionPhysicalProperty.getAreaCm2() );\n        body.setMassKg( fusionPhysicalProperty.getMassKg() );\n        body.setDensityKgCm2( fusionPhysicalProperty.getDensityKgCm2() );\n        body.setMaterial( materialToMaterialDto( fusionPhysicalProperty.getMaterial() ) );\n\n        return body;\n    }\n\n    @Override\n    public FusionPhysicalProperty toPojo(Body body) {\n        if ( body == null ) {\n            return null;\n        }\n\n        FusionPhysicalProperty fusionPhysicalProperty = new FusionPhysicalProperty();\n\n        fusionPhysicalProperty.setBodyName( body.getBodyName() );\n        fusionPhysicalProperty.setMaterial( materialDtoToMaterial( body.getMaterial() ) );\n        fusionPhysicalProperty.setWidthMm( body.getWidthMm() );\n        fusionPhysicalProperty.setLengthMm( body.getLengthMm() );\n        fusionPhysicalProperty.setHeightMm( body.getHeightMm() );\n        fusionPhysicalProperty.setVolumeCm3( body.getVolumeCm3() );\n        fusionPhysicalProperty.setAreaCm2( body.getAreaCm2() );\n        fusionPhysicalProperty.setMassKg( body.getMassKg() );\n        fusionPhysicalProperty.setDensityKgCm2( body.getDensityKgCm2() );\n\n        return fusionPhysicalProperty;\n    }\n\n    protected MaterialDto materialToMaterialDto(Material material) {\n        if ( material == null ) {\n            return null;\n        }\n\n        MaterialDto materialDto = new MaterialDto();\n\n        materialDto.setId( material.getId() );\n        materialDto.setDeleted( material.isDeleted() );\n        materialDto.setName( material.getName() );\n        materialDto.setUkrName( material.getUkrName() );\n\n        return materialDto;\n    }\n\n    protected Material materialDtoToMaterial(MaterialDto materialDto) {\n        if ( materialDto == null ) {\n            return null;\n        }\n\n        Material material = new Material();\n\n        material.setId( materialDto.getId() );\n        material.setDeleted( materialDto.isDeleted() );\n        material.setName( materialDto.getName() );\n        material.setUkrName( materialDto.getUkrName() );\n\n        return material;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TimeLogMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TimeLogMapperImpl extends TimeLogMapper {\n\n    @Override\n    public TimeLogDto toDto(TimeLog timeLog) {\n        if ( timeLog == null ) {\n            return null;\n        }\n\n        TimeLogDto timeLogDto = new TimeLogDto();\n\n        timeLogDto.setId( timeLog.getId() );\n        timeLogDto.setDeleted( timeLog.isDeleted() );\n        timeLogDto.setName( timeLog.getName() );\n        timeLogDto.setUkrName( timeLog.getUkrName() );\n        timeLogDto.setCreator( timeLog.getCreator() );\n        timeLogDto.setModifier( timeLog.getModifier() );\n        timeLogDto.setCreatedAt( timeLog.getCreatedAt() );\n        timeLogDto.setModifiedAt( timeLog.getModifiedAt() );\n        timeLogDto.setAmount( timeLog.getAmount() );\n        timeLogDto.setLoggedBy( userEntityToUserDto( timeLog.getLoggedBy() ) );\n        timeLogDto.setDate( timeLog.getDate() );\n\n        return timeLogDto;\n    }\n\n    protected UserDto userEntityToUserDto(UserEntity userEntity) {\n        if ( userEntity == null ) {\n            return null;\n        }\n\n        UserDto userDto = new UserDto();\n\n        userDto.setId( userEntity.getId() );\n        userDto.setDeleted( userEntity.isDeleted() );\n        userDto.setUsername( userEntity.getUsername() );\n        userDto.setEnabled( userEntity.isEnabled() );\n        userDto.setName( userEntity.getName() );\n\n        return userDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/SeverityMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Severity;\nimport com.ua.crow.mes.dto.SeverityDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class SeverityMapperImpl extends SeverityMapper {\n\n    @Override\n    public SeverityDto toDto(Severity severity) {\n        if ( severity == null ) {\n            return null;\n        }\n\n        SeverityDto severityDto = new SeverityDto();\n\n        severityDto.setColor( severity.getColor() );\n        if ( severity.getValue() != null ) {\n            severityDto.setValue( severity.getValue() );\n        }\n\n        severityDto.setName( severity.toString() );\n\n        return severityDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/SubtaskMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Subtask;\nimport com.ua.crow.mes.dto.SubtaskDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class SubtaskMapperImpl extends SubtaskMapper {\n\n    @Autowired\n    private TaskMapper taskMapper;\n\n    @Override\n    public SubtaskDto toDto(Subtask severity) {\n        if ( severity == null ) {\n            return null;\n        }\n\n        SubtaskDto subtaskDto = new SubtaskDto();\n\n        subtaskDto.setId( severity.getId() );\n        subtaskDto.setDeleted( severity.isDeleted() );\n        subtaskDto.setName( severity.getName() );\n        subtaskDto.setUkrName( severity.getUkrName() );\n        subtaskDto.setCreator( severity.getCreator() );\n        subtaskDto.setModifier( severity.getModifier() );\n        subtaskDto.setCreatedAt( severity.getCreatedAt() );\n        subtaskDto.setModifiedAt( severity.getModifiedAt() );\n        subtaskDto.setSequence( severity.getSequence() );\n        subtaskDto.setTask( taskMapper.toRef( severity.getTask() ) );\n\n        return subtaskDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TaskMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Subtask;\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.dto.SubtaskDto;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.TaskRef;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport java.util.ArrayList;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TaskMapperImpl extends TaskMapper {\n\n    @Autowired\n    private TaskTypeMapper taskTypeMapper;\n    @Autowired\n    private UserEntityMapper userEntityMapper;\n    @Autowired\n    private CommentsMapper commentsMapper;\n    @Autowired\n    private SeverityMapper severityMapper;\n    @Autowired\n    private TimeLogMapper timeLogMapper;\n\n    @Override\n    public TaskDto toDto(Task task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        TaskDto taskDto = new TaskDto();\n\n        taskDto.setId( task.getId() );\n        taskDto.setDeleted( task.isDeleted() );\n        taskDto.setName( task.getName() );\n        taskDto.setUkrName( task.getUkrName() );\n        taskDto.setCreator( task.getCreator() );\n        taskDto.setModifier( task.getModifier() );\n        taskDto.setCreatedAt( task.getCreatedAt() );\n        taskDto.setModifiedAt( task.getModifiedAt() );\n        taskDto.setAssignee( userEntityMapper.toDto( task.getAssignee() ) );\n        taskDto.setSubtask( task.isSubtask() );\n        taskDto.setReporter( userEntityMapper.toDto( task.getReporter() ) );\n        taskDto.setDescription( task.getDescription() );\n        taskDto.setStatus( taskStatusToTaskStatusDto( task.getStatus() ) );\n        taskDto.setStart( task.getStart() );\n        taskDto.setHoursLogged( timeLogListToTimeLogDtoList( task.getHoursLogged() ) );\n        taskDto.setComments( commentsMapper.map( task.getComments() ) );\n        taskDto.setSubtasks( subtaskSetToSubtaskDtoSet( task.getSubtasks() ) );\n        taskDto.setSeverity( severityMapper.toDto( task.getSeverity() ) );\n        taskDto.setTaskType( taskTypeMapper.toDto( task.getTaskType() ) );\n\n        taskDto.setTotalHoursLogged( taskService.computeTotalHoursLogged(task) );\n        taskDto.setSubtasksCount( taskService.getSubtasksCount(task) );\n\n        return taskDto;\n    }\n\n    @Override\n    public TaskRef toRef(Task task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        TaskRef taskRef = new TaskRef();\n\n        taskRef.setType( taskTypeMapper.toDto( task.getTaskType() ) );\n        taskRef.setId( task.getId() );\n        taskRef.setDeleted( task.isDeleted() );\n        taskRef.setName( task.getName() );\n        taskRef.setUkrName( task.getUkrName() );\n        taskRef.setCreator( task.getCreator() );\n        taskRef.setModifier( task.getModifier() );\n        taskRef.setCreatedAt( task.getCreatedAt() );\n        taskRef.setModifiedAt( task.getModifiedAt() );\n        taskRef.setStatus( taskStatusToTaskStatusDto( task.getStatus() ) );\n        taskRef.setAssignee( userEntityMapper.toDto( task.getAssignee() ) );\n        taskRef.setReporter( userEntityMapper.toDto( task.getReporter() ) );\n\n        return taskRef;\n    }\n\n    protected TaskStatusDto taskStatusToTaskStatusDto(TaskStatus taskStatus) {\n        if ( taskStatus == null ) {\n            return null;\n        }\n\n        TaskStatusDto taskStatusDto = new TaskStatusDto();\n\n        taskStatusDto.setId( taskStatus.getId() );\n        taskStatusDto.setDeleted( taskStatus.isDeleted() );\n        taskStatusDto.setName( taskStatus.getName() );\n        taskStatusDto.setUkrName( taskStatus.getUkrName() );\n        taskStatusDto.setTaskType( taskTypeMapper.toDto( taskStatus.getTaskType() ) );\n        taskStatusDto.setInitialStatus( taskStatus.isInitialStatus() );\n        taskStatusDto.setTerminatedStatus( taskStatus.isTerminatedStatus() );\n\n        return taskStatusDto;\n    }\n\n    protected List<TimeLogDto> timeLogListToTimeLogDtoList(List<TimeLog> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<TimeLogDto> list1 = new ArrayList<TimeLogDto>( list.size() );\n        for ( TimeLog timeLog : list ) {\n            list1.add( timeLogMapper.toDto( timeLog ) );\n        }\n\n        return list1;\n    }\n\n    protected SubtaskDto subtaskToSubtaskDto(Subtask subtask) {\n        if ( subtask == null ) {\n            return null;\n        }\n\n        SubtaskDto subtaskDto = new SubtaskDto();\n\n        subtaskDto.setId( subtask.getId() );\n        subtaskDto.setDeleted( subtask.isDeleted() );\n        subtaskDto.setName( subtask.getName() );\n        subtaskDto.setUkrName( subtask.getUkrName() );\n        subtaskDto.setCreator( subtask.getCreator() );\n        subtaskDto.setModifier( subtask.getModifier() );\n        subtaskDto.setCreatedAt( subtask.getCreatedAt() );\n        subtaskDto.setModifiedAt( subtask.getModifiedAt() );\n        subtaskDto.setSequence( subtask.getSequence() );\n        subtaskDto.setTask( toRef( subtask.getTask() ) );\n\n        return subtaskDto;\n    }\n\n    protected Set<SubtaskDto> subtaskSetToSubtaskDtoSet(Set<Subtask> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<SubtaskDto> set1 = new LinkedHashSet<SubtaskDto>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( Subtask subtask : set ) {\n            set1.add( subtaskToSubtaskDto( subtask ) );\n        }\n\n        return set1;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TaskTypeMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskType;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TaskTypeMapperImpl extends TaskTypeMapper {\n\n    @Override\n    public TaskTypeDto toDto(TaskType taskType) {\n        if ( taskType == null ) {\n            return null;\n        }\n\n        TaskTypeDto taskTypeDto = new TaskTypeDto();\n\n        taskTypeDto.setId( taskType.getId() );\n        taskTypeDto.setDeleted( taskType.isDeleted() );\n        taskTypeDto.setName( taskType.getName() );\n        taskTypeDto.setUkrName( taskType.getUkrName() );\n\n        return taskTypeDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/UserEntityMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.dto.UserDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class UserEntityMapperImpl extends UserEntityMapper {\n\n    @Override\n    public UserDto toDto(UserEntity user) {\n        if ( user == null ) {\n            return null;\n        }\n\n        UserDto userDto = new UserDto();\n\n        userDto.setId( user.getId() );\n        userDto.setDeleted( user.isDeleted() );\n        userDto.setUsername( user.getUsername() );\n        userDto.setEnabled( user.isEnabled() );\n        userDto.setName( user.getName() );\n\n        return userDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TaskStatusMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.database.TaskType;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TaskStatusMapperImpl extends TaskStatusMapper {\n\n    @Override\n    public TaskStatusDto toDto(TaskStatus task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        TaskStatusDto taskStatusDto = new TaskStatusDto();\n\n        taskStatusDto.setId( task.getId() );\n        taskStatusDto.setDeleted( task.isDeleted() );\n        taskStatusDto.setName( task.getName() );\n        taskStatusDto.setUkrName( task.getUkrName() );\n        taskStatusDto.setTaskType( taskTypeToTaskTypeDto( task.getTaskType() ) );\n        taskStatusDto.setInitialStatus( task.isInitialStatus() );\n        taskStatusDto.setTerminatedStatus( task.isTerminatedStatus() );\n\n        return taskStatusDto;\n    }\n\n    protected TaskTypeDto taskTypeToTaskTypeDto(TaskType taskType) {\n        if ( taskType == null ) {\n            return null;\n        }\n\n        TaskTypeDto taskTypeDto = new TaskTypeDto();\n\n        taskTypeDto.setId( taskType.getId() );\n        taskTypeDto.setDeleted( taskType.isDeleted() );\n        taskTypeDto.setName( taskType.getName() );\n        taskTypeDto.setUkrName( taskType.getUkrName() );\n\n        return taskTypeDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/CommentsMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.database.Comment;\nimport com.ua.crow.mes.dto.CommentDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class CommentsMapperImpl extends CommentsMapper {\n\n    @Override\n    public CommentDto toDto(Comment comment) {\n        if ( comment == null ) {\n            return null;\n        }\n\n        CommentDto commentDto = new CommentDto();\n\n        commentDto.setId( comment.getId() );\n        commentDto.setDeleted( comment.isDeleted() );\n        commentDto.setName( comment.getName() );\n        commentDto.setUkrName( comment.getUkrName() );\n        commentDto.setCreator( comment.getCreator() );\n        commentDto.setModifier( comment.getModifier() );\n        commentDto.setCreatedAt( comment.getCreatedAt() );\n        commentDto.setModifiedAt( comment.getModifiedAt() );\n        commentDto.setImageUrl( comment.getImageUrl() );\n        commentDto.setAudioUrl( comment.getAudioUrl() );\n        commentDto.setAuthor( userEntityToUserDto( comment.getAuthor() ) );\n\n        return commentDto;\n    }\n\n    @Override\n    public List<CommentDto> map(List<Comment> comments) {\n        if ( comments == null ) {\n            return null;\n        }\n\n        List<CommentDto> list = new ArrayList<CommentDto>( comments.size() );\n        for ( Comment comment : comments ) {\n            list.add( toDto( comment ) );\n        }\n\n        return list;\n    }\n\n    protected UserDto userEntityToUserDto(UserEntity userEntity) {\n        if ( userEntity == null ) {\n            return null;\n        }\n\n        UserDto userDto = new UserDto();\n\n        userDto.setId( userEntity.getId() );\n        userDto.setDeleted( userEntity.isDeleted() );\n        userDto.setUsername( userEntity.getUsername() );\n        userDto.setEnabled( userEntity.isEnabled() );\n        userDto.setName( userEntity.getName() );\n\n        return userDto;\n    }\n}\n\n\n\n// ===== File: crow/src/test/java/com/ua/crown/CrownApplicationTests.java =====\npackage com.ua.crown;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest()\nclass CrownApplicationTests {\n\n    @BeforeEach\n    public void setUp() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NamedNumericIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class NamedNumericIdEntityDto extends NumericIdEntityDto {\n    private String name;\n\n    private String ukrName;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/FindProjectByNameRequest.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FindProjectByNameRequest {\n    String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NumericIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class NumericIdEntityDto {\n    private Long id;\n    private boolean deleted;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/StringIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport jakarta.persistence.Id;\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@MappedSuperclass\n@Getter\n@Setter\npublic class StringIdEntityDto {\n    @Id\n    String id;\n\n    private boolean deleted;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NamedStringIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class NamedStringIdEntityDto extends StringIdEntityDto {\n    private String name;\n\n    private String ukrName;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NamedBasicEntityWithNumericIdDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.Date;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class NamedBasicEntityWithNumericIdDto extends NamedNumericIdEntityDto {\n\n    private String creator = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private String modifier = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date createdAt = null;\n\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/JwtRequest.java =====\npackage com.ua.crow.dto;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class JwtRequest {\n    private String username;\n\n    private String password;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/FileTypes.java =====\npackage com.ua.crow.dto;\n\npublic enum FileTypes {\n    VIDEO,\n    AUDIO,\n    IMAGE,\n    DOCUMENT\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/appsmith/ResponseMeta.java =====\npackage com.ua.crow.dto.appsmith;\n\npublic class ResponseMeta {\n    public int status;\n    public boolean success;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/appsmith/Data.java =====\npackage com.ua.crow.dto.appsmith;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class Data {\n    public String email;\n    public String username;\n    public String name;\n    public String useCase;\n    public boolean enableTelemetry;\n    public boolean accountNonExpired;\n    public boolean accountNonLocked;\n    public boolean credentialsNonExpired;\n    public boolean emptyInstance;\n    public boolean isAnonymous;\n    public boolean isEnabled;\n    public boolean isSuperUser;\n    public boolean isConfigurable;\n    public boolean adminSettingsVisible;\n    public boolean isIntercomConsentGiven;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/appsmith/MeResponse.java =====\npackage com.ua.crow.dto.appsmith;\n\npublic class MeResponse {\n    public ResponseMeta responseMeta;\n    public Data data;\n    public String errorDisplay;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/ErrorInfo.java =====\npackage com.ua.crow.dto;\n\nimport java.util.Optional;\nimport lombok.Getter;\n\npublic record ErrorInfo(@Getter int code, @Getter String message, Optional<String> url) {\n    public static ErrorInfo createErrorInfo(int code, String message, String url) {\n        return new ErrorInfo(code, message, Optional.of(url));\n    }\n\n    public static ErrorInfo createErrorInfo(int code, String message) {\n        return new ErrorInfo(code, message, Optional.empty());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/mappers/UnitsMapper.java =====\npackage com.ua.crow.dto.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class UnitsMapper {\n    public abstract UnitsDto toDto(Units units);\n    public abstract Units toPojo(UnitsDto unitsDto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/JwtResponse.java =====\npackage com.ua.crow.dto;\n\nimport lombok.*;\n\npublic class JwtResponse {\n    @Getter\n    @Setter\n    private String token;\n\n    public JwtResponse(String token) {\n        this.token = token;\n    }\n\n    public JwtResponse() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/repository/UnitsRepository.java =====\npackage com.ua.crow.database.repository;\n\nimport com.ua.crow.database.models.common.Units;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\npublic interface UnitsRepository extends CrudRepository<Units, Long> {\n    Optional<Units> findByShortName(String shortName);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/repository/UserRoleRepository.java =====\npackage com.ua.crow.database.repository;\n\nimport com.ua.crow.database.models.auth.UserRole;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRoleRepository extends CrudRepository<UserRole, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/repository/UserRepository.java =====\npackage com.ua.crow.database.repository;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\n    Optional<UserEntity> findByUsername(String username);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/auth/UserRole.java =====\npackage com.ua.crow.database.models.auth;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity(name = \"userrole\")\n@Table(indexes = {@Index(name = \"userrole_user_id_uindex\", columnList = \"user_id\")})\npublic class UserRole {\n\n    @Id\n    @Column(name = \"user_id\", nullable = false)\n    private Long userId;\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"role\", nullable = false)\n    private Role role;\n\n    @OneToOne(mappedBy = \"userRole\", cascade = CascadeType.ALL, fetch = FetchType.LAZY, optional = false)\n    private UserEntity user;\n\n    public UserRole() {}\n\n\n    public UserRole(Role role) {\n        this.role = role;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/auth/UserEntity.java =====\npackage com.ua.crow.database.models.auth;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport com.ua.crow.workspace.WorkspaceType;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n\n@Getter\n@Setter\n@Entity\npublic class UserEntity extends NumericIdEntity {\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    private String name;\n\n    private String password;\n\n    private boolean enabled;\n\n    private String email;\n\n    private boolean accountNonExpired;\n\n    private boolean accountNonLocked;\n\n    private boolean anonymous;\n\n    private boolean credentialsNonExpired;\n\n    @Enumerated(EnumType.STRING)\n    private WorkspaceType currentWorkspace;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @PrimaryKeyJoinColumn\n    private UserRole userRole;\n\n    public UserEntity() {}\n\n    public UserEntity(String username, String password, boolean enabled) {\n        this.username = username;\n        this.password = password;\n        this.enabled = enabled;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/auth/Role.java =====\npackage com.ua.crow.database.models.auth;\n\npublic enum Role {\n    ADMIN,\n    RESEARCH,\n    WORKER\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/cashbox/Cashbox.java =====\npackage com.ua.crow.database.models.cashbox;\n\nimport com.ua.crow.database.models.common.Location;\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.Currency;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class Cashbox extends BasicEntityWithNumericId {\n\n    @ManyToOne\n    private Location location;\n\n    @ManyToOne\n    private Currency currency;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/cashbox/CashboxLeftovers.java =====\npackage com.ua.crow.database.models.cashbox;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Date;\n\npublic class CashboxLeftovers extends NumericIdEntity {\n    @ManyToOne\n    private Cashbox cashbox;\n\n    private Date date;\n\n    double leftover;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/Country.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Country extends NamedNumericIdEntity {\n    private String code;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NumericIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NumericIdEntity implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String tenantId;\n\n    private boolean deleted;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NamedBasicEntityWithNumericId.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport java.util.Date;\nimport lombok.*;\nimport org.springframework.data.annotation.*;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NamedBasicEntityWithNumericId extends NamedNumericIdEntity {\n    @CreatedBy\n    private String creator = null;\n\n    @LastModifiedBy\n    private String modifier = null;\n\n    @CreatedDate\n    private Date createdAt = null;\n\n    @LastModifiedDate\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/BasicEntityWithNumericId.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport java.util.Date;\nimport lombok.*;\nimport org.springframework.data.annotation.*;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class BasicEntityWithNumericId extends NumericIdEntity {\n\n    @CreatedBy\n    private String creator = null;\n\n    @LastModifiedBy\n    private String modifier = null;\n\n    @CreatedDate\n    private Date createdAt = null;\n\n    @LastModifiedDate\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NamedNumericIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.*;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NamedNumericIdEntity extends NumericIdEntity {\n\n    private String name;\n\n    private String ukrName;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/StringIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.Id;\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@MappedSuperclass\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\npublic class StringIdEntity {\n    @Id\n    @EqualsAndHashCode.Include\n    private String id;\n\n    private String tenantId;\n\n    private boolean deleted;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/Currency.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.Entity;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class Currency extends NamedNumericIdEntity {\n    private String code;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NamedStringIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NamedStringIdEntity extends StringIdEntity {\n\n    private String name;\n\n    private String ukrName;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/AbstractResourceGroup.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.List;\n\n@Setter\n@Getter\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener.class)\npublic abstract class AbstractResourceGroup<T extends AbstractResourceGroup<T>> extends NamedBasicEntityWithNumericId implements Convertable {\n\n    @ManyToOne\n    @JoinColumn(name = \"parent_id\")\n    private T parent;\n\n    @OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private List<T> children;\n\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/Address.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class Address extends NumericIdEntity {\n    private String addressLine1;\n    private String addressLine2;\n    private String postCode;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/Units.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class Units extends NamedNumericIdEntity implements Convertable {\n\n    @Enumerated(EnumType.STRING)\n    private TypeOfUnits type;\n\n    private String shortName;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/TypeOfUnits.java =====\npackage com.ua.crow.database.models.common;\n\n// volume, lenght, voltage etc\npublic enum TypeOfUnits {\n    SQUARE,\n    UNITS_LENGTH,\n    MASS,\n    VOLUME,\n    DENSITY,\n    PRESSURE,\n    TEMPERATURE,\n    PCS;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/DataTypes.java =====\npackage com.ua.crow.database.models.common;\n\npublic enum DataTypes {\n    NUMBER,\n    TEXT,\n    RASTISED_IMAGE,\n    VECTOR_IMAGE,\n    URL,\n    MONEY,\n    MODEL\n\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/Location.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.Country;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Location extends BasicEntityWithNumericId {\n\n    @ManyToOne\n    private Country country;\n\n    @ManyToOne\n    private Address address;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/FusionComponentDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.beans.factory.annotation.Configurable;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\n\n@Setter\n@Getter\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Configurable\npublic class FusionComponentDto implements Convertable {\n\n    private String fusionId;\n\n    private String revisionId;\n\n    private ItemTypes type;\n\n    private String partName;\n\n    private FusionComponentDto parent;\n\n    private FusionBomDto parentBom;\n\n    private List<FusionComponentDto> children = new LinkedList<>();\n\n    private String partNumber;\n\n    private Double quantity;\n\n    private String description;\n\n    private String sourceFile;\n\n    private String path;\n\n    private Set<Body> bodies;\n\n    private boolean root;\n\n    public void addChild(FusionComponentDto item){\n        children.add(item);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/AddChildRequest.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class AddChildRequest {\n\n    @NotNull\n    FusionId parentId;\n\n    @NotNull\n    FusionId bomId;\n\n    @NotNull\n    FusionId childId;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/FusionBomDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Getter\n@Setter\npublic class FusionBomDto  implements Convertable {\n    String fusionId;\n    ProductActiveReleaseDto product;\n    String documentName;\n    String version;\n    boolean processed;\n    Long engineeringBomId;\n    String description;\n    boolean isLibraryItem;\n    String revisionId;\n    String partNumber;\n    boolean isConfiguration;\n    boolean isConfiguredDesign;\n    FusionComponentDto rootPart;\n    boolean deleted;\n\n    private String creator = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private String modifier = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date createdAt = null;\n\n    private Date modifiedAt = null;\n\n    private String name;\n\n    /**\n     * Signed URL to download STEP model from MinIO.\n     */\n    private String url;\n\n    private java.util.List<FusionBomDto> children;\n\n    public java.util.List<FusionBomDto> getChildren() {\n        return children == null ? java.util.Collections.emptyList() : children;\n    }\n\n    public void setChildren(java.util.List<FusionBomDto> children) {\n        this.children = children;\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/Body.java =====\npackage com.ua.crow.plm.dto.fusion;\n\n\n\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@EqualsAndHashCode\npublic class Body {\n    String bodyName;\n    String description;\n    Double widthMm;\n    Double lengthMm;\n    Double heightMm;\n    Double volumeCm3;\n    Double areaCm2;\n    Double massKg;\n    Double densityKgCm2;\n    MaterialDto material;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/FusionRevisionDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FusionRevisionDto {\n    private String revisionId;\n    private int number;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/MaterialDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.ua.crow.dto.basic.NamedStringIdEntityDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class MaterialDto extends NamedStringIdEntityDto {\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ResourceGroupDto.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Setter\n@Getter\npublic class ResourceGroupDto extends NamedBasicEntityWithNumericId implements Convertable {\n    private WithdrawAlgorythm withdrawAlgorythm;\n    private double minimalUnitToWithdraw;\n    List<ResourceItem> resources;\n    private ResourceGroup parent;\n    private List<ResourceGroupDto> children;\n\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/BomDtoShort.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\n\npublic class BomDtoShort extends NamedBasicEntityWithNumericIdDto {\n    \n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ResourceItemDTO.java =====\npackage com.ua.crow.plm.dto;\n\n\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\n\nimport lombok.Data;\n\n@Data\npublic class ResourceItemDTO extends NamedBasicEntityWithNumericIdDto {\n\n\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    private double price;\n\n\n    private ResourceGroupDto group;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/UnitsDto.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.database.models.common.TypeOfUnits;\nimport com.ua.crow.dto.basic.NamedNumericIdEntityDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UnitsDto extends NamedNumericIdEntityDto {\n\n    private TypeOfUnits type;\n\n    private String shortName;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/merge/MergeBomTreesDto.java =====\npackage com.ua.crow.plm.dto.merge;\n\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n/**\n * DTO combining Fusion and Engineering BOM trees for merge UI.\n */\n@Getter\n@Setter\npublic class MergeBomTreesDto {\n    private FusionBomDto fusionBom;\n    private BomActiveReleaseDto engineeringBom;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ResourceDto.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Setter\n@Getter\npublic class ResourceDto extends NamedBasicEntityWithNumericIdDto {\n\n\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    private double price;\n\n\n    private ResourceGroup group;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/MergeBomItemsRequest.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class MergeBomItemsRequest {\n    @NotNull\n    @NotEmpty\n    private String sourceFusionId;\n    @NotNull\n    @NotEmpty\n    private String sourceRevisionId;\n    @NotNull\n    @NotEmpty\n    private String targetFusionId;\n    @NotNull\n    @NotEmpty\n    private String targetRevisionId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/FusionBomsListRequest.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Optional;\n\n@Getter\n@Setter\npublic class FusionBomsListRequest {\n    Optional<Long> productId = Optional.empty();\n    Optional<Long> release = Optional.empty();\n    Optional<Boolean> unprocessed = Optional.empty();\n    Optional<String> partNumber = Optional.empty();\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/MapProductRequest.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class MapProductRequest {\n    @NotNull\n    Long productId;\n    @NotNull\n    @NotEmpty\n    String fusionBomId;\n\n    @NotNull\n    @NotEmpty\n    String revisionId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/ComponentRequestDto.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ComponentRequestDto {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ReleaseVersionDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\n\nimport java.util.Date;\n\n@Data\npublic class ReleaseVersionDTO extends NamedBasicEntityWithNumericIdDto {\n\n    private boolean released;\n\n    private Date releaseDate;\n\n    private ReleaseVersionDTO previous;\n\n    private Double ver;\n\n    private String description;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ComponentReleasedPropertiesDto.java =====\npackage com.ua.crow.plm.dto.released;\n\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\n\npublic class ComponentReleasedPropertiesDto extends ComponentPropertiesDTO<ComponentReleasedDTO> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/BomReleasedDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\n\nimport com.ua.crow.plm.dto.base.EngineeringBomDTO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class BomReleasedDTO extends EngineeringBomDTO<ComponentReleasedDTO, ProductReleasedDTO> {\n    private ReleaseVersionDTO releaseVersion;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ComponentReleasedDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\nimport com.ua.crow.plm.dto.base.ComponentDTO;\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class ComponentReleasedDTO extends ComponentDTO<BomReleasedDTO, ComponentPropertiesDTO,ComponentReleasedDTO> {\n    ReleaseVersionDTO releaseVersionDTO;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ProductReleasedDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport org.springframework.beans.BeanUtils;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class ProductReleasedDTO extends ProductDto<BomReleasedDTO> {\n    ReleaseVersionDTO releaseVersionDTO;\n\n    public ProductReleasedDTO(ProductDto base) {\n        try {\n            BeanUtils.copyProperties( base,this);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to copy properties from base entity\", e);\n        }\n\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ObtainPartNumberRequest.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ObtainPartNumberRequest {\n    FusionId bomId;\n\n    String partNumber;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/ComponentActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.ComponentDTO;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class ComponentActiveReleaseDto extends ComponentDTO<EngineeringBomWoChildren, CompPropertiesActiveReleaseDto, ComponentActiveReleaseDto> implements Convertable {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/ProductActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport lombok.*;\n\n\n@Getter\n@Setter\npublic class ProductActiveReleaseDto extends ProductDto<BomActiveReleaseDto> {\n\n//    public ProductActiveReleaseDto(ProductDto base) {\n//        try {\n//            BeanUtils.copyProperties( base,this);\n//        } catch (Exception e) {\n//            throw new RuntimeException(\"Failed to copy properties from base entity\", e);\n//        }\n//\n//    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/BomActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.EngineeringBomDTO;\nimport com.ua.crow.service.conversion.Optionalable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class BomActiveReleaseDto extends EngineeringBomDTO<ComponentActiveReleaseDto, ProductActiveReleaseDto> implements Optionalable<BomActiveReleaseDto> {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/EngineeringBomWoChildren.java =====\npackage com.ua.crow.plm.dto.active;\n\npublic class EngineeringBomWoChildren extends BomActiveReleaseDto{\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/CompPropertiesActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class CompPropertiesActiveReleaseDto extends ComponentPropertiesDTO<ComponentActiveReleaseDto> {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ProductDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.*;\n\nimport java.util.Set;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ProductDto<T extends EngineeringBomDTO> extends NamedBasicEntityWithNumericIdDto implements Convertable {\n        private Set<T> engineeringBoms;\n        private String thumbnailUrl;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ComponentDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class ComponentDTO<K extends EngineeringBomDTO, T extends ComponentPropertiesDTO, V extends ComponentDTO> extends PartDTO<T> {\n    private List<V> parts = new LinkedList<>();\n    private K parentBom;\n    private V parent;\n    private K childBom;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/BomItemPropertyDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\n\n@Data\npublic class BomItemPropertyDto<T extends ComponentDTO> extends NamedBasicEntityWithNumericIdDto {\n\n    private T item;\n\n    private String stringValue;\n\n    private Double numericValue;\n\n\n    BomItemPropertyTypeDto propertyType;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/BomItemPropertyTypeDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class BomItemPropertyTypeDto extends NamedBasicEntityWithNumericIdDto implements Convertable {\n\n    private UnitsDto units;\n\n    private BomItemPropertyTypeGroupDto group;\n\n    private DataTypes dataType;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/PartDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport lombok.Data;\nimport java.util.Set;\n\n@Data\npublic class PartDTO<T extends ComponentPropertiesDTO> extends NamedBasicEntityWithNumericIdDto {\n    private String itemType;\n    private Double quantity;\n    private String description;\n    private String partNumber;\n    private ResourceItemDTO resourceItem;\n    private Set<T> properties;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ComponentPropertiesDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\n\n@Data\npublic class ComponentPropertiesDTO<T extends ComponentDTO> extends NamedBasicEntityWithNumericIdDto {\n\n\n    private T item;\n\n    private String stringValue;\n\n    private Double numericValue;\n\n\n    BomItemPropertyTypeDto propertyType;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/EngineeringBomDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport java.util.Set;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class EngineeringBomDTO<T extends ComponentDTO, V extends ProductDto> extends NamedBasicEntityWithNumericIdDto {\n    private V product;\n    private String description;\n    private String partNumber;\n    private Set<T> children;\n\n    private String fusionVersion;\n    private String fusionId;\n    private boolean isLibraryItem;\n    private String fusionRevisionId;\n    private boolean isConfiguration;\n    private boolean isConfiguredDesign;\n    private boolean consistent;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ItemTypeNameMappingDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ItemTypeNameMappingDto extends NumericIdEntityDto implements Convertable {\n    private ItemTypes type;\n    private String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/BomItemPropertyTypeGroupDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class BomItemPropertyTypeGroupDto extends NamedBasicEntityWithNumericIdDto implements Convertable {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ComponentGroupDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter\n@Setter\npublic class ComponentGroupDto extends NamedBasicEntityWithNumericIdDto implements Convertable {\n    private ComponentGroupDto parent;\n    private List<ComponentGroupDto> children;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/FusionProjectListItem.java =====\npackage com.ua.crow.plm.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FusionProjectListItem {\n    boolean selected;\n    String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomEngineeringBom.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(FusionBomEngineeringBomId.class)\npublic class FusionBomEngineeringBom implements Optionalable<FusionBomEngineeringBom> {\n\n    @Id\n    String fusionBomId;\n    @Id\n    String fusionBomRevId;\n    @Id\n    Long bomId;\n    @Id\n    Long bomVer;\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"fusionBomId\",referencedColumnName = \"fusionId\", updatable = false,insertable = false),\n            @JoinColumn(name = \"fusionBomRevId\",referencedColumnName = \"revisionId\", updatable = false,insertable = false)})\n    private FusionBom fusionBom;\n\n    @ManyToOne\n    @JoinColumns({@JoinColumn(name = \"bomId\",referencedColumnName = \"id\", updatable = false,insertable = false),\n            @JoinColumn(name = \"bomVer\", referencedColumnName = \"release_ver\", updatable = false,insertable = false)})\n    private BomActiveRelease engineeringBom;\n\n    @CreatedBy\n    private String creator;\n    @LastModifiedBy\n    private String modifier;\n    @CreatedDate\n    private Date createdAt;\n    @LastModifiedDate\n    private Date modifiedAt;\n    private boolean deleted;\n    private String name;\n\n\n    public FusionBomEngineeringBom(FusionBom fusionBom, BomActiveRelease engineeringBom,String commitName) {\n        this.fusionBom = fusionBom;\n        this.engineeringBom = engineeringBom;\n        this.fusionBomId = fusionBom.getFusionId();\n        this.fusionBomRevId = fusionBom.getRevisionId();\n        this.bomId = engineeringBom.getId();\n        this.bomVer = engineeringBom.getRelease_ver();\n        setName(commitName);\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionComponentRel.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(FusionBomItemRelId.class)\n@Table(name = \"fusion_bom_item_rel\")\npublic class FusionComponentRel implements Convertable {\n    @Id\n    private String fusionParentId;\n    @Id\n    private String parentRevisionId;\n    @Id\n    private String fusionChildId;\n    @Id\n    private String childRevisionId;\n    @Id\n    private String bomId;\n    @Id\n    private String bomRevisionId;\n\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)\n    @JoinColumns(value = {@JoinColumn(name = \"bomId\",referencedColumnName = \"fusionId\",insertable = false,updatable = false)\n            ,@JoinColumn(name = \"bomRevisionId\",referencedColumnName = \"revisionId\",insertable = false,updatable = false)})\n    private FusionBom bom;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns(value = {@JoinColumn(name = \"fusionParentId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false)\n            ,@JoinColumn(name = \"parentRevisionId\",referencedColumnName = \"revisionId\",insertable = false,updatable = false)})\n    private FusionComponent parent;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns(value = {@JoinColumn(name = \"fusionChildId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false)\n            ,@JoinColumn(name = \"childRevisionId\",referencedColumnName = \"revisionId\",insertable = false,updatable = false)})\n    private FusionComponent child;\n\n    private Double quantity;\n\n    @Enumerated(EnumType.STRING)\n    private RelType relType;\n\n    public void setChild(FusionComponent child) {\n        this.childRevisionId  =child.getRevisionId();\n        this.fusionChildId = child.getFusionId();\n    }\n\n    public void setParent(FusionComponent parent) {\n        fusionParentId = parent.getFusionId();\n        parentRevisionId = parent.getRevisionId();\n    }\n\n    public void setBom(FusionBom bom) {\n        this.bomId = bom.getFusionId();\n        this.bomRevisionId = bom.getRevisionId();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionComponentRel that = (FusionComponentRel) o;\n\n        return new EqualsBuilder().append(getFusionParentId(), that.getFusionParentId()).append(getParentRevisionId(), that.getParentRevisionId()).append(getFusionChildId(), that.getFusionChildId()).append(getChildRevisionId(), that.getChildRevisionId()).append(getBomId(), that.getBomId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionParentId()).append(getParentRevisionId()).append(getFusionChildId()).append(getChildRevisionId()).append(getBomId()).toHashCode();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/Material.java =====\npackage com.ua.crow.plm.database.fusion;\n\n\nimport com.ua.crow.database.models.common.basic.NamedStringIdEntity;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class Material extends NamedStringIdEntity {\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionId.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FusionId implements Serializable {\n\n    @NotNull\n    @NotEmpty\n    @Valid\n    private String fusionId;\n\n    @NotNull\n    @NotEmpty\n    @Valid\n    private String revisionId;\n\n\n    @Validated\n    public static @Valid FusionId id(@NotBlank @NotNull String fusionId, @NotBlank @NotNull String revisionId) {\n        return new FusionId(fusionId,revisionId);\n    }\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionId fusionId1 = (FusionId) o;\n\n        return new EqualsBuilder().append(getFusionId(), fusionId1.getFusionId()).append(getRevisionId(), fusionId1.getRevisionId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionId()).append(getRevisionId()).toHashCode();\n    }\n\n    @Override\n    public String toString() {\n        return \"FusionId{\" +\n                \"fusionId='\" + fusionId + '\\'' +\n                \", revisionId='\" + revisionId + '\\'' +\n                '}';\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomRel.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(FusionBomRelId.class)\n@Table(name = \"fusion_bom_rel\")\npublic class FusionBomRel implements Optionalable<FusionBomRel> {\n\n    @Id\n    private String parentBomId;\n    @Id\n    private String parentBomRevisionId;\n    @Id\n    private String childBomId;\n    @Id\n    private String childBomRevisionId;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"parentBomId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false),\n            @JoinColumn(name = \"parentBomRevisionId\", referencedColumnName = \"revisionId\", insertable = false, updatable = false)\n    })\n    private FusionBom parentBom;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"childBomId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false),\n            @JoinColumn(name = \"childBomRevisionId\", referencedColumnName = \"revisionId\", insertable = false, updatable = false)\n    })\n    private FusionBom childBom;\n\n    private Double quantity;\n\n    @Enumerated(EnumType.STRING)\n    private RelType relType = RelType.PART_OF;\n\n    public void setParentBom(FusionBom bom) {\n        this.parentBomId = bom.getFusionId();\n        this.parentBomRevisionId = bom.getRevisionId();\n        this.parentBom = bom;\n    }\n\n    public void setChildBom(FusionBom bom) {\n        this.childBomId = bom.getFusionId();\n        this.childBomRevisionId = bom.getRevisionId();\n        this.childBom = bom;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FusionBomRel that = (FusionBomRel) o;\n        return new EqualsBuilder()\n                .append(parentBomId, that.parentBomId)\n                .append(parentBomRevisionId, that.parentBomRevisionId)\n                .append(childBomId, that.childBomId)\n                .append(childBomRevisionId, that.childBomRevisionId)\n                .isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17,37)\n                .append(parentBomId)\n                .append(parentBomRevisionId)\n                .append(childBomId)\n                .append(childBomRevisionId)\n                .toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/PhysicalPropertyId.java =====\npackage com.ua.crow.plm.database.fusion;\n\n\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class PhysicalPropertyId implements Serializable {\n\n    String bodyName;\n\n    String itemId;\n\n    String itemRevId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        PhysicalPropertyId that = (PhysicalPropertyId) o;\n\n        return new EqualsBuilder().append(getBodyName(), that.getBodyName()).append(getItemId(), that.getItemId()).append(getItemRevId(), that.getItemRevId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getBodyName()).append(getItemId()).append(getItemRevId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionComponent.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Setter\n@Getter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@Table( indexes = {@Index(name = \"idx_part_number\", columnList = \"partNumber, revisionId\", unique = true)})\n@IdClass(FusionId.class)\npublic class FusionComponent implements Convertable, Optionalable<FusionComponent> {\n\n    @Id\n    private String fusionId;\n    @Id\n    private String revisionId;\n\n    @Enumerated(EnumType.STRING)\n    private ItemTypes type;\n\n    private String partName;\n\n    private String partNumber;\n\n    private String description;\n\n    private String sourceFile;\n\n    private String path;\n\n\n    @OneToMany(mappedBy = \"component\",cascade = CascadeType.ALL,fetch = FetchType.LAZY)\n    private Set<FusionPhysicalProperty> physicalProperties = new HashSet<>();\n\n    boolean root = false;\n\n    private String tenantId;\n\n    private boolean deleted;\n\n    @CreatedBy\n    private String creator = null;\n\n    @LastModifiedBy\n    private String modifier = null;\n\n    @CreatedDate\n    private Date createdAt = null;\n\n    @LastModifiedDate\n    private Date modifiedAt = null;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBom.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(FusionId.class)\npublic class FusionBom  implements Convertable, Optionalable<FusionBom> {\n\n    @Id\n    private String fusionId;\n    @Id\n    private String revisionId;\n\n    @ManyToOne\n    @JoinColumns({@JoinColumn(name = \"product_id\",referencedColumnName = \"id\"),\n            @JoinColumn(name = \"release_ver\",referencedColumnName = \"release_ver\")})\n    private ProductActiveRelease product;\n\n    @ManyToOne(fetch = FetchType.LAZY ,cascade = CascadeType.ALL)\n    @JoinColumns(value = {@JoinColumn(name = \"root_id\",referencedColumnName = \"fusionId\"),\n            @JoinColumn(name = \"rootRevId\",referencedColumnName = \"revisionId\")})\n    private FusionComponent root;\n\n    private String partNumber;\n    private String description;\n    private boolean processed;\n    @Column(name = \"effective_bom_id\")\n    private Long engineeringBomId;\n    private String documentName;\n    private String name;\n    private String version;\n    private boolean isLibraryItem;\n    private boolean isConfiguration;\n    private boolean isConfiguredDesign;\n    private boolean consistent;\n    private String tenantId;\n    private boolean deleted;\n\n    @CreatedBy\n    private String creator = null;\n    @LastModifiedBy\n    private String modifier = null;\n    @CreatedDate\n    private Date createdAt = null;\n    @LastModifiedDate\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomItemRelId.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FusionBomItemRelId implements Serializable {\n    private String fusionParentId;\n    private String parentRevisionId;\n    private String fusionChildId;\n    private String childRevisionId;\n    private String bomId;\n    private String bomRevisionId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionBomItemRelId that = (FusionBomItemRelId) o;\n\n        return new EqualsBuilder().append(getFusionParentId(), that.getFusionParentId()).append(getParentRevisionId(), that.getParentRevisionId()).append(getFusionChildId(), that.getFusionChildId()).append(getChildRevisionId(), that.getChildRevisionId()).append(getBomId(), that.getBomId()).append(getBomRevisionId(), that.getBomRevisionId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionParentId()).append(getParentRevisionId()).append(getFusionChildId()).append(getChildRevisionId()).append(getBomId()).append(getBomRevisionId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomRelId.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FusionBomRelId implements Serializable {\n    private String parentBomId;\n    private String parentBomRevisionId;\n    private String childBomId;\n    private String childBomRevisionId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FusionBomRelId that = (FusionBomRelId) o;\n        return new EqualsBuilder()\n                .append(parentBomId, that.parentBomId)\n                .append(parentBomRevisionId, that.parentBomRevisionId)\n                .append(childBomId, that.childBomId)\n                .append(childBomRevisionId, that.childBomRevisionId)\n                .isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17,37)\n                .append(parentBomId)\n                .append(parentBomRevisionId)\n                .append(childBomId)\n                .append(childBomRevisionId)\n                .toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomEngineeringBomId.java =====\npackage com.ua.crow.plm.database.fusion;\n\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n\n@Getter\n@Setter\n@NoArgsConstructor\npublic class FusionBomEngineeringBomId implements Serializable {\n    String fusionBomId;\n    String fusionBomRevId;\n    Long bomId;\n    Long bomVer;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionBomEngineeringBomId that = (FusionBomEngineeringBomId) o;\n\n        return new EqualsBuilder().append(getFusionBomId(), that.getFusionBomId()).append(getFusionBomRevId(), that.getFusionBomRevId()).append(getBomId(), that.getBomId()).append(getBomVer(), that.getBomVer()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionBomId()).append(getFusionBomRevId()).append(getBomId()).append(getBomVer()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionPhysicalProperty.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@IdClass(PhysicalPropertyId.class)\n@Getter\n@Setter\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\npublic class FusionPhysicalProperty implements Convertable, Optionalable<FusionPhysicalProperty> {\n\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    @JoinColumns(value =\n            {@JoinColumn(name = \"itemId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false),\n                    @JoinColumn(name = \"itemRevId\", referencedColumnName = \"revisionId\", insertable = false, updatable = false)})\n    FusionComponent component;\n\n    public void setComponent(@NotNull FusionComponent component) {\n        this.component = component;\n        itemId = component.getFusionId();\n        itemRevId = component.getRevisionId();\n    }\n\n    @Id\n    @EqualsAndHashCode.Include\n    String itemId;\n\n    @Id\n    @EqualsAndHashCode.Include\n    String itemRevId;\n\n    @Id\n    @EqualsAndHashCode.Include\n    String bodyName;\n\n    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\n    @JoinColumn(name = \"material\")\n    Material material;\n\n    private Double widthMm;\n\n    private Double lengthMm;\n\n    private Double heightMm;\n\n    private Double volumeCm3;\n\n    private Double areaCm2;\n\n    private Double massKg;\n\n    private Double densityKgCm2;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/RelType.java =====\npackage com.ua.crow.plm.database.fusion;\n\npublic enum RelType {\n    PART_OF,\n    COPY_OF\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/PartNumberPool.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\npublic class PartNumberPool extends NumericIdEntity {\n    Date issueDate;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/PartNumberReferenceType.java =====\npackage com.ua.crow.plm.database;\n\npublic enum PartNumberReferenceType {\n    FUSION_PART,\n    ACTIVE_RELEASE_COMPONENT,\n\n    POOL, EFFECTIVE_BOM, FUSION_BOM, NEW\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/Part.java =====\npackage com.ua.crow.plm.database;\n\npublic class Part {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ComponentGroup.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.AbstractResourceGroup;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Set;\n\n@Getter\n@Setter\n@Entity\npublic class ComponentGroup extends AbstractResourceGroup<ComponentGroup> implements Convertable {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/PartNumberReference.java =====\npackage com.ua.crow.plm.database;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class PartNumberReference {\n    String partNumber;\n    PartNumberReferenceType referenceType;\n    String partName;\n    String description;\n    Long productId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/BomReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.EngineeringBom;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class BomReleased extends EngineeringBom<ComponentReleased, ProductReleased> implements Releasable {\n\n\n    @Id\n    Long release_ver;\n\n\n    @ManyToOne\n    @JoinColumn(name = \"release_ver\", referencedColumnName = \"id\", insertable = false,updatable = false)\n    ReleaseVersion releaseVersion;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/ProductReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.ProductBase;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ProductReleased extends ProductBase<BomReleased>\n        implements Releasable {\n\n    @Id\n    Long release_ver;\n\n    @ManyToOne\n    @JoinColumn(name = \"release_ver\",referencedColumnName = \"id\", updatable = false, insertable = false)\n    ReleaseVersion releaseVersion;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/CompPropertiesReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.ComponentProperties;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class CompPropertiesReleased extends ComponentProperties<ComponentReleased> implements Releasable {\n    @Id\n    Long release_ver;\n\n    @OneToOne\n    @JoinColumn(name = \"release_ver\",insertable = false,updatable = false)\n    ReleaseVersion releaseVersion;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/ReleasableId.java =====\npackage com.ua.crow.plm.database.released;\n\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ReleasableId implements Serializable {\n\n    private Long id;\n\n    private Long release_ver;\n\n    public static ReleasableId releasableId(Long productId){\n        return new ReleasableId(productId,0L);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ReleasableId that = (ReleasableId) o;\n\n        return new EqualsBuilder().append(getId(), that.getId()).append(getRelease_ver(), that.getRelease_ver()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getId()).append(getRelease_ver()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/ComponentReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ComponentReleased extends com.ua.crow.plm.database.base.Part<CompPropertiesReleased> implements Releasable {\n\n    @Id\n    private Long release_ver;\n\n    @OneToMany(mappedBy = \"parents\", cascade = CascadeType.ALL,fetch = FetchType.LAZY)\n    Set<ComponentReleased> parts = new HashSet<>();\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({@JoinColumn(name = \"bom_id\"),@JoinColumn(name = \"parent_bom_release_ver\")})\n    BomReleased parentBom;\n\n    @ManyToMany(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinTable(name = \"component_rel_item_relationship\",\n            joinColumns = {@JoinColumn(name = \"parent_id\"),@JoinColumn(name=\"parent_release_ver\")},\n            inverseJoinColumns = {@JoinColumn(name = \"child_id\"),@JoinColumn(name=\"child_release_ver\")})\n    Set<ComponentReleased> parents = new HashSet<>();\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = \"child_bom_id\"),@JoinColumn(name = \"child_bom_release_ver\")})\n    BomReleased childBom;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumn(name = \"group_id\")\n    ComponentGroup componentGroup;\n\n    public void addChild(ComponentReleased comp){\n        parts.add(comp);\n    }\n\n    public void addParent(ComponentReleased parent) {\n        parents.add(parent);\n    }\n\n    @OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    Set<CompPropertiesReleased> properties = new HashSet<>();\n\n    public void addProperty(CompPropertiesReleased p) {\n        properties.add(p);\n    }\n    @OneToOne\n    @JoinColumn(name = \"release_ver\")\n    ReleaseVersion releaseVersion;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ReleaseVersion.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class ReleaseVersion extends NamedBasicEntityWithNumericId {\n\n    private boolean released;\n\n    private Date releaseDate;\n\n    private String description;\n\n    @ManyToOne\n    @JoinColumn(name = \"prev_ver_id\")\n    private ReleaseVersion previous;\n\n    private Double ver;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/BomItemPropertyTypeGroup.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class BomItemPropertyTypeGroup extends NamedBasicEntityWithNumericId implements Convertable {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ItemTypes.java =====\npackage com.ua.crow.plm.database;\n\npublic enum ItemTypes {\n    COMPONENT,\n    PART,\n    BOM,\n    FASTENER,\n    THRDPARTY,\n    NONE\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ItemTypeNameMapping.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class ItemTypeNameMapping extends NumericIdEntity implements Convertable {\n\n    @Enumerated(EnumType.STRING)\n    @Column(nullable = false)\n    private ItemTypes type;\n\n    @Column(nullable = false)\n    private String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/WithdrawAlgorythm.java =====\npackage com.ua.crow.plm.database;\n\npublic enum WithdrawAlgorythm {\n    AMOUNT,\n    LENGHT,\n    SQUARE,\n    WEIGHT,\n    VOLUME\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/BomComponentRelId.java =====\npackage com.ua.crow.plm.database.active;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class BomComponentRelId implements Serializable {\n\n    private Long parentBomId;\n    private Long parentBomReleaseVer;\n    private Long childId;\n    private Long childReleaseVer;\n    private Long completeSetId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentRel.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.BaseRel;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(ComponentPartRelationshipId.class)\n@Table(name = \"component_part_relationship\")\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\npublic class ComponentRel extends BaseRel implements Convertable {\n\n    @Id\n\n    private Long parentId;\n\n    @Id\n\n    private Long parentReleaseVer;\n\n    @Id\n\n    private Long bomId;\n\n    @Id\n\n    private Long bomVersion;\n\n\n    @Id\n\n    private Long completeSetId;\n\n\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"bomId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n            @JoinColumn(name = \"bomVersion\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private BomActiveRelease bom;\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"completeSetId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n    })\n    private CompleteSet completeSet;\n\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"parentId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n            @JoinColumn(name = \"parentReleaseVer\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private ComponentActiveRelease parent;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ComponentRel that = (ComponentRel) o;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(getParentId(), that.getParentId()).append(getParentReleaseVer(), that.getParentReleaseVer()).append(getBomId(), that.getBomId()).append(getBomVersion(), that.getBomVersion()).append(getCompleteSetId(), that.getCompleteSetId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(getParentId()).append(getParentReleaseVer()).append(getBomId()).append(getBomVersion()).append(getCompleteSetId()).toHashCode();\n    }\n\n\n    // Constructors, getters, and setters are handled by Lombok\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentActiveRelease.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.*;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ComponentActiveRelease extends com.ua.crow.plm.database.base.Part<ComponentProperty>\n        implements Convertable {\n    @Id\n    private Long release_ver = 0L;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({@JoinColumn(name = \"bom_id\"),@JoinColumn(name = \"parent_bom_release_ver\")})\n    private BomActiveRelease parentBom;\n\n    @OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Set<ComponentRel> parts = new HashSet<>();\n\n    @OneToMany(mappedBy = \"child\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Set<ComponentRel> parents = new HashSet<>();\n\n    private boolean root;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = \"child_bom_id\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"child_bom_release_ver\",referencedColumnName = \"release_ver\")})\n    private BomActiveRelease childBom;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumn(name = \"group_id\")\n    private ComponentGroup componentGroup;\n\n    @OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    Set<ComponentProperty> properties = new HashSet<>();\n\n    public void addProperty(ComponentProperty p) {\n        properties.add(p);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ComponentActiveRelease that = (ComponentActiveRelease) o;\n\n        if(that.getId()==null && this.getId()==null||that.getId()==0&&this.getId()==0) return false;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(release_ver, that.release_ver).append(this.getId(),that.getId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(release_ver).append(this.getId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/CompleteSet.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class CompleteSet extends NamedBasicEntityWithNumericId {\n    @ManyToOne\n    ProductActiveRelease product;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentProperty.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.base.ComponentProperties;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EntityListeners;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.IdClass;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ComponentProperty extends ComponentProperties<ComponentActiveRelease> implements Convertable {\n\n    @Id\n    private Long release_ver = 0L;\n\n    public ComponentProperty(String stringValue, ComponentActiveRelease item, BomItemPropertyType propertyType) {\n        super(stringValue, item, propertyType);\n    }\n\n    public ComponentProperty(Double numericValue, ComponentActiveRelease item, BomItemPropertyType propertyType) {\n        super(numericValue, item, propertyType);\n    }\n\n    public ComponentProperty() {\n    }\n\n    public ComponentProperty(Double numericValue, ComponentActiveRelease item, BomItemPropertyType propertyType, String bodyName) {\n        super(numericValue, item,propertyType,bodyName);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ProductActiveRelease.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.ProductBase;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\n@Table(uniqueConstraints = { @UniqueConstraint(columnNames = {\"name\"}) })\npublic class ProductActiveRelease extends ProductBase<BomActiveRelease> implements Convertable {\n\n    public ProductActiveRelease() {\n        super();\n        super.setRelease_ver(0L);\n    }\n\n    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @JoinColumn(name = \"default_complete_set\",referencedColumnName = \"id\")\n    private CompleteSet defaultCompleteSet;\n\n    @OneToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY,mappedBy = \"product\", orphanRemoval = true)\n    Set<CompleteSet> completeSets = new HashSet<>();\n\n    @Override\n    public void setRelease_ver(Long releaseVer) {\n        throw new UnsupportedOperationException(\"Release version cannot be set for active product release. It is always 0.\");\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/BomComponentRel.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.BaseRel;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(BomComponentRelId.class)\n\npublic class BomComponentRel extends BaseRel implements Convertable, Optionalable<BomComponentRel> {\n\n    @Id\n    private Long parentBomId;\n\n    @Id\n    private Long parentBomReleaseVer;\n\n    @Id\n    private Long completeSetId;\n\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n        @JoinColumn(name = \"parentBomId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n        @JoinColumn(name = \"parentBomReleaseVer\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private BomActiveRelease parentBom;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({@JoinColumn(name = \"completeSetId\", referencedColumnName = \"id\", insertable = false, updatable = false)})\n    private CompleteSet completeSet;\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        BomComponentRel that = (BomComponentRel) o;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(getParentBomId(), that.getParentBomId()).append(getParentBomReleaseVer(), that.getParentBomReleaseVer()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(getParentBomId()).append(getParentBomReleaseVer()).toHashCode();\n    }\n\n\n\n    // Constructors, getters, and setters are handled by Lombok\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/BomActiveRelease.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.EngineeringBom;\nimport com.ua.crow.plm.database.fusion.FusionBomEngineeringBom;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class BomActiveRelease extends EngineeringBom<ComponentActiveRelease,ProductActiveRelease> implements Convertable {\n    @Id\n    private Long release_ver = 0L;\n\n    @OneToMany(mappedBy = \"engineeringBom\", cascade = CascadeType.ALL, orphanRemoval = true)\n    private Set<FusionBomEngineeringBom> fusionBoms = new HashSet<>();\n\n    @OneToMany(mappedBy = \"parentBom\", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n    private Set<BomComponentRel> children = new HashSet<>();\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        BomActiveRelease that = (BomActiveRelease) o;\n\n        if(that.getId()==0&&this.getId()==0||that.getId()==null && this.getId()==null) return false;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(release_ver, that.release_ver).append(this.getId(),that.getId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(release_ver).append(this.getId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentPartRelationshipId.java =====\npackage com.ua.crow.plm.database.active;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.NoArgsConstructor;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ComponentPartRelationshipId implements Serializable {\n\n    private Long parentId;\n    private Long parentReleaseVer;\n    private Long childId;\n    private Long childReleaseVer;\n    private Long bomId;\n    private Long bomVersion;\n    private Long completeSetId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ComponentPartRelationshipId that = (ComponentPartRelationshipId) o;\n\n        return new EqualsBuilder().append(getParentId(), that.getParentId()).append(getParentReleaseVer(), that.getParentReleaseVer()).append(getChildId(), that.getChildId()).append(getChildReleaseVer(), that.getChildReleaseVer()).append(getBomId(), that.getBomId()).append(getBomVersion(), that.getBomVersion()).append(getCompleteSetId(), that.getCompleteSetId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getParentId()).append(getParentReleaseVer()).append(getChildId()).append(getChildReleaseVer()).append(getBomId()).append(getBomVersion()).append(getCompleteSetId()).toHashCode();\n    }\n\n\n    // Constructors, getters, setters, equals, and hashCode methods\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/BomItemPropertyType.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class BomItemPropertyType extends NamedBasicEntityWithNumericId implements Convertable {\n\n    @ManyToOne\n    @JoinColumn(name = \"unit_id\")\n    private Units units;\n\n    @ManyToOne\n    @JoinColumn(name = \"group_id\")\n    private BomItemPropertyTypeGroup group;\n\n    @Enumerated(EnumType.STRING)\n    private DataTypes dataType;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionBomRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n\npublic interface FusionBomRepository extends JpaRepository<FusionBom, FusionId> {\n    @Query(\"select t from FusionBom t where t.product.id = ?1 and t.product.release_ver = ?2 and t.deleted = false\")\n    List<FusionBom> findByProductId(Long id, Long release_ver);\n    @Query(\"\"\"\n    select t from FusionBom t\n    where t.product.id = :productId\n      and t.product.release_ver = :releaseVersion\n      and t.deleted = false\n      and t.consistent = true\n\"\"\")\n    List<FusionBom> findByProductIdAndReleaseVerConsistentNotDeleted(\n            @Param(\"productId\") Long productId,\n            @Param(\"releaseVersion\") Long releaseVersion);\n    @Query(\"select t from FusionBom t where t.product.id = ?1 and t.product.release_ver = ?2 and t.deleted = false\")\n    Stream<FusionBom> findByProductId(Long id, Long release_ver, Pageable pageable);\n    Stream<FusionBom> findByPartNumber(String partNumber);\n\n    @Query(\"select t from FusionBom t where t.deleted = false and t.consistent= true\")\n    Stream<FusionBom> findNotDeleted();\n\n    Optional<FusionBom> findByFusionId(String fusionId);\n    @Query(\"select t from FusionBom t where t.product.id = :productId and t.product.release_ver = :releaseVer and t.deleted = false and t.consistent = true and t.engineeringBomId is null\")\n    List<FusionBom> findUnprocessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"select t from FusionBom t where t.product.id = :productId and t.product.release_ver = :releaseVer and t.deleted = false and t.consistent = true and t.engineeringBomId is not null\")\n    List<FusionBom> findProcessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.product.id = :productId\n              and b.product.release_ver = :releaseVer\n              and b.deleted = false\n              and b.consistent = true\n              and b.engineeringBomId is null\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    List<FusionBom> findRootUnprocessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.product.id = :productId\n              and b.product.release_ver = :releaseVer\n              and b.deleted = false\n              and b.consistent = true\n              and b.engineeringBomId is not null\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    List<FusionBom> findRootProcessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.product.id = :productId\n              and b.product.release_ver = :releaseVer\n              and b.deleted = false\n              and b.consistent = true\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    List<FusionBom> findRootByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.deleted = false\n              and b.consistent = true\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    Stream<FusionBom> findRootNotDeleted();\n\n    @Query(\"select b from FusionBom b where b.root.fusionId = :rootId and b.root.revisionId = :rootRev\")\n    Optional<FusionBom> findByRoot(@Param(\"rootId\") String rootId,@Param(\"rootRev\") String rootRev);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ActiveReleaseProductRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface ActiveReleaseProductRepository extends JpaRepository<ProductActiveRelease, ReleasableId> {\n    List<ProductActiveRelease> findByDeletedFalse();\n\n    Optional<ProductActiveRelease> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ItemTypeNameMappingRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport org.springframework.data.repository.CrudRepository;\nimport java.util.Optional;\n\npublic interface ItemTypeNameMappingRepository extends CrudRepository<ItemTypeNameMapping, Long> {\n    Optional<ItemTypeNameMapping> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/EngineeringBomItemPropertyTypeRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface EngineeringBomItemPropertyTypeRepository extends JpaRepository<BomItemPropertyType, Long> {\n    Optional<BomItemPropertyType> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/MaterialRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.Material;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface MaterialRepository extends JpaRepository<Material,String> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ReleasedProductRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.released.ProductReleased;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface ReleasedProductRepository extends JpaRepository<ProductReleased, ReleasableId> {\n    List<ProductActiveRelease> findByDeleted(boolean deleated);\n    @Query(\"select t from ProductReleased t where t.id = ?1 AND t.releaseVersion.deleted = ?2 AND t.deleted = ?2 \")\n    List<ProductReleased> findAllProductReleases(Long id, boolean deleted);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionComponentRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface FusionComponentRepository extends JpaRepository<FusionComponent, FusionId> {\n\n    @Query(\"select t from FusionComponent t where  t.id = ?1 and root=true\")\n    Optional<FusionComponent> getRootById(Long id);\n\n    @Query(\"SELECT f.child FROM FusionComponentRel f WHERE f.parent.id = :parentId AND f.bom.id = :bomId\")\n    Stream<FusionComponent> findChildrenForBom(@Param(\"parentId\") Long parentId, @Param(\"bomId\") Long bomId);\n\n\n    Optional<FusionComponent> findByPartNumberAndRevisionId(String partNumber, String revisionId);\n\n\n    Stream<FusionComponent> findByPartNumber(String partNumber);\n\n    @Query(\"SELECT f FROM FusionComponent f WHERE f.partNumber = :partNumber order by createdAt DESC limit 1\")\n    Optional<FusionComponent> findLastByPartNumber(String partNumber);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionBomRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.FusionBomRel;\nimport com.ua.crow.plm.database.fusion.FusionBomRelId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface FusionBomRelRepository extends JpaRepository<FusionBomRel, FusionBomRelId> {\n    @Query(\"\"\"\n            SELECT r\n            FROM FusionBomRel r\n            WHERE r.parentBomId = :parentId\n              AND r.parentBomRevisionId = :parentRev\n              AND r.childBomId = :childId\n              AND r.childBomRevisionId = :childRev\n              AND r.relType = com.ua.crow.plm.database.fusion.RelType.PART_OF\n            \"\"\")\n    Optional<FusionBomRel> findRelation(@Param(\"parentId\") String parentId,\n                                        @Param(\"parentRev\") String parentRev,\n                                        @Param(\"childId\") String childId,\n                                        @Param(\"childRev\") String childRev);\n\n    @Query(\"\"\"\n            SELECT r\n            FROM FusionBomRel r\n            WHERE r.parentBomId = :parentId\n              AND r.parentBomRevisionId = :parentRev\n              AND r.relType = com.ua.crow.plm.database.fusion.RelType.PART_OF\n            \"\"\")\n    java.util.List<FusionBomRel> findChildren(@Param(\"parentId\") String parentId,\n                                              @Param(\"parentRev\") String parentRev);\n\n    @Query(\"\"\"\n            SELECT r\n            FROM FusionBomRel r\n            WHERE r.childBomId = :childId\n              AND r.childBomRevisionId = :childRev\n              AND r.relType = com.ua.crow.plm.database.fusion.RelType.PART_OF\n            \"\"\")\n    java.util.List<FusionBomRel> findParents(@Param(\"childId\") String childId,\n                                             @Param(\"childRev\") String childRev);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/EngineeringBomRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface EngineeringBomRepository extends JpaRepository<BomActiveRelease, ReleasableId> {\n\n    Stream<BomActiveRelease> findByPartNumber(String partNumber);\n\n    @Query(\"select t from BomActiveRelease t \" +\n            \"join ProductActiveRelease p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false and t.isRoot = true\")\n    List<BomActiveRelease> findRootBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomActiveRelease t \" +\n            \"join ProductActiveRelease p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    List<BomActiveRelease> findBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomActiveRelease t \" +\n            \"join ProductActiveRelease p on p.id = t.parentProduct.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    Stream<BomActiveRelease> findRootBomsByProductId(Long productId, Long releaseVer);\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomReleasedRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.released.BomReleased;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface BomReleasedRepository extends JpaRepository<BomReleased, ReleasableId> {\n\n    @Query(\"select t from BomReleased t \" +\n            \"join ProductReleased p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false and t.isRoot = true\")\n    List<BomReleased> findRootBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomReleased t \" +\n            \"join ProductReleased p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    List<BomReleased> findBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomReleased t \" +\n            \"join ProductReleased p on p.id = t.parentProduct.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    Stream<BomReleased> findRootBomsByProductId(Long productId, Long releaseVer);\n\n    @Query(\"select t from BomReleased t where t.id = ?1 and t.releaseVersion.deleted = ?2 and t.deleted = ?2\")\n    List<BomReleased> findAllBomReleases(Long bomId, boolean deleted);\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/PartNumberPoolRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.PartNumberPool;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface PartNumberPoolRepository extends JpaRepository<PartNumberPool,Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/CompleteSetRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.CompleteSet;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CompleteSetRepository extends JpaRepository<CompleteSet,Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/EngineeringBomItemPropertyTypeGroupRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface EngineeringBomItemPropertyTypeGroupRepository extends JpaRepository<BomItemPropertyTypeGroup, Long> {\n    Optional<BomItemPropertyTypeGroup> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionComponentRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.FusionComponentRel;\nimport com.ua.crow.plm.database.fusion.RelType;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.stream.Stream;\n\n@Repository\npublic interface FusionComponentRelRepository extends JpaRepository<FusionComponentRel, Long> {\n    @Query(\"\"\"\n            SELECT f\n            FROM FusionComponentRel f\n            WHERE f.parent.fusionId = :parentId\n              AND f.parent.revisionId = :revisionId\n              AND f.bom.fusionId = :bomId\n              AND f.bom.revisionId = :bomRevId\n              AND f.relType IS NULL\n            \"\"\")\n    Stream<FusionComponentRel> findChildrenForBom(@Param(\"parentId\") String parentId,@Param(\"revisionId\") String revisionId, @Param(\"bomId\") String bomId,@Param(\"bomRevId\") String bomRevId);\n\n    @Query(\"SELECT f FROM FusionComponentRel f \" +\n            \"WHERE f.parent.fusionId = :parentId \" +\n            \"AND f.parent.revisionId = :revisionId \" +\n            \"AND f.bom.fusionId = :bomId \" +\n            \"AND f.bom.revisionId = :bomRevId \" +\n            \"AND f.relType IN (:relTypes)\")\n    Stream<FusionComponentRel> findChildrenForBomWithRelTypes(\n            @Param(\"parentId\") String parentId,\n            @Param(\"revisionId\") String revisionId,\n            @Param(\"bomId\") String bomId,\n            @Param(\"bomRevId\") String bomRevId,\n            @Param(\"relTypes\") RelType... relTypes\n    );\n\n    @Modifying\n    @Query(\"DELETE FROM FusionComponentRel f WHERE f.bomId = :id AND f.bomRevisionId = :revisionId\")\n    void hardDeleteBomRelations(String id,String revisionId);\n\n    @Query(\"\"\"\n            SELECT f\n            FROM FusionComponentRel f\n            WHERE f.fusionChildId = :childId\n              AND f.childRevisionId = :childRev\n              AND f.relType IS NULL\n            \"\"\")\n    Stream<FusionComponentRel> findByChild(@Param(\"childId\") String childId,@Param(\"childRev\") String childRev);\n\n    @Query(\"\"\"\n            SELECT f\n            FROM FusionComponentRel f\n            WHERE f.fusionParentId = :parentId\n              AND f.parentRevisionId = :parentRev\n              AND f.relType IS NULL\n            \"\"\")\n    Stream<FusionComponentRel> findByParent(@Param(\"parentId\") String parentId,\n                                            @Param(\"parentRev\") String parentRev);\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ReleaseVersionRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface ReleaseVersionRepository extends JpaRepository<ReleaseVersion, ReleasableId> {\n\n    List<ReleaseVersion> findByDeleted(boolean deleted);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface ComponentRepository extends JpaRepository<ComponentActiveRelease, ReleasableId> {\n    Stream<ComponentActiveRelease> findByPartNumber(String partNumber);\n\n    @Query(\"select t from ComponentActiveRelease t where t.parentBom.id = ?2 and t.partNumber = ?1 and t.deleted = false\")\n    Optional<ComponentActiveRelease> findByPartNumberAndBomId(String partNumber, Long id);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomItemPropertyTypeGroupRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BomItemPropertyTypeGroupRepository extends JpaRepository<BomItemPropertyTypeGroup, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentGroupRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ComponentGroupRepository extends JpaRepository<ComponentGroup, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentReleasedRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.released.ComponentReleased;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface ComponentReleasedRepository extends JpaRepository<ComponentReleased, ReleasableId> {\n\n    @Query(\"select c from ComponentReleased c where c.parentBom.id = :bomId and c.parentBom.release_ver = :release\")\n    List<ComponentReleased> findByParentBom(@Param(\"bomId\") Long bomId, @Param(\"release\") Long release);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomItemPropertyTypeRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BomItemPropertyTypeRepository extends JpaRepository<BomItemPropertyType, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.database.active.BomComponentRelId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BomRelRepository extends JpaRepository<BomComponentRel, BomComponentRelId> {\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentPropertiesRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface ComponentPropertiesRepository extends JpaRepository<ComponentProperty, ReleasableId> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ComponentPartRelationshipId;\nimport com.ua.crow.plm.database.active.ComponentRel;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ComponentRelRepository extends JpaRepository<ComponentRel, ComponentPartRelationshipId> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/Part.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.database.ItemTypes;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotBlank;\nimport lombok.Getter;\nimport lombok.Setter;\n\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class Part<T extends ComponentProperties> extends NamedBasicEntityWithNumericId {\n\n\n    //Generic fields\n    @Enumerated(EnumType.STRING)\n    ItemTypes itemType;\n\n\n\n    private String description;\n\n\n    @NotBlank(message = \"Part number is missing\")\n    private String partNumber;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumn(name = \"resource_item_id\", referencedColumnName = \"id\")\n    private ResourceItem resourceItem;\n\n    //If PART or 3RDPARTY\n\n\n    private String fusionId;\n\n    private String fusionRevisionId;\n\n    private String fusionPath;\n\n \n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/Releasable.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\n\npublic interface Releasable {\n\n        ReleaseVersion getReleaseVersion();\n\n        void setReleaseVersion(ReleaseVersion releaseVersion);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/ProductBase.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.service.product.ProductAttachmentService;\nimport com.ua.crow.plm.service.product.ProductAttachmentServiceProvider;\nimport com.ua.crow.util.SpringContext;\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.util.Set;\n\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@With\n@MappedSuperclass\npublic class ProductBase<T extends EngineeringBom> extends NamedBasicEntityWithNumericId {\n\n    @Id\n    Long release_ver;\n\n    @OneToMany(mappedBy = \"product\",cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set<T> engineeringBoms;\n\n    @Transient\n    private ProductAttachmentService attachmentService;\n\n    public ProductAttachmentService getAttachmentService() {\n        if (attachmentService == null) {\n            attachmentService = SpringContext.getBean(ProductAttachmentServiceProvider.class).create(this);\n        }\n        return attachmentService;\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/ComponentProperties.java =====\npackage com.ua.crow.plm.database.base;\n\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class ComponentProperties<T extends Part> extends BasicEntityWithNumericId  {\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({ @JoinColumn(name = \"component_id\",referencedColumnName = \"id\"),@JoinColumn(name = \"comp_release_ver\",referencedColumnName = \"release_ver\")})\n    private T item;\n\n    private String stringValue;\n\n    private Double numericValue;\n\n    private String solidBodyName;\n\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)\n    @JoinColumn(name = \"type_id\")\n    BomItemPropertyType propertyType;\n\n    public ComponentProperties( String stringValue,T item, BomItemPropertyType propertyType,String solidBodyName) {\n        this.item = item;\n        this.stringValue = stringValue;\n        this.solidBodyName = solidBodyName;\n        this.propertyType = propertyType;\n    }\n\n    public ComponentProperties( Double numericValue,T item, BomItemPropertyType propertyType, String solidBodyName) {\n        this.item = item;\n        this.numericValue = numericValue;\n        this.solidBodyName = solidBodyName;\n        this.propertyType = propertyType;\n    }\n\n    public ComponentProperties(String stringValue, T item, BomItemPropertyType propertyType) {\n        this.item = item;\n        this.stringValue = stringValue;\n        this.propertyType = propertyType;\n    }\n\n\n    public ComponentProperties(Double numericValue, T item, BomItemPropertyType propertyType) {\n        this.item = item;\n        this.numericValue = numericValue;\n        this.propertyType = propertyType;\n    }\n\n    public ComponentProperties() {\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/EngineeringBom.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@MappedSuperclass\n@Getter\n@Setter\npublic class EngineeringBom<T extends Part,V extends ProductBase>  extends NamedBasicEntityWithNumericId {\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"product\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"product_release_ver\",referencedColumnName = \"release_ver\")})\n    private V product;\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"parent_product\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"parent_product_release_ver\",referencedColumnName = \"release_ver\")})\n    private V parentProduct;\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"parent_comp\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"parent_component_release_ver\",referencedColumnName = \"release_ver\")})\n    private T parentComponent;\n\n    private String description;\n    private String partNumber;\n    private String fusionVersion;\n    private String fusionId;\n    private boolean isLibraryItem;\n    private String fusionRevisionId;\n    private boolean isConfiguration;\n    private boolean isConfiguredDesign;\n    private boolean consistent;\n    private boolean isRoot;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/BaseRel.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class BaseRel {\n    private Double quantity;\n    @Id\n    private Long childId;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = \"childId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n            @JoinColumn(name = \"childReleaseVer\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private ComponentActiveRelease child;\n\n\n    private Long childReleaseVer;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        BaseRel baseRel = (BaseRel) o;\n\n        return new EqualsBuilder().append(getChildId(), baseRel.getChildId()).append(getChildReleaseVer(), baseRel.getChildReleaseVer()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getChildId()).append(getChildReleaseVer()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionBomItemToPartNumReference.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomItemToPartNumReference implements Converter<FusionComponent,PartNumberReference> {\n\n    @Override\n    public PartNumberReference convert(FusionComponent item) {\n        PartNumberReference partNumberReference = new PartNumberReference();\n        partNumberReference.setReferenceType(PartNumberReferenceType.FUSION_PART);\n        partNumberReference.setPartName(item.getPartName());\n        partNumberReference.setPartNumber(item.getPartNumber());\n        partNumberReference.setDescription(item.getDescription());\n        return partNumberReference;    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionBomItemToBomActiveRelease.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomItemToBomActiveRelease implements Converter<FusionComponent, BomActiveRelease> {\n\n    @Override\n    public BomActiveRelease convert(FusionComponent source) {\n        BomActiveRelease bom = new BomActiveRelease();\n        bom.setRelease_ver(0L);\n        bom.setDescription(source.getDescription());\n        bom.setPartNumber(bom.getPartNumber());\n        bom.setName(source.getPartName());\n        bom.setFusionId(source.getFusionId());\n        bom.setFusionRevisionId(source.getRevisionId());\n        return bom;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionCompToDtoFlat.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.converters.mappers.FusionBomItemMapper;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionCompToDtoFlat implements Converter<FusionComponent, FusionComponentDto> {\n    @Autowired\n    FusionBomItemMapper mapper;\n    @Override\n    public FusionComponentDto convert(FusionComponent source) {\n        return mapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionCompToComponent.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.service.PropertyTypeProvider;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\n\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicReference;\n\n@Component\npublic class FusionCompToComponent implements Converter<FusionComponent, ComponentActiveRelease> {\n\n    private final PropertyTypeProvider propertyTypeProvider;\n\n    private BomItemPropertyType widthMm;\n    private BomItemPropertyType lengthMm;\n    private BomItemPropertyType heightMm;\n    private BomItemPropertyType volumeCm3;\n    private BomItemPropertyType areaCm2;\n    private BomItemPropertyType massKg;\n    private BomItemPropertyType densityKgCm3;\n\n    @Autowired\n    public FusionCompToComponent(@Lazy PropertyTypeProvider propertyTypeProvider) {\n        this.propertyTypeProvider = propertyTypeProvider;\n    }\n\n    private boolean initialized = false;\n\n    private void initPropertyTypes() {\n        widthMm = propertyTypeProvider.get(\"widthMm\");\n        lengthMm = propertyTypeProvider.get(\"lengthMm\");\n        heightMm = propertyTypeProvider.get(\"heightMm\");\n        volumeCm3 = propertyTypeProvider.get(\"volumeCm3\");\n        areaCm2 = propertyTypeProvider.get(\"areaCm2\");\n        massKg = propertyTypeProvider.get(\"massKg\");\n        densityKgCm3 = propertyTypeProvider.get(\"densityKgCm3\");\n        initialized = true;\n    }\n\n\n\n\n    @Override\n    public ComponentActiveRelease convert(FusionComponent fusionComponent) {\n        if (!initialized) {\n            initPropertyTypes();\n        }\n        ComponentActiveRelease car = convert_(fusionComponent, Optional.empty());\n        Set<FusionPhysicalProperty> props = fusionComponent.getPhysicalProperties();\n        AtomicReference<Double> totalArea = new AtomicReference<>(0d);\n        AtomicReference<Double> totalMass = new AtomicReference<>(0d);\n        AtomicReference<Double> totalVolume = new AtomicReference<>(0d);\n        props.stream().findFirst().ifPresent(p -> {\n            car.addProperty(new ComponentProperty(p.getAreaCm2(), car, areaCm2,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getDensityKgCm2(), car, densityKgCm3,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getMassKg(), car, massKg,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getLengthMm(), car, lengthMm,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getHeightMm(), car, heightMm,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getWidthMm(), car, widthMm,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getVolumeCm3(), car, volumeCm3,p.getBodyName()));\n            totalMass.updateAndGet(v -> v + p.getMassKg());\n            totalVolume.updateAndGet(v -> v + p.getVolumeCm3());\n            totalArea.updateAndGet(v -> v + p.getAreaCm2());\n        });\n        car.addProperty(new ComponentProperty(totalArea.get(), car, areaCm2));\n        car.addProperty(new ComponentProperty(totalMass.get(), car, massKg));\n        car.addProperty(new ComponentProperty(totalVolume.get(), car, volumeCm3));\n        return car;\n    }\n\n    private boolean isPartOrComponent(ComponentActiveRelease car) {\n        return car.getItemType() == ItemTypes.PART || car.getItemType() == ItemTypes.COMPONENT;\n    }\n\n    private ComponentActiveRelease convert_(FusionComponent fusionComponent, Optional<String> name) {\n        ComponentActiveRelease car = new ComponentActiveRelease();\n        car.setPartNumber(fusionComponent.getPartNumber());\n        car.setDescription(fusionComponent.getDescription());\n        car.setName(name.orElse(fusionComponent.getPartName()));\n        car.setItemType(fusionComponent.getType());\n        car.setFusionId(fusionComponent.getFusionId());\n        car.setFusionRevisionId(fusionComponent.getRevisionId());\n        car.setFusionPath(fusionComponent.getPath());\n        return car;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/ComponentActiveReleaseDtoToFusionComponentDto.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n/**\n * Converter from {@link ComponentActiveReleaseDto} to {@link FusionComponentDto}.\n * This is used when merging Engineering BOM items into a Fusion BOM tree.\n */\n@Component\npublic class ComponentActiveReleaseDtoToFusionComponentDto implements Converter<ComponentActiveReleaseDto, FusionComponentDto> {\n    @Override\n    public FusionComponentDto convert(ComponentActiveReleaseDto source) {\n        if (source == null) {\n            return null;\n        }\n        FusionComponentDto target = new FusionComponentDto();\n        target.setPartName(source.getName());\n        target.setDescription(source.getDescription());\n        target.setPartNumber(source.getPartNumber());\n        target.setQuantity(source.getQuantity());\n        if (source.getItemType() != null) {\n            try {\n                target.setType(ItemTypes.valueOf(source.getItemType()));\n            } catch (IllegalArgumentException ignore) {\n                // Unknown type string; leave type unset\n            }\n        }\n        if (source.getParts() != null) {\n            for (ComponentActiveReleaseDto child : source.getParts()) {\n                target.addChild(convert(child));\n            }\n        }\n        return target;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionCompDtoToPojo.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.converters.mappers.BodyMapper;\nimport com.ua.crow.plm.converters.mappers.FusionBomItemMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionCompDtoToPojo implements Converter<FusionComponentDto, FusionComponent> {\n    @Autowired\n    FusionBomItemMapper mapper;\n    @Autowired\n    BodyMapper bodyMapper;\n\n\n    @Override\n    public FusionComponent convert(FusionComponentDto dto) {\n        FusionComponent item = mapper.toFusionBom(dto);\n\n        if (dto.getBodies() != null) {\n            for (Body body : dto.getBodies()) {\n                FusionPhysicalProperty bodyPojo = bodyMapper.toPojo(body);\n                bodyPojo.setComponent(item);\n                item.getPhysicalProperties().add(bodyPojo);\n            }\n        }\n        return item;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionItemPropertyToDto.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionItemPropertyToDto implements Converter<FusionPhysicalProperty, Body> {\n    @Override\n    public Body convert(FusionPhysicalProperty source) {\n        Body body = new Body();\n        BeanUtils.copyProperties(source, body);\n        return body;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/settings/ItemTypeNameMappingDtoToEntity.java =====\npackage com.ua.crow.plm.converters.settings;\n\nimport com.ua.crow.plm.converters.mappers.ItemTypeNameMappingMapper;\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ItemTypeNameMappingDtoToEntity implements Converter<ItemTypeNameMappingDto, ItemTypeNameMapping> {\n\n    @Autowired\n    private ItemTypeNameMappingMapper mapper;\n\n    @Override\n    public ItemTypeNameMapping convert(ItemTypeNameMappingDto source) {\n        return mapper.toEntity(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/settings/ItemTypeNameMappingToDto.java =====\npackage com.ua.crow.plm.converters.settings;\n\nimport com.ua.crow.plm.converters.mappers.ItemTypeNameMappingMapper;\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ItemTypeNameMappingToDto implements Converter<ItemTypeNameMapping, ItemTypeNameMappingDto> {\n\n    @Autowired\n    private ItemTypeNameMappingMapper mapper;\n\n    @Override\n    public ItemTypeNameMappingDto convert(ItemTypeNameMapping source) {\n        return mapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/EngineeringBomWoChildrenToDto.java =====\npackage com.ua.crow.plm.converters;\n\nimport com.ua.crow.plm.converters.mappers.FullBomMapper;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EngineeringBomWoChildrenToDto implements Converter<BomActiveRelease, EngineeringBomWoChildren> {\n\n    @Autowired\n    FullBomMapper mapper;\n    @Override\n    public EngineeringBomWoChildren convert(BomActiveRelease source) {\n        EngineeringBomWoChildren dto = mapper.toDtoWoChildren(source);\n\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/BomActiveReleaseToDto.java =====\npackage com.ua.crow.plm.converters;\n\nimport com.ua.crow.plm.converters.mappers.FullBomMapper;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Component\npublic class BomActiveReleaseToDto implements Converter<BomActiveRelease, BomActiveReleaseDto> {\n    @Autowired\n    FullBomMapper mapper;\n\n\n    @Override\n    public BomActiveReleaseDto convert(BomActiveRelease source) {\n        Set<BomComponentRel> children = source.getChildren();\n        BomActiveReleaseDto dto = mapper.toDto(source);\n        HashSet<ComponentActiveReleaseDto> childrenDto = new HashSet<>();\n        dto.setChildren(childrenDto);\n        if (children != null) {\n            children.forEach(c -> childrenDto.add(c.convert(ComponentActiveReleaseDto.class)));\n        }\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/PropertyToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.converters.mappers.ComponentPropertyMapper;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyToDto implements Converter<ComponentProperty, CompPropertiesActiveReleaseDto> {\n    @Autowired\n    ComponentPropertyMapper componentPropertyMapper;\n\n    @Override\n    public CompPropertiesActiveReleaseDto convert(ComponentProperty p) {\n        CompPropertiesActiveReleaseDto cp = componentPropertyMapper.toDto(p);\n        if (p.getPropertyType() != null) {\n            cp.setPropertyType(p.getPropertyType().convert(BomItemPropertyTypeDto.class));\n        }\n\n        return cp;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/PropertyTypeToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.converters.mappers.ComponentPropertyTypeMapper;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyTypeToDto implements Converter<BomItemPropertyType,BomItemPropertyTypeDto> {\n\n    @Autowired\n    ComponentPropertyTypeMapper componentPropertyTypeMapper;\n\n\n    @Override\n    public BomItemPropertyTypeDto convert(BomItemPropertyType propertyType) {\n        BomItemPropertyTypeDto dto = componentPropertyTypeMapper.toDto(propertyType);\n        Units units = propertyType.getUnits();\n        if(units!=null){\n            dto.setUnits(units.convert(UnitsDto.class));\n        }\n        if(propertyType.getGroup()!=null){\n            dto.setGroup(propertyType.getGroup().convert(BomItemPropertyTypeGroupDto.class));\n        }\n        return dto;\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/ComponentRelToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.database.active.ComponentRel;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ComponentRelToDto implements Converter<ComponentRel, ComponentActiveReleaseDto> {\n\n    @Override\n    public ComponentActiveReleaseDto convert(ComponentRel source) {\n       ComponentActiveReleaseDto comp = source.getChild().convert(ComponentActiveReleaseDto.class);\n       comp.setQuantity(source.getQuantity());\n       return comp;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/PropertyGroupsToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.converters.mappers.PropertyTypeGroupMapper;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyGroupsToDto implements Converter<BomItemPropertyTypeGroup,BomItemPropertyTypeGroupDto> {\n\n    @Autowired\n    PropertyTypeGroupMapper propertyTypeGroupMapper;\n\n    @Override\n    public BomItemPropertyTypeGroupDto convert(BomItemPropertyTypeGroup source) {\n        return propertyTypeGroupMapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/BomComponentRelToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class BomComponentRelToDto implements Converter<BomComponentRel, ComponentActiveReleaseDto> {\n\n    @Override\n    public ComponentActiveReleaseDto convert(BomComponentRel source) {\n        ComponentActiveReleaseDto comp = source.getChild().convert(ComponentActiveReleaseDto.class);\n        comp.setQuantity(source.getQuantity());\n        return comp;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/ComponentToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.converters.mappers.ComponentMapper;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\nimport java.util.Set;\n@Component\npublic class ComponentToDto implements Converter<ComponentActiveRelease, ComponentActiveReleaseDto> {\n    @Autowired\n    ComponentMapper componentMapper;\n\n\n    @Override\n    public ComponentActiveReleaseDto convert(ComponentActiveRelease c) {\n        ComponentActiveReleaseDto componentActiveReleaseDto = componentMapper.toDto(c);\n        if (c.getChildBom() != null) {\n            componentActiveReleaseDto.setChildBom(c.getChildBom().convert(EngineeringBomWoChildren.class));\n        }\n\n//        if (c.getParts() != null) {\n//            List<ComponentActiveReleaseDto> componentActiveReleaseDtos = new LinkedList<>();\n//            componentActiveReleaseDto.setParts(componentActiveReleaseDtos);\n//            c.getParts().forEach(comp -> {\n//                componentActiveReleaseDtos.add(comp.convert(ComponentActiveReleaseDto.class));\n//            });\n//        }\n\n        Set<ComponentProperty> props = c.getProperties();\n        if (props != null) {\n            Set<CompPropertiesActiveReleaseDto> propsDto = new HashSet<>();\n            componentActiveReleaseDto.setProperties(propsDto);\n            props.forEach(p -> propsDto.add(p.convert(CompPropertiesActiveReleaseDto.class)));\n        }\n        return componentActiveReleaseDto;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/product/ProductDtoToProductActiveRelease.java =====\npackage com.ua.crow.plm.converters.product;\n\nimport com.ua.crow.plm.converters.mappers.ProductMapper;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ProductDtoToProductActiveRelease implements Converter<ProductActiveReleaseDto, ProductActiveRelease> {\n    @Autowired\n    private ProductMapper productMapper;\n    @Override\n    public ProductActiveRelease convert(ProductActiveReleaseDto source) {\n        return productMapper.toProduct(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/product/ProductActiveReleaseConverterToProductDto.java =====\npackage com.ua.crow.plm.converters.product;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.converters.mappers.ProductMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ProductActiveReleaseConverterToProductDto implements Converter<ProductActiveRelease, ProductActiveReleaseDto> {\n    @Autowired\n    private ProductMapper productMapper;\n    public ProductActiveReleaseDto convertWithoutBoms(ProductActiveRelease product) {\n        ProductActiveReleaseDto p = productMapper.toDto(product);\n        product.getAttachmentService().getFirstThumbnailUrl().ifPresent(url->p.setThumbnailUrl(url));\n        return p;\n    }\n    @Override\n    public ProductActiveReleaseDto convert(ProductActiveRelease source) {\n        return convertWithoutBoms(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/UnitsToDto.java =====\npackage com.ua.crow.plm.converters;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.dto.mappers.UnitsMapper;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class UnitsToDto implements Converter<Units, UnitsDto> {\n    @Autowired\n    UnitsMapper unitsMapper;\n    @Override\n    public UnitsDto convert(Units source) {\n        return unitsMapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/ActiveReleaseComponentToPartNumberReference.java =====\npackage com.ua.crow.plm.converters;\n\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ActiveReleaseComponentToPartNumberReference implements Converter<ComponentActiveRelease,PartNumberReference> {\n\n    @Override\n    public PartNumberReference convert(ComponentActiveRelease component) {\n        PartNumberReference reference = new PartNumberReference();\n        reference.setReferenceType(PartNumberReferenceType.ACTIVE_RELEASE_COMPONENT);\n        reference.setPartNumber(component.getPartNumber());\n        reference.setDescription(component.getDescription());\n        reference.setPartName(component.getName());\n        return reference;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentPropertyMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentPropertyMapper {\n\n    @Mapping(target = \"item\", ignore = true)\n    public abstract CompPropertiesActiveReleaseDto toDto(ComponentProperty bomActiveRelease);\n\n    @Mapping(target = \"item\", ignore = true)\n    public abstract ComponentProperty toPojo(CompPropertiesActiveReleaseDto bomActiveRelease);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentMapper {\n\n    @Mapping(target = \"parts\", ignore = true)\n    @Mapping(target = \"properties\", ignore = true)\n    @Mapping(target = \"parentBom\", ignore = true)\n    @Mapping(target = \"childBom\", ignore = true)\n    public abstract ComponentActiveReleaseDto toDto(ComponentActiveRelease bomActiveRelease);\n\n    @Mapping(target = \"parts\", ignore = true)\n    @Mapping(target = \"properties\", ignore = true)\n    @Mapping(target = \"parentBom\", ignore = true)\n    @Mapping(target = \"childBom\", ignore = true)\n    public abstract ComponentActiveRelease toPojo(ComponentActiveReleaseDto bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/FusionBomMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class FusionBomMapper {\n\n    public abstract FusionBomDto toDto(FusionBom bom);\n\n\n    public abstract FusionBom toFusionBom(FusionBomDto bom);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/FullBomMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class FullBomMapper {\n    @Mapping(target = \"children\", ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease);\n\n    @Mapping(target = \"children\", ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract EngineeringBomWoChildren toDtoWoChildren(BomActiveRelease bomActiveRelease);\n\n    @Mapping(target = \"children\", ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract BomActiveRelease toPojo(BomActiveReleaseDto bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ShortFusionBomMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.mapstruct.BeanMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class ShortFusionBomMapper {\n    @BeanMapping(ignoreByDefault = true)\n    @Mapping(target = \"partName\", source = \"partName\")\n    @Mapping(target = \"partNumber\", source = \"partNumber\")\n    @Mapping(target = \"type\", source = \"type\")\n    public abstract FusionComponentDto toShortDto(FusionComponent bom);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/PropertyTypeGroupMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class PropertyTypeGroupMapper {\n    public abstract BomItemPropertyTypeGroupDto toDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup);\n    public abstract BomItemPropertyTypeGroup toPojo(BomItemPropertyTypeGroupDto bomItemPropertyTypeDto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ResourceGroupMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class ResourceGroupMapper {\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ResourceGroupDto toDto(ResourceGroup task);\n\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ResourceGroup toResourceGroup(ResourceGroupDto task);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/MaterialMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.Material;\nimport com.ua.crow.plm.dto.fusion.MaterialDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class MaterialMapper {\n    abstract MaterialDto toDto(Material material);\n\n    abstract Material toPojo(MaterialDto material);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentGroupMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentGroupMapper {\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ComponentGroupDto toDto(ComponentGroup group);\n\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ComponentGroup toEntity(ComponentGroupDto dto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ResourceItemMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ResourceItemMapper {\n    public abstract ResourceItemDTO toDto(ResourceItem comment);\n    public abstract ResourceItem toPojo(ResourceItemDTO comment);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ProductMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class ProductMapper {\n\n    @Mapping(target = \"engineeringBoms\" ,ignore = true)\n    public abstract ProductActiveReleaseDto toDto(ProductActiveRelease task);\n    @Mapping(target = \"engineeringBoms\" ,ignore = true)\n    public abstract ProductActiveRelease toProduct(ProductActiveReleaseDto task);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/BodyMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class BodyMapper {\n    public abstract Body toDto(FusionPhysicalProperty fusionPhysicalProperty);\n\n    public abstract FusionPhysicalProperty toPojo(Body body);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ReleaseVersionMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.dto.released.ReleaseVersionDTO;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ReleaseVersionMapper {\n\n    @Mapping(target = \"previous\", ignore = true)\n\n    public abstract ReleaseVersionDTO toDto(ReleaseVersion bomActiveRelease);\n    @Mapping(target = \"previous\", ignore = true)\n\n\n    public abstract ReleaseVersion toPojo(ReleaseVersionDTO bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentPropertyTypeMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentPropertyTypeMapper {\n\n    public abstract BomItemPropertyTypeDto toDto(BomItemPropertyType bomItemPropertyType);\n\n    public abstract BomItemPropertyType toPojo(BomItemPropertyTypeDto bomItemPropertyTypeDto);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/FusionBomItemMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class FusionBomItemMapper {\n\n\n    public abstract FusionComponentDto toDto(FusionComponent bom);\n\n    public abstract FusionComponent toFusionBom(FusionComponentDto bom);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ItemTypeNameMappingMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ItemTypeNameMappingMapper {\n    public abstract ItemTypeNameMappingDto toDto(ItemTypeNameMapping mapping);\n\n    public abstract ItemTypeNameMapping toEntity(ItemTypeNameMappingDto dto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/BomShortMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class BomShortMapper {\n    @Mapping(target = \"children\" , ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomToPartNumberReference.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomToPartNumberReference implements Converter<FusionBom, PartNumberReference> {\n\n    @Override\n    public PartNumberReference convert(FusionBom source) {\n        return converFusionBomToPartNumberRef(source);\n    }\n    private PartNumberReference converFusionBomToPartNumberRef(FusionBom fb) {\n        PartNumberReference partNumberReference = new PartNumberReference();\n        partNumberReference.setReferenceType(PartNumberReferenceType.FUSION_BOM);\n        partNumberReference.setPartName(fb.getName());\n        partNumberReference.setPartNumber(fb.getPartNumber());\n        partNumberReference.setDescription(fb.getDescription());\n        if(fb.getProduct()!=null) {\n            partNumberReference.setProductId(fb.getProduct().getId());\n        }\n        return partNumberReference;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomDtoToFusionBom.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.converters.mappers.FusionBomMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomDtoToFusionBom implements Converter<FusionBomDto,FusionBom> {\n\n    @Autowired\n    private FusionBomMapper fusionBomMapper;\n\n\n    @Override\n    public FusionBom convert(FusionBomDto source) {\n\n        return fusionBomMapper.toFusionBom(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomToFusionBomDto.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomToFusionBomDto implements Converter<FusionBom,FusionBomDto> {\n\n    @Autowired\n    private MinioService minioService;\n\n    @Override\n    public FusionBomDto convert(FusionBom bom) {\n        FusionBomDto fusionBomDto = new FusionBomDto();\n\n        fusionBomDto.setDeleted( bom.isDeleted() );\n        fusionBomDto.setName( bom.getName() );\n\n        fusionBomDto.setCreator( bom.getCreator() );\n        fusionBomDto.setModifier( bom.getModifier() );\n        fusionBomDto.setCreatedAt( bom.getCreatedAt() );\n        fusionBomDto.setModifiedAt( bom.getModifiedAt() );\n//        fusionBomDto.setProduct(Optional.of( bom.getProduct() ).map(b->bom.getProduct().convert(ProductActiveReleaseDto.class)).orElse(null)) ;\n        fusionBomDto.setDocumentName( bom.getDocumentName() );\n        fusionBomDto.setVersion( bom.getVersion() );\n        fusionBomDto.setProcessed( bom.isProcessed() );\n        fusionBomDto.setEngineeringBomId( bom.getEngineeringBomId() );\n        fusionBomDto.setDescription( bom.getDescription() );\n        fusionBomDto.setFusionId( bom.getFusionId() );\n        fusionBomDto.setLibraryItem( bom.isLibraryItem() );\n        fusionBomDto.setRevisionId( bom.getRevisionId() );\n        fusionBomDto.setPartNumber( bom.getPartNumber() );\n        fusionBomDto.setConfiguration( bom.isConfiguration() );\n        fusionBomDto.setConfiguredDesign( bom.isConfiguredDesign() );\n\n        if (bom.getRoot()!=null){\n            fusionBomDto.setRootPart(bom.getRoot().convert(FusionComponentDto.class));\n        }\n        String objectName = new StringBuilder()\n                .append(\"fusionbom/\")\n                .append(bom.getFusionId())\n                .append('_')\n                .append(bom.getRevisionId())\n                .append('/')\n                .append(\"model.step\")\n                .toString();\n        if (minioService.exist(Buckets.cad, objectName)) {\n            fusionBomDto.setUrl(minioService.sign(Buckets.cad, objectName));\n        }\n        return fusionBomDto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomToBomActiveRelease.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomToBomActiveRelease implements Converter<FusionBom, BomActiveRelease> {\n\n    @Override\n    public BomActiveRelease convert(FusionBom source) {\n        BomActiveRelease bom = new BomActiveRelease();\n//        bom.addFusionBom(\"Engineering BOM creation using Fusion 360 model\",source);\n        bom.setRelease_ver(0L);\n        bom.setProduct(source.getProduct());\n        bom.setDescription(source.getDescription());\n        bom.setPartNumber(source.getPartNumber());\n        bom.setName(source.getDocumentName());\n        bom.setFusionVersion(source.getVersion());\n        bom.setLibraryItem(source.isLibraryItem());\n        bom.setConfiguration(source.isConfiguration());\n        bom.setConfiguredDesign(source.isConfiguredDesign());\n        bom.setFusionRevisionId(source.getRevisionId());\n        bom.setFusionId(source.getFusionId());\n\n        return bom;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/fusion/FusionBomItemController.java =====\npackage com.ua.crow.plm.controller.fusion;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFacadeService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomManagementService;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/fusionbomitem\")\n@Validated\npublic class FusionBomItemController {\n    @Autowired\n    FusionBomFacadeService service;\n\n    @Autowired\n    FusionBomManagementService fusionBomManagementService;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n\n    @PostMapping(\"/add\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto save(@RequestBody FusionComponentDto dto){\n        return fusionBomManagementService.createItem(dto).convert(FusionComponentDto.class);\n    }\n\n    @PostMapping(\"/addparent\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto save(@RequestBody @Valid AddChildRequest dto){\n            return service.addChildItem(dto).convert(FusionComponentDto.class);\n    }\n\n    @PostMapping(\"/update\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionComponentDto update(@RequestBody @Valid FusionComponentDto dto, @RequestParam(value = \"updateProperties\", defaultValue = \"false\") boolean updateProperties) {\n        return service.updateItem(dto,updateProperties).convert(FusionComponentDto.class);\n    }\n    @GetMapping(\"/read\")\n    public FusionComponentDto readById(@RequestParam String id,@RequestParam String revisionId,@RequestParam(value = \"includeProperties\", defaultValue = \"false\") boolean includeProperties) {\n        return fusionBomItemService.readById(id, revisionId, includeProperties)\n                .orElseThrow(() -> new NotFoundException(\"Fusion component not found with ID: \" + id + \" and revision ID: \" + revisionId))\n                .convert(FusionComponentDto.class);\n    }\n\n    @PostMapping(\"/merge\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionComponentDto merge(@RequestBody @Valid com.ua.crow.plm.dto.requests.MergeBomItemsRequest request) {\n        return fusionBomItemService.merge(request.getSourceFusionId(), request.getSourceRevisionId(),\n                request.getTargetFusionId(), request.getTargetRevisionId());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/fusion/FusionBomController.java =====\npackage com.ua.crow.plm.controller.fusion;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.converters.mappers.FusionBomItemMapper;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.dto.requests.FusionBomsListRequest;\nimport com.ua.crow.plm.dto.requests.MapProductRequest;\nimport com.ua.crow.plm.service.fusionbom.FusionBomImportService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFacadeService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomManagementService;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.merge.MergeBomTreesDto;\nimport org.springframework.http.ResponseEntity;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/fusionbom\")\n@Validated\npublic class FusionBomController {\n    @Autowired\n    private FusionBomFacadeService fusionBomService;\n\n    @Autowired\n\n    private FusionBomManagementService fusionBomManagementService;\n    @Autowired\n    private FusionBomItemMapper fusionBomItemMapper;\n    @Autowired\n    FusionBomImportService fusionBomImportService;\n    @PostMapping(\"/list\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<FusionBomDto> fusionBoms(@RequestBody FusionBomsListRequest request, @PageableDefault Pageable pageable) {\n        List<FusionBomDto> result;\n        if (request.getProductId().isPresent()) {\n            if (request.getUnprocessed().isPresent()) {\n                if (request.getUnprocessed().get()) {\n                    result = fusionBomService.readUnprocessedBomTreeDtosByProduct(request.getProductId().get(), request.getRelease().orElse(0L));\n                } else {\n                    result = fusionBomService.readProcessedBomTreeDtosByProduct(request.getProductId().get(), request.getRelease().orElse(0L));\n                }\n            } else {\n                result = fusionBomService.readBomTreeDtoByProduct(request.getProductId().get(), request.getRelease().orElse(0L));\n            }\n        } else {\n            result = fusionBomService.readAllTreeDto();\n        }\n\n        if (request.getPartNumber().isPresent()) {\n            String search = request.getPartNumber().get().toLowerCase();\n            result = result.stream()\n                    .filter(dto -> dto.getPartNumber() != null && dto.getPartNumber().toLowerCase().contains(search))\n                    .toList();\n        }\n        return result;\n    }\n    @PostMapping(\"/updateType\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionComponentDto updateStatus(@RequestParam(required = true) ItemTypes type, @RequestParam(required = true) String id, @RequestParam(required = true) String revId) {\n        return fusionBomService.updateItemType(id, revId, type);\n    }\n    @GetMapping(\"/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionBomDto> getFusionBom(@PathVariable(\"id\") String id, @RequestParam(\"revisionId\") String revisionId) {\n        return fusionBomService.readDtoById(FusionId.id(id, revisionId));\n    }\n\n    @GetMapping(\"/tree\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionBomDto> getFusionBomTree(@RequestParam String id,\n                                                   @RequestParam String revisionId,\n                                                   @RequestParam(value = \"returnComponentBodies\", defaultValue = \"false\") boolean returnComponentBodies) {\n        return fusionBomService.readFullTree(FusionId.id(id, revisionId), returnComponentBodies);\n    }\n    @GetMapping(\"/root\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionComponentDto> getTreeOfComponents(@RequestParam String id,\n                                                            @RequestParam String revisionId,\n                                                            @RequestParam(value = \"returnComponentBodies\", defaultValue = \"false\") boolean returnComponentBodies) {\n        return fusionBomService.readFullTree(FusionId.id(id, revisionId), returnComponentBodies).map(FusionBomDto::getRootPart);\n    }\n    @DeleteMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto delete(@RequestBody FusionId id) {\n        return fusionBomManagementService.softDelete(id).convert(FusionBomDto.class);\n    }\n\n    @PostMapping(\"/unlink\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> unlink(@RequestBody FusionId id) {\n        fusionBomManagementService.unlinkFromParents(id);\n        return ResponseEntity.ok().build();\n    }\n    @PostMapping(\"/mapproduct\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto mapProduct(@RequestBody @Valid MapProductRequest request) {\n        return fusionBomService.mapProduct(FusionId.id(request.getFusionBomId(), request.getRevisionId()), request.getProductId()).convert(FusionBomDto.class);\n    }\n\n    @PutMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto createFusionBom(@RequestBody @NotNull FusionBomDto dto) {\n        return fusionBomImportService.save(dto);\n    }\n\n    @GetMapping(\"/revisions/{fusionId}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> revisions(\n            @PathVariable(\"fusionId\") String fusionId,\n            @RequestParam Long productId,\n            @RequestParam Long release) {\n        return fusionBomService.readRevisionDtos(fusionId, productId, release);\n    }\n\n    /**\n     * Returns the most suitable Engineering BOM for merging with the specified Fusion BOM.\n     */\n    @GetMapping(\"/mergeable-effective-boms/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<EngineeringBomWoChildren> mergeableEngineeringBom(@PathVariable(\"id\") String id,\n                                                                        @RequestParam String revisionId) {\n        return fusionBomService.findMergeableEngineeringBom(FusionId.id(id, revisionId))\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    /**\n     * Loads hierarchical trees for both Fusion and Engineering BOM.\n     */\n    @GetMapping(\"/trees/{fusionId}/{effectiveId}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<MergeBomTreesDto> mergeTrees(@PathVariable(\"fusionId\") String fusionId,\n                                                       @PathVariable(\"effectiveId\") Long effectiveId,\n                                                       @RequestParam String revisionId) {\n        return fusionBomService.loadMergeTrees(FusionId.id(fusionId, revisionId), effectiveId)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    /**\n     * Performs merge of a Fusion BOM into an existing Engineering BOM.\n     */\n    @PostMapping(\"/merge\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> merge(@RequestParam String fusionId,\n                                      @RequestParam String revisionId,\n                                      @RequestParam Long engineeringBomId) {\n        fusionBomService.mergeFusionIntoEngineeringBom(FusionId.id(fusionId, revisionId), engineeringBomId);\n        return ResponseEntity.ok().build();\n    }\n\n    // Direct invocation from Vaadin views\n    public void deleteComponent(String componentId, String componentRevision) {\n        fusionBomManagementService.deleteComponent(FusionId.id(componentId, componentRevision));\n    }\n\n\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/fusion/FusionController.java =====\npackage com.ua.crow.plm.controller.fusion;\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.dto.basic.FindProjectByNameRequest;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.FusionProjectListItem;\nimport com.ua.crow.plm.dto.ObtainPartNumberRequest;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.*;\nimport com.ua.crow.plm.service.fusionbom.FusionBomImportService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFileService;\nimport com.ua.crow.plm.service.product.ActiveReleaseProductService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping(\"/fusion\")\n@Validated\npublic class FusionController {\n    @Autowired\n    PartNumberProvider pool;\n    @Autowired\n    ActiveReleaseProductService service;\n\n\n    @Autowired\n    FusionBomImportService fusionBomImportService;\n\n    @Autowired\n    FusionBomFileService fusionBomFileService;\n\n    @GetMapping(\"/products\")\n    Stream<FusionProjectListItem> projectList() {\n        return service.findAll(false).map(p -> {\n            FusionProjectListItem fusionProjectListItem = new FusionProjectListItem();\n            fusionProjectListItem.setName(p.getName());\n            return fusionProjectListItem;\n        });\n    }\n\n    @PostMapping(\"/productsbyname\")\n    Optional<ProductActiveReleaseDto> findByName(@RequestBody @Valid FindProjectByNameRequest request) {\n        return service.findByName(request.getName()).map(p -> p.convert(ProductActiveReleaseDto.class));\n    }\n\n\n\n    @PostMapping(\"/readbyid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionBomDto> getFusionBom(@RequestBody @NotNull  FusionId fusionId) {\n        return fusionBomImportService.checkIfExists(fusionId).map(f -> {\n            FusionBomDto dto = f.convert(FusionBomDto.class);\n            String url = fusionBomFileService.getStepFileUrl(f);\n            if (url != null) {\n                dto.setUrl(url);\n            }\n            return dto;\n        });\n    }\n\n    @PostMapping(\"/issue\")\n    ResponseEntity<Void> issue(@RequestBody ObtainPartNumberRequest req) {\n            PartNumberReference partNumberReference = pool.findOrCreate(Optional.of(req.getPartNumber())).get();\n            ResponseEntity.BodyBuilder r = ResponseEntity.ok().header(\"partNumber\", partNumberReference.getPartNumber());\n            if (partNumberReference.getReferenceType() == PartNumberReferenceType.NEW) {\n                r.header(\"created\", \"true\");\n            }\n            return r.build();\n    }\n\n    @PostMapping(\"/txbegin\")\n    public ResponseEntity<Void> txBegin(@RequestBody @Valid @NotNull FusionId fusionId){\n        return ResponseEntity.ok().build();\n    }\n\n    @PutMapping(\"/fusionbom\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto createFusionBom(@RequestBody @NotNull FusionBomDto dto){\n        return fusionBomImportService.save(dto).convert(FusionBomDto.class);\n    }\n\n    @PostMapping(\"/fusionbomitem\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto save(@RequestBody FusionComponentDto dto){\n        return fusionBomImportService.saveItem(dto).convert(FusionComponentDto.class);\n\n    }\n\n    @PostMapping(\"/addparent\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto addparent(@RequestBody @Valid AddChildRequest dto){\n\n            return fusionBomImportService.addChildItem(dto).convert(FusionComponentDto.class);\n\n\n    }\n\n\n    @PostMapping(\"/txcommit\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto commit(@RequestBody @NotNull FusionId id){\n            return fusionBomImportService.commitTransaction(id);\n    }\n\n\n    @PostMapping(\"/deletefusionbom\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto delete(@RequestBody @NotNull FusionId id){\n        return fusionBomImportService.delete(id).convert(FusionBomDto.class);\n    }\n\n    @PostMapping(\"/uploadStep\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> uploadStep(@RequestHeader String fusionId,\n                                           @RequestHeader String revisionId,\n                                           @RequestHeader(\"file\") MultipartFile file) throws java.io.IOException {\n        fusionBomFileService.uploadStepFile(FusionId.id(fusionId, revisionId), file);\n        return ResponseEntity.ok().build();\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ProductController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.service.NotFoundException;\nimport com.ua.crow.plm.service.product.ActiveReleaseProductService;\nimport jakarta.annotation.Nonnull;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.apache.commons.lang3.NotImplementedException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/products\")\n@Validated\npublic class ProductController {\n    @Autowired\n    private ActiveReleaseProductService activeReleaseProductService;\n\n    @GetMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    public List<ProductActiveReleaseDto> getAllProducts() {\n        return activeReleaseProductService.findAll(false)\n                .map(product -> product.convert(ProductActiveReleaseDto.class))\n                .collect(Collectors.toList());\n    }\n\n    @GetMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    public Optional<ProductDto> getProductById(@RequestParam @Nonnull Long id) {\n        return activeReleaseProductService\n                .findById(id)\n                .map(productActiveRelease -> productActiveRelease.convert(ProductActiveReleaseDto.class));\n    }\n\n    @PostMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ProductActiveReleaseDto createProduct(@RequestBody ProductActiveReleaseDto productDTO) {\n        ProductActiveRelease savedProductActiveRelease = activeReleaseProductService.createProduct(productDTO);\n        return savedProductActiveRelease.convert(ProductActiveReleaseDto.class);\n    }\n\n\n    public ProductActiveReleaseDto updateProduct( ProductDto productDTO) {\n        Long id = productDTO.getId();\n        ProductActiveRelease existingProductActiveRelease = activeReleaseProductService.findById(id)\n                .orElseThrow(() -> new NotFoundException(id,ProductActiveRelease.class));\n        existingProductActiveRelease.setName(productDTO.getName());\n        existingProductActiveRelease.setUkrName(productDTO.getUkrName());\n        ProductActiveRelease updatedProductActiveRelease = activeReleaseProductService.updateProduct(existingProductActiveRelease);\n        return updatedProductActiveRelease.convert(ProductActiveReleaseDto.class);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {\n        throw new NotImplementedException();\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/ItemTypeNameMappingController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport com.ua.crow.plm.service.ItemTypeNameMappingService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/item-type-mappings\")\npublic class ItemTypeNameMappingController {\n    private final ItemTypeNameMappingService service;\n\n    @Autowired\n    public ItemTypeNameMappingController(ItemTypeNameMappingService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<ItemTypeNameMappingDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(ItemTypeNameMappingDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ItemTypeNameMappingDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public ItemTypeNameMappingDto create(@RequestBody ItemTypeNameMappingDto dto) {\n        ItemTypeNameMapping saved = service.save(dto.convert(ItemTypeNameMapping.class));\n        return saved.convert(ItemTypeNameMappingDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<ItemTypeNameMappingDto> update(@PathVariable Long id, @RequestBody ItemTypeNameMappingDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        ItemTypeNameMapping saved = service.save(dto.convert(ItemTypeNameMapping.class));\n        return ResponseEntity.ok(saved.convert(ItemTypeNameMappingDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/BomItemPropertyTypeController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.service.engbom.BomItemPropertyTypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/property-types\")\npublic class BomItemPropertyTypeController {\n    private final BomItemPropertyTypeService service;\n\n    @Autowired\n    public BomItemPropertyTypeController(BomItemPropertyTypeService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<BomItemPropertyTypeDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(BomItemPropertyTypeDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public BomItemPropertyTypeDto create(@RequestBody BomItemPropertyTypeDto dto) {\n        BomItemPropertyType saved = service.save(dto.convert(BomItemPropertyType.class));\n        return saved.convert(BomItemPropertyTypeDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeDto> update(@PathVariable Long id, @RequestBody BomItemPropertyTypeDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        BomItemPropertyType saved = service.save(dto.convert(BomItemPropertyType.class));\n        return ResponseEntity.ok(saved.convert(BomItemPropertyTypeDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/ComponentGroupController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport com.ua.crow.plm.service.ComponentGroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/component-groups\")\npublic class ComponentGroupController {\n    private final ComponentGroupService service;\n\n    @Autowired\n    public ComponentGroupController(ComponentGroupService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<ComponentGroupDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(ComponentGroupDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ComponentGroupDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public ComponentGroupDto create(@RequestBody ComponentGroupDto dto) {\n        ComponentGroup saved = service.save(dto.convert(ComponentGroup.class));\n        return saved.convert(ComponentGroupDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<ComponentGroupDto> update(@PathVariable Long id, @RequestBody ComponentGroupDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        ComponentGroup saved = service.save(dto.convert(ComponentGroup.class));\n        return ResponseEntity.ok(saved.convert(ComponentGroupDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/BomItemPropertyTypeGroupController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport com.ua.crow.plm.service.engbom.BomItemPropertyTypeGroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/property-type-groups\")\npublic class BomItemPropertyTypeGroupController {\n    private final BomItemPropertyTypeGroupService service;\n\n    @Autowired\n    public BomItemPropertyTypeGroupController(BomItemPropertyTypeGroupService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<BomItemPropertyTypeGroupDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(BomItemPropertyTypeGroupDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeGroupDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public BomItemPropertyTypeGroupDto create(@RequestBody BomItemPropertyTypeGroupDto dto) {\n        BomItemPropertyTypeGroup saved = service.save(dto.convert(BomItemPropertyTypeGroup.class));\n        return saved.convert(BomItemPropertyTypeGroupDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeGroupDto> update(@PathVariable Long id, @RequestBody BomItemPropertyTypeGroupDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        BomItemPropertyTypeGroup saved = service.save(dto.convert(BomItemPropertyTypeGroup.class));\n        return ResponseEntity.ok(saved.convert(BomItemPropertyTypeGroupDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ResourceGroupController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.inventory.service.ResourceGroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/resource-groups\")\npublic class ResourceGroupController {\n\n    private final ResourceGroupService resourceGroupService;\n\n    @Autowired\n    public ResourceGroupController(ResourceGroupService resourceGroupService) {\n        this.resourceGroupService = resourceGroupService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<ResourceGroupDto>> getAllResourceGroups() {\n        List<ResourceGroupDto> resourceGroups = resourceGroupService.findAll().stream().map(e->e.convert(ResourceGroupDto.class)).toList();\n        return new ResponseEntity<>(resourceGroups, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ResourceGroupDto> getResourceGroupById(@PathVariable Long id) {\n        Optional<ResourceGroupDto> resourceGroup = resourceGroupService.findById(id);\n        return resourceGroup.map(value -> new ResponseEntity<>(value, HttpStatus.OK))\n                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));\n    }\n\n    @PostMapping\n    public ResponseEntity<ResourceGroupDto> createResourceGroup(@RequestBody ResourceGroupDto resourceGroupDto) {\n        ResourceGroup savedResourceG = resourceGroupService.save(resourceGroupDto.convert(ResourceGroup.class));\n        ResourceGroupDto savedResourceGroup = savedResourceG.convert(ResourceGroupDto.class);\n        return new ResponseEntity<>(savedResourceGroup, HttpStatus.CREATED);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<ResourceGroupDto> updateResourceGroup(@PathVariable Long id, @RequestBody ResourceGroupDto resourceGroupDto) {\n        if (!resourceGroupService.findById(id).isPresent()) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        resourceGroupDto.setId(id);\n        ResourceGroupDto updatedResourceGroup = resourceGroupService.save(resourceGroupDto.convert(ResourceGroup.class)).convert(ResourceGroupDto.class);\n        return new ResponseEntity<>(updatedResourceGroup, HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteResourceGroup(@PathVariable Long id) {\n        if (!resourceGroupService.findById(id).isPresent()) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        resourceGroupService.deleteById(id);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @GetMapping(\"/tree\")\n    public ResponseEntity<List<ResourceGroupDto>> getResourceGroupTree() {\n        List<ResourceGroupDto> tree = resourceGroupService.getTree().stream()\n                .map(this::convertRecursively)\n                .toList();\n\n        return new ResponseEntity<>(tree, HttpStatus.OK);    }\n    private ResourceGroupDto convertRecursively(ResourceGroup group) {\n        ResourceGroupDto dto = group.convert(ResourceGroupDto.class);\n        if (group.getChildren() != null && !group.getChildren().isEmpty()) {\n            List<ResourceGroupDto> childDtos = group.getChildren().stream()\n                    .map(this::convertRecursively)\n                    .toList();\n            dto.setChildren(childDtos);\n        }\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/EngineeringBomController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.converters.mappers.BomShortMapper;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.service.engbom.BomService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.data.web.SortDefault;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping(\"/ebom\")\n@Validated\npublic class EngineeringBomController {\n    @Autowired\n    private BomService bomService;\n    @Autowired\n    private BomShortMapper bomShortMapper;\n\n    @PostMapping(\"/convertToEngineeringBom\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity convertToEngineeringBom(@RequestParam @NotNull @NotBlank String id, @RequestParam @NotNull @NotBlank String revisionId) {\n        BomActiveRelease res = bomService.importFusionBom(FusionId.id(id,revisionId));\n        return ResponseEntity.ok().build();\n    }\n\n    @PostMapping(\"/shortlist\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Stream<ComponentActiveReleaseDto> fusionBoms(@NotNull Long bomId){\n        return bomService.shortList(bomId).map(i->i.convert(ComponentActiveReleaseDto.class));\n    }\n\n    @GetMapping(\"/byproductid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<EngineeringBomWoChildren>\n        listByProductId(@NotNull @RequestParam Long productId,\n                        @RequestParam(required = false, defaultValue = \"0\") Long release,\n                        @PageableDefault @SortDefault.SortDefaults({@SortDefault(sort = \"id\")}) Pageable pageable,\n                        @RequestParam(required = false) boolean rootOnly) {\n        return bomService.listByProductId(productId, release, pageable, rootOnly);\n\n    }\n\n    @GetMapping(\"/byid/components\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<ComponentActiveReleaseDto> fullbyId(@NotNull @RequestParam Long id,\n                                                    @RequestParam(required = false, defaultValue = \"0\") Long release) {\n        return bomService.readComponents(id, release);\n    }\n\n    @GetMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<EngineeringBomWoChildren> byId(@NotNull @RequestParam Long id,\n                                                   @RequestParam(required = false, defaultValue = \"0\") Long release) {\n        return bomService.readShortDtoById(id, release);\n    }\n\n    @GetMapping(\"/byid/tree\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<BomActiveReleaseDto> byIdTree(@NotNull @RequestParam Long id,\n                                                  @RequestParam(required = false, defaultValue = \"0\") Long release) {\n        return bomService.readDtoTreeById(id, release);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public EngineeringBomWoChildren delete(@PathVariable Long id,\n                                            @RequestParam(required = false, defaultValue = \"false\") boolean deleteComponents) {\n        return bomService.softDelete(id, deleteComponents).convert(EngineeringBomWoChildren.class);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/cad/CadController.java =====\npackage com.ua.crow.plm.controller.cad;\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFileService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomImportService;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/cad\")\npublic class CadController {\n\n    @Autowired\n    private FusionBomImportService importService;\n\n    @Autowired\n    private FusionBomFileService fileService;\n\n    @GetMapping(\"/url\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    public Optional<String> getStepFileUrl(@RequestParam String fusionId,\n                                           @RequestParam String revisionId) {\n        return importService.checkIfExists(FusionId.id(fusionId, revisionId))\n                .map(fileService::getStepFileUrl);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/EngineeringBomItemController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.service.engbom.BomService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/ebomitem\")\n@Validated\npublic class EngineeringBomItemController {\n    @Autowired\n    private BomService bomService;\n    @GetMapping(\"/bybomid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<ComponentActiveReleaseDto> byId(@NotNull @RequestParam Long id){\n        return bomService.readComponents(id,0L);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ActiveReleaseComponentController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.dto.requests.ComponentRequestDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.service.ComponentService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping(\"/component\")\n@Validated\npublic class ActiveReleaseComponentController {\n\n    @Autowired\n    ComponentService componentService;\n\n    @GetMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<ComponentActiveReleaseDto> byId(@NotNull @RequestParam Long id){\n        throw new UnsupportedOperationException(\"Not implemented yet\");\n    }\n    @GetMapping(\"/list\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Stream<ComponentActiveReleaseDto> list(ComponentRequestDto req){\n        return componentService.list(req);\n    }\n\n    @PostMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<ComponentActiveReleaseDto> save(){\n        throw new UnsupportedOperationException();\n    }\n\n\n\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ProductVersionController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.converters.mappers.ReleaseVersionMapper;\nimport com.ua.crow.plm.dto.released.ReleaseVersionDTO;\nimport com.ua.crow.plm.service.product.ProductService;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/products/versions\")\n@Validated\npublic class ProductVersionController {\n    @Autowired\n    ProductService productService;\n    @Autowired\n    private ReleaseVersionMapper releaseVersionMapper;\n    @GetMapping\n    public List<ReleaseVersionDTO> getProductVersions(@RequestParam @NotNull Long productid) {\n        return productService.getAllVersions(productid)\n                .stream()\n                .map(releaseVersionMapper::toDto)\n                .toList();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbomitem/FusionBomItemService.java =====\npackage com.ua.crow.plm.service.fusionbomitem;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.*;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRepository;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionBomRelRepository;\nimport com.ua.crow.plm.database.repo.MaterialRepository;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.TypeDetector;\nimport com.ua.crow.service.BadRequest;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@Service\npublic class FusionBomItemService {\n    @Autowired\n    TypeDetector typeDetector;\n    @Autowired\n    FusionComponentRepository fusionComponentRepository;\n    @Autowired\n    MaterialRepository materialRepository;\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n    @Autowired\n    FusionBomRelRepository fusionBomRelRepository;\n    @Autowired\n    FusionComponentRelRepository repository;\n    @Transactional(readOnly = true)\n    public Optional<FusionComponentDto> readById(@NotNull String itemId, @NotNull String revisionId, boolean includeProperties) {\n        Optional<FusionComponent> item = fusionComponentRepository.findById(new FusionId(itemId, revisionId));\n        if (item.isPresent()) {\n            Optional<FusionComponentDto> dto = item.map(fbom -> fbom.convert(FusionComponentDto.class));\n            if (includeProperties) {\n                dto.get().setBodies(item.get().getPhysicalProperties().stream().map(p -> p.convert(Body.class)).collect(Collectors.toSet()));\n            }\n            return dto;\n        }\n        return Optional.empty();\n    }\n\n    public FusionComponentDto updateType(String id,String revisionId, ItemTypes type) {\n        FusionComponent fbom = fusionComponentRepository.findById(FusionId.id(id,revisionId))\n                .orElseThrow(() -> new NotFoundException(id, FusionComponent.class));\n        fbom.setType(type);\n        fusionComponentRepository.save(fbom);\n        return fbom.convert(FusionComponentDto.class);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionComponent> findLastByPartNumber(String partNumber, String revisionId) {\n        return fusionComponentRepository.findByPartNumberAndRevisionId(partNumber,revisionId);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionComponent> findLastByPartNumber(String partNumber) {\n        return fusionComponentRepository.findLastByPartNumber(partNumber);\n    }\n\n    public FusionComponentRel addChild(FusionBom bom, FusionComponent component, FusionComponent relatedEntity) {\n        return addChild(bom, component, relatedEntity,1d);\n    }\n\n    public FusionComponentRel addChild(FusionBom bom, FusionComponent parent, FusionComponent child, Double quantity) {\n        Optional<FusionComponentRel> relationshipOpt = repository.findChildrenForBom(parent.getFusionId(),parent.getRevisionId(),bom.getFusionId(),bom.getRevisionId())\n                .filter(f -> f.getBomId().equals(bom.getFusionId())&&f.getBomRevisionId().equals(bom.getRevisionId()) &&\n                f.getFusionChildId().equals(child.getFusionId()) && f.getChildRevisionId().equals(child.getRevisionId())&&\n                f.getFusionParentId().equals(parent.getFusionId())&&f.getParentRevisionId().equals(parent.getRevisionId())).findFirst();\n\n        Optional<FusionComponentRel> checkReverse = repository.findChildrenForBom(child.getFusionId(),child.getRevisionId(),bom.getFusionId(),bom.getRevisionId())\n                .filter(f -> f.getBomId().equals(bom.getFusionId()) && f.getBomRevisionId().equals(bom.getRevisionId())&&\n                        f.getFusionChildId().equals(parent.getFusionId()) && f.getChildRevisionId().equals(parent.getRevisionId())&&\n                        f.getFusionParentId().equals(child.getFusionId())&&f.getParentRevisionId().equals(child.getRevisionId())).findFirst();\n        FusionComponentRel relationship;\n        if (checkReverse.isPresent()){\n            throw new BadRequest(\"Attempt to add cyclomatic node\");\n        }\n        if (relationshipOpt.isPresent()) {\n            relationship = relationshipOpt.get();\n            relationship.setQuantity(relationshipOpt.get().getQuantity() + quantity);\n\n        } else {\n            relationship = new FusionComponentRel();\n            relationship.setParent(parent);\n            relationship.setBom(bom);\n            relationship.setChild(child);\n            relationship.setQuantity(quantity);\n        }\n\n        FusionComponentRel saved = repository.save(relationship);\n\n        if (child.isRoot()) {\n            fusionBomRepository.findByRoot(child.getFusionId(), child.getRevisionId())\n                .ifPresent(childBom -> {\n                    if (!bom.getFusionId().equals(childBom.getFusionId()) || !bom.getRevisionId().equals(childBom.getRevisionId())) {\n                        fusionBomRelRepository.findRelation(bom.getFusionId(), bom.getRevisionId(), childBom.getFusionId(), childBom.getRevisionId())\n                                .map(rel -> {\n                                    rel.setQuantity(saved.getQuantity());\n                                    return fusionBomRelRepository.save(rel);\n                                })\n                                .orElseGet(() -> {\n                                    FusionBomRel r = new FusionBomRel();\n                                    r.setParentBom(bom);\n                                    r.setChildBom(childBom);\n                                    r.setQuantity(saved.getQuantity());\n                                    return fusionBomRelRepository.save(r);\n                                });\n                    }\n                });\n        }\n\n        return saved;\n    }\n\n    public Stream<FusionComponentRel> getChildren(FusionComponent component, FusionBom bom){\n        return repository.findChildrenForBom(component.getFusionId(),component.getRevisionId(),bom.getFusionId(),bom.getRevisionId());\n    }\n    @Transactional\n    public FusionComponent create(@NotNull FusionComponentDto dto,@NotNull FusionBom bom) {\n        Optional<FusionComponent> candidate = findLastByPartNumber(dto.getPartNumber(),dto.getRevisionId());\n        FusionComponent item;\n        if(candidate.isPresent()){\n            item =  candidate.get();\n        }else {\n            item = dto.convert(FusionComponent.class);\n            if (!item.getPhysicalProperties().isEmpty()) {\n                for (FusionPhysicalProperty property : item.getPhysicalProperties()) {\n                    if (property.getMaterial() != null) {\n                        Material material = materialRepository.findById(property.getMaterial().getId()).orElseGet(() -> {\n                            Material m = property.getMaterial();\n                            return materialRepository.save(m);\n                        });\n                        property.setMaterial(material);\n                    }\n                }\n            }\n            item = typeDetector.autodetectType(item);\n            item = fusionComponentRepository.save(item);\n        }\n\n        FusionComponentDto parent = dto.getParent();\n        if (!dto.isRoot() && (dto.getParent()==null||dto.getParent().getFusionId()==null)) {\n            throw new BadRequest(\"Component must have to be root or has a parent\");\n        } else  if(parent != null && parent.getFusionId() != null){\n            Optional<FusionComponent> parentItem = fusionComponentRepository.findById(FusionId.id(parent.getFusionId(),parent.getRevisionId()));\n            FusionComponent p = parentItem.orElseThrow(() -> new NotFoundException(parent.getFusionId(), FusionComponent.class));\n            addChild(bom, p, item);\n        }\n\n        return item;\n    }\n    @Valid\n    @Transactional\n    public FusionComponent addChildById(@NotNull FusionBom bom, @NotNull FusionId childId, @NotNull FusionId parentId) {\n        FusionComponent item = findComponentByIdOrThrow(childId);\n        FusionComponent parent = findComponentByIdOrThrow(parentId);\n        addChild(bom, parent, item);\n        fusionComponentRepository.save(item);\n        return item;\n    }\n\n    @Transactional(readOnly = true)\n    public FusionComponent findComponentByIdOrThrow(@NotNull FusionId fusionId){\n        return fusionComponentRepository.findById(fusionId)\n                .orElseThrow(() -> new NotFoundException(fusionId, FusionComponent.class));\n    }\n\n    @Transactional\n    public FusionComponentDto merge(@NotNull String sourceFusionId,\n                                    @NotNull String sourceRevisionId,\n                                    @NotNull String targetFusionId,\n                                    @NotNull String targetRevisionId) {\n        if(sourceFusionId.equals(targetFusionId) && sourceRevisionId.equals(targetRevisionId)) {\n            throw new BadRequest(\"Source and target cannot be the same\");\n        }\n\n        FusionComponentRel sourceRel = repository.findByChild(sourceFusionId, sourceRevisionId)\n                .findFirst()\n                .orElseThrow(() -> new NotFoundException(sourceFusionId, FusionComponentRel.class));\n        FusionComponentRel targetRel = repository.findByChild(targetFusionId, targetRevisionId)\n                .findFirst()\n                .orElseThrow(() -> new NotFoundException(targetFusionId, FusionComponentRel.class));\n\n        if(!sourceRel.getBomId().equals(targetRel.getBomId()) ||\n           !sourceRel.getBomRevisionId().equals(targetRel.getBomRevisionId())) {\n            throw new BadRequest(\"Both items must belong to the same BOM revision\");\n        }\n\n        if(!sourceRel.getFusionParentId().equals(targetRel.getFusionParentId()) ||\n           !sourceRel.getParentRevisionId().equals(targetRel.getParentRevisionId())) {\n            throw new BadRequest(\"Cannot merge items from different assemblies\");\n        }\n\n        Double newQty =\n                (targetRel.getQuantity() == null ? 0d : targetRel.getQuantity()) +\n                (sourceRel.getQuantity() == null ? 0d : sourceRel.getQuantity());\n\n        targetRel.setQuantity(newQty);\n        repository.save(targetRel);\n        repository.delete(sourceRel);\n\n        FusionComponentDto dto = targetRel.getChild().convert(FusionComponentDto.class);\n        dto.setQuantity(newQty);\n        return dto;\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/ComponentGroupService.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.database.repo.ComponentGroupRepository;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport com.ua.crow.service.graph.AbstractTreeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n\n@Service\npublic class ComponentGroupService extends AbstractTreeService<ComponentGroup, Long> {\n\n    private final ComponentGroupRepository repository;\n\n    @Autowired\n    public ComponentGroupService(ComponentGroupRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<ComponentGroupDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(ComponentGroupDto.class));\n    }\n\n    @Override\n    protected CrudRepository<ComponentGroup, Long> getRepository() {\n        return repository;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/PartNumberProvider.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.PartNumberPool;\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.repo.PartNumberPoolRepository;\nimport com.ua.crow.plm.service.engbom.BomService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomManagementService;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport jakarta.validation.constraints.NotBlank;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Date;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Service\npublic class PartNumberProvider {\n    @Autowired\n    PartNumberPoolRepository partNumberPool;\n\n    @Autowired\n    BomService bomService;\n\n    @Autowired\n    ComponentService service;\n\n\n\n    @Autowired\n    FusionBomManagementService fusionBomService;\n\n    @Autowired\n    ComponentService componentService;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n\n\n\n    public Optional<PartNumberReference> findOrCreate(Optional<String> partNumber) {\n        if(partNumber.isPresent()&&!\"\".equals(partNumber.get())){\n            return find(partNumber.get()).or(() -> Optional.of(issue()));\n        }else {\n            return Optional.of(issue());\n        }\n    }\n\n    @Transactional\n    public PartNumberReference issue() {\n        PartNumberPool pool = new PartNumberPool();\n        pool.setIssueDate(new Date());\n        PartNumberPool pn = partNumberPool.save(pool);\n        PartNumberReference ref = new PartNumberReference();\n        ref.setPartNumber(pn.getId().toString());\n        ref.setReferenceType(PartNumberReferenceType.POOL);\n        return ref;\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstBom(@NotBlank String partNumber) {\n        return findBoms(partNumber).findFirst();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstFusionBom(@NotBlank String partNumber) {\n        return findFusionBoms(partNumber).findFirst();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstComponent(@NotBlank String partNumber) {\n        return findComponents(partNumber).findFirst();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstFusionBomItem(@NotBlank String partNumber) {\n        return findFusionBomItems(partNumber);\n    }\n\n    @Transactional\n    public Stream<PartNumberReference> findBoms(@NotBlank String partNumber) {\n        return bomService.findByPartNumber(partNumber)\n                .map(b -> b.convert(PartNumberReference.class))\n                .toList()\n                .stream();\n    }\n\n    @Transactional\n    public Stream<PartNumberReference> findFusionBoms(@NotBlank String partNumber) {\n        return fusionBomService.readByPartNumber(partNumber)\n                .map(fb -> fb.convert(PartNumberReference.class))\n                .toList()\n                .stream();\n    }\n\n    @Transactional\n    public Stream<PartNumberReference> findComponents(@NotBlank String partNumber) {\n        return componentService.findByPartNumber(partNumber)\n                .map(c -> c.convert(PartNumberReference.class))\n                .toList()\n                .stream();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFusionBomItems(@NotBlank String partNumber) {\n        return fusionBomItemService.findLastByPartNumber(partNumber)\n                .map(fusionBomItem -> fusionBomItem.convert(PartNumberReference.class));\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> find(String partNumber) {\n        return findFirstFusionBomItem(partNumber)\n                .or(() -> findFirstFusionBom(partNumber))\n                .or(() -> findFirstComponent(partNumber))\n                .or(() -> findFirstBom(partNumber))\n                .or(() -> findInPool(partNumber).map(p -> convert(p)));\n    }\n\n    private Optional<PartNumberPool> findInPool(String partNumber) {\n        try {\n            Long id = Long.valueOf(partNumber);\n            return partNumberPool.findById(id);\n        }catch (Exception e){\n            return Optional.empty();\n        }\n\n    }\n\n    private PartNumberReference convert(PartNumberPool p) {\n        PartNumberReference ref = new PartNumberReference();\n        ref.setReferenceType(PartNumberReferenceType.POOL);\n        ref.setPartNumber(p.getId().toString());\n        return ref;\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/PropertyTypeProvider.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeRepository;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Service;\n\nimport jakarta.annotation.PostConstruct;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\n@Lazy\npublic class PropertyTypeProvider {\n\n    private final EngineeringBomItemPropertyTypeRepository repository;\n    private final Map<String, BomItemPropertyType> cache = new HashMap<>();\n\n    public PropertyTypeProvider(EngineeringBomItemPropertyTypeRepository repository) {\n        this.repository = repository;\n    }\n\n    @PostConstruct\n    public void init() {\n        repository.findAll().forEach(pt -> cache.put(pt.getName(), pt));\n    }\n\n    public BomItemPropertyType get(String name) {\n        return cache.get(name);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/RelationshipCache.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.database.active.BomComponentRelId;\nimport com.ua.crow.plm.database.active.ComponentPartRelationshipId;\nimport com.ua.crow.plm.database.active.ComponentRel;\nimport jakarta.annotation.PreDestroy;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component\npublic class RelationshipCache {\n    private final ThreadLocal<Map<ComponentPartRelationshipId, ComponentRel>> cache = ThreadLocal.withInitial(HashMap::new);\n    private final ThreadLocal<Map<BomComponentRelId, BomComponentRel>> processedBomRels = ThreadLocal.withInitial(HashMap::new);\n\n\n    public Map<ComponentPartRelationshipId, ComponentRel> getProcessedComponentRels() {\n        return cache.get();\n    }\n    public Map<BomComponentRelId, BomComponentRel> getProcessedBomRels() {\n        return processedBomRels.get();\n    }\n\n\n\n\n\n\n    @PreDestroy\n    public void clear() {\n        cache.remove();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/QuantitiveComponent.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport lombok.Data;\nimport org.springframework.beans.BeanUtils;\n\n@Data\npublic class QuantitiveComponent extends ComponentActiveRelease {\n    private Double quantity;\n\n    public QuantitiveComponent() {\n        super();\n    }\n\n    public QuantitiveComponent(ComponentActiveRelease componentActiveRelease) {\n        BeanUtils.copyProperties(componentActiveRelease, this);\n    }\n\n    public QuantitiveComponent(ComponentActiveRelease componentActiveRelease,Double quantity) {\n        BeanUtils.copyProperties(componentActiveRelease, this);\n        this.quantity = quantity;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ActiveReleaseProductService.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.plm.database.active.CompleteSet;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.repo.ActiveReleaseProductRepository;\nimport com.ua.crow.plm.database.repo.CompleteSetRepository;\nimport com.ua.crow.plm.database.repo.ReleasedProductRepository;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport static com.ua.crow.plm.database.released.ReleasableId.releasableId;\n\n@Service\npublic class ActiveReleaseProductService {\n\n    @Autowired\n    private ActiveReleaseProductRepository activeReleaseProductRepository;\n    @Autowired\n    private ReleasedProductRepository releasedProductRepository;\n\n    @Autowired\n    CompleteSetRepository completeSetRepository;\n\n    @Value(\"${tempdir.url}\")\n    String tempBufferAddress;\n\n    @Autowired\n    MinioService minioService;\n\n    public Stream<ProductActiveRelease> findAll(boolean deleted) {\n        if(deleted) {\n            return StreamSupport.stream(activeReleaseProductRepository.findAll().spliterator(),false);\n        }else {\n            return StreamSupport.stream(activeReleaseProductRepository.findByDeletedFalse().spliterator(),false);\n        }\n    }\n\n    public Optional<ProductActiveRelease> findById(Long id) {\n        Optional<ProductActiveRelease> activeRelease = activeReleaseProductRepository.findById(releasableId(id));\n        return activeRelease;\n    }\n\n\n    @Transactional\n    public ProductActiveRelease createProduct(ProductActiveReleaseDto dto){\n        ProductActiveRelease productActiveRelease = dto.convert(ProductActiveRelease.class);\n        productActiveRelease = activeReleaseProductRepository.save(productActiveRelease);\n        if(dto.getThumbnailUrl() != null) {\n            productActiveRelease.getAttachmentService().addThumbnail(dto.getThumbnailUrl());\n        }\n        CompleteSet defaultCompleteSet = new CompleteSet();\n        defaultCompleteSet.setName(\"default\");\n        completeSetRepository.save(defaultCompleteSet);\n\n        productActiveRelease.setDefaultCompleteSet(defaultCompleteSet);\n        activeReleaseProductRepository.save(productActiveRelease);\n\n        return productActiveRelease;\n    }\n\n    @Transactional\n    public ProductActiveRelease updateProduct(ProductActiveRelease productActiveRelease) {\n        ProductActiveRelease savedProductActiveRelease = activeReleaseProductRepository.save(productActiveRelease);\n        return savedProductActiveRelease;\n    }\n    public void deleteById(Long id) {\n        activeReleaseProductRepository.deleteById(releasableId(id));\n    }\n\n\n    public Optional<ProductActiveRelease> findByName(String name) {\n        return activeReleaseProductRepository.findByName(name);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/FusionBomCsvAttachment.java =====\npackage com.ua.crow.plm.service.product;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FusionBomCsvAttachment {\n    byte[] file;\n\n    String path;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ProductService.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.active.CompleteSet;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.ActiveReleaseProductRepository;\nimport com.ua.crow.plm.database.repo.ReleasedProductRepository;\nimport com.ua.crow.service.NotFoundException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport static com.ua.crow.plm.database.released.ReleasableId.releasableId;\n\n@Service\npublic class ProductService {\n    @Autowired\n    ActiveReleaseProductRepository activeReleaseProductRepository;\n    @Autowired\n    ReleasedProductRepository releasedProductRepository;\n\n    public ProductActiveRelease findById(Long id){\n        return activeReleaseProductRepository.findById(releasableId(id)).orElseThrow(()->new NotFoundException(id, ProductService.class));\n    }\n\n\n    @Transactional(readOnly = true)\n    public List<ReleaseVersion> getAllVersions(Long id) {\n        ReleaseVersion current = new ReleaseVersion();\n        current.setId(0L);\n        current.setVer(0d);\n        current.setName(\"HEAD\");\n        return Stream.concat(Stream.of(current),\n                releasedProductRepository.findAllProductReleases(id, false).stream()\n                        .map(product -> product.getReleaseVersion()))\n                .toList();\n    }\n\n    @Transactional(readOnly = true)\n    public CompleteSet getDefaultCompleteSet(Long productId){\n        return activeReleaseProductRepository.findById(ReleasableId.releasableId(productId)).orElseThrow(()->new NotFoundException(\"Default complete set is missing\")).getDefaultCompleteSet();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ProductAttachmentServiceProvider.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.plm.database.base.ProductBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ProductAttachmentServiceProvider {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public ProductAttachmentService create(ProductBase product) {\n        // Создание нового экземпляра ProductAttachmentService с прототипом\n        return applicationContext.getBean(ProductAttachmentService.class, product);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ProductAttachmentService.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.base.ProductBase;\nimport com.ua.crow.plm.database.released.ProductReleased;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.Optional;\n\n@Service\n@Scope(\"prototype\")\npublic class ProductAttachmentService {\n    private final ProductBase product;\n\n    private static final String THUMB_FOLDER = \"thumbnails/\";\n\n\n    @Autowired\n    private MinioService minio;\n\n    public ProductAttachmentService(ProductBase product) {\n        this.product = product;\n    }\n\n    public String getProductFolder() {\n        if (product.getId()==null){\n            throw new NullPointerException(\"Product must be saved!\");\n        }\n        String path;\n        if(product instanceof ProductActiveRelease) {\n            path = new StringBuilder().append(product.getId()).append(\"_\").append(0).append(\"_\").append(product.getName()).append('/').toString();\n        }else {\n            ProductReleased released = (ProductReleased) product;\n            path = new StringBuilder().append(released.getId()).append(\"_\").append(released.getRelease_ver()).append(\"_\").append(released.getName()).append('/').toString();\n        }\n        return path;\n\n    }\n\n    public String getThumbFolderForProduct() {\n        return new StringBuilder().append(getProductFolder()).append(THUMB_FOLDER).toString();\n    }\n\n\n    public void addThumbnail(String thumbnailUrl) {\n        minio.uploadFileTemporaryStorage(Buckets.products,thumbnailUrl,getThumbFolderForProduct());\n    }\n\n    public void saveFusionBomCsv(Long id,byte[] csv) {\n        minio.put(Buckets.cad,getFusionBomFolder(id)+\"bom.csv\",new ByteArrayInputStream(csv),csv.length, \"text/csv\");\n\n    }\n\n    private String getFusionBomFolder(Long id) {\n        return new StringBuilder().append(getProductFolder()).append(id).append('/').toString();\n    }\n\n    public FusionBomCsvAttachment getFusionBomCsv(Long id) {\n        String objectId = getFusionBomFolder(id) + \"bom.csv\";\n        return new FusionBomCsvAttachment( minio.getObjectAsBytes(Buckets.cad,objectId),objectId);\n    }\n\n    public Optional<String> getFirstThumbnailUrl() {\n        return minio.getSignedUrlForTheFirstObjectInFolder(Buckets.products,getThumbFolderForProduct());\n    }\n\n\n    public void deleteFusionBomCsv(Long id) {\n        String objectId = getFusionBomFolder(id) + \"bom.csv\";\n        minio.delete(Buckets.cad,objectId);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/TypeDetector.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.repo.ItemTypeNameMappingRepository;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class TypeDetector {\n\n    private final ItemTypeNameMappingRepository itemTypeNameMappingRepository;\n    private final Map<String, ItemTypes> cache = new HashMap<>();\n\n    @Autowired\n    public TypeDetector(ItemTypeNameMappingRepository itemTypeNameMappingRepository) {\n        this.itemTypeNameMappingRepository = itemTypeNameMappingRepository;\n    }\n\n    @PostConstruct\n    public void init() {\n        List<ItemTypeNameMapping> allMappings = (List<ItemTypeNameMapping>) itemTypeNameMappingRepository.findAll();\n        for (ItemTypeNameMapping mapping : allMappings) {\n            cache.put(mapping.getName().toLowerCase(), mapping.getType());\n        }\n    }\n\n    public ItemTypes autodetectType(String val, ItemTypes def) {\n        if (val == null) {\n            return def;\n        }\n        for (String key : cache.keySet()) {\n            if (val.toLowerCase().contains(key)) {\n                return cache.get(key);\n            }\n        }\n        return def;\n    }\n\n    public FusionComponent autodetectType(FusionComponent item) {\n        if (item == null) {\n            return null;\n        }\n        if(item.isRoot()){\n            item.setType(ItemTypes.BOM);\n            return item;\n        }\n\n        ItemTypes detectedType = autodetectType(item.getPartName(), item.getType());\n\n        if (detectedType == item.getType()) {\n            detectedType = autodetectType(item.getDescription(), item.getType());\n        }\n\n        item.setType(detectedType);\n        return item;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomCrudService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.BomRelRepository;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.service.RelationshipCache;\nimport com.ua.crow.plm.service.product.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Map;\nimport java.util.Optional;\n\n@Service\npublic class BomCrudService {\n    @Autowired\n    EngineeringBomRepository engineeringBomRepository;\n    @Autowired\n    BomRelRepository bomRelRepository;\n    @Autowired\n    RelationshipCache cache;\n    @Autowired\n    ProductService productService;\n    @Transactional\n    public BomActiveRelease create(BomActiveRelease bom) {\n        bom.setRelease_ver(0L);\n        return engineeringBomRepository.save(bom);\n    }\n\n    @Transactional\n    public Optional<BomActiveRelease> readById(Long id) {\n        return engineeringBomRepository.findById(ReleasableId.releasableId(id))\n                .filter(b -> !b.isDeleted());\n    }\n\n\n    public void addChildToBom(BomActiveRelease bom, ComponentActiveRelease childComponent) {\n        addChildToBom(bom, childComponent, 1d);\n\n    }\n\n    public void addChildToBom(BomActiveRelease bom, ComponentActiveRelease childComponent,Double quantity) {\n        if(bom.getProduct()==null){\n            throw new RuntimeException(\"Invalid product\");\n        }\n        addChildToBom(bom, childComponent, quantity,productService.findById(bom.getProduct().getId()).getDefaultCompleteSet());\n    }\n\n    @Transactional\n    public void addChildToBom(BomActiveRelease bom, ComponentActiveRelease childComponent, Double quantity, CompleteSet completeSet) {\n        Map<BomComponentRelId, BomComponentRel> processed = cache.getProcessedBomRels();\n        BomComponentRelId id = new BomComponentRelId(bom.getId(),bom.getRelease_ver(),childComponent.getId(),childComponent.getRelease_ver(),completeSet.getId());\n        BomComponentRel currentTransaction = processed.get(id);\n        if (currentTransaction!=null){\n            currentTransaction.setQuantity(currentTransaction.getQuantity()+quantity);\n        }else {\n            currentTransaction = bomRelRepository.findById(id).or(()->{\n                BomComponentRel relationship = new BomComponentRel();\n                relationship.setParentBomId(bom.getId());\n                relationship.setParentBomReleaseVer(bom.getRelease_ver());\n                relationship.setChildId(childComponent.getId());\n                relationship.setChildReleaseVer(childComponent.getRelease_ver());\n                relationship.setQuantity(quantity);\n                relationship.setCompleteSetId(completeSet.getId());\n                return relationship.optional();\n            }).get();\n        }\n        processed.put(id,bomRelRepository.save(currentTransaction));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomItemPropertyTypeService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.repo.BomItemPropertyTypeRepository;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class BomItemPropertyTypeService {\n    private final BomItemPropertyTypeRepository repository;\n\n    @Autowired\n    public BomItemPropertyTypeService(BomItemPropertyTypeRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public List<BomItemPropertyType> findAll() {\n        return repository.findAll(Sort.by(\"id\"));\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<BomItemPropertyTypeDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(BomItemPropertyTypeDto.class));\n    }\n\n    @Transactional\n    public BomItemPropertyType save(BomItemPropertyType type) {\n        return repository.save(type);\n    }\n\n    @Transactional\n    public void deleteById(Long id) {\n        repository.deleteById(id);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomItemPropertyTypeGroupService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.database.repo.BomItemPropertyTypeGroupRepository;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class BomItemPropertyTypeGroupService {\n    private final BomItemPropertyTypeGroupRepository repository;\n\n    @Autowired\n    public BomItemPropertyTypeGroupService(BomItemPropertyTypeGroupRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public List<BomItemPropertyTypeGroup> findAll() {\n        return repository.findAll(Sort.by(\"id\"));\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<BomItemPropertyTypeGroupDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(BomItemPropertyTypeGroupDto.class));\n    }\n\n    @Transactional\n    public BomItemPropertyTypeGroup save(BomItemPropertyTypeGroup group) {\n        return repository.save(group);\n    }\n\n    @Transactional\n    public void deleteById(Long id) {\n        repository.deleteById(id);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.base.BaseRel;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.released.BomReleased;\nimport com.ua.crow.plm.database.released.ComponentReleased;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.database.repo.BomReleasedRepository;\nimport com.ua.crow.plm.database.repo.ComponentReleasedRepository;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.service.ComponentService;\nimport com.ua.crow.plm.service.QuantitiveComponent;\nimport com.ua.crow.plm.service.fusionbom.CadToEngBomConversionService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.*;\nimport java.util.stream.Stream;\n\n@Service\npublic class BomService {\n    @Autowired\n    private EngineeringBomRepository engineeringBomRepository;\n    @Autowired\n    BomCrudService bomCrudService;\n    @Autowired\n    ComponentService componentService;\n    @Autowired\n    BomReleasedRepository bomReleasedRepository;\n    @Autowired\n    ComponentReleasedRepository componentReleasedRepository;\n    @Autowired\n    CadToEngBomConversionService cadToEngBomConversionService;\n\n    @Transactional(readOnly = true)\n    public java.util.List<com.ua.crow.plm.database.ReleaseVersion> getAllVersions(Long id) {\n        com.ua.crow.plm.database.ReleaseVersion current = new com.ua.crow.plm.database.ReleaseVersion();\n        current.setId(0L);\n        current.setVer(0d);\n        current.setName(\"HEAD\");\n        return java.util.stream.Stream.concat(java.util.stream.Stream.of(current),\n                bomReleasedRepository.findAllBomReleases(id, false).stream()\n                        .map(com.ua.crow.plm.database.released.BomReleased::getReleaseVersion))\n                .toList();\n    }\n\n    @Transactional(readOnly = true)\n    public Stream<BomActiveRelease> findByPartNumber(@NotBlank String partNumber) {\n        return engineeringBomRepository.findByPartNumber(partNumber);\n    }\n    @Transactional(readOnly = true)\n    public List<EngineeringBomWoChildren> listByProductId(@NotNull Long productId, @NotNull Long releaseVer, Pageable pageable, boolean rootOnly) {\n        if (releaseVer == 0L) {\n            if (rootOnly) {\n                return engineeringBomRepository.findRootBomsByProductId(productId, releaseVer, pageable)\n                        .stream().map(b -> b.convert(EngineeringBomWoChildren.class)).toList();\n            }\n            return engineeringBomRepository.findBomsByProductId(productId, releaseVer, pageable)\n                    .stream().map(b -> b.convert(EngineeringBomWoChildren.class)).toList();\n        }\n        if (rootOnly) {\n            return bomReleasedRepository.findRootBomsByProductId(productId, releaseVer, pageable)\n                    .stream().map(this::convertReleasedBom).toList();\n        }\n        return bomReleasedRepository.findBomsByProductId(productId, releaseVer, pageable)\n                .stream().map(this::convertReleasedBom).toList();\n    }\n\n    public Stream<EngineeringBomWoChildren> listOfRootsByProductId(@NotNull Long productId, @NotNull Long releaseVer) {\n        if (releaseVer == 0L) {\n            return engineeringBomRepository.findRootBomsByProductId(productId, releaseVer)\n                    .map(b -> b.convert(EngineeringBomWoChildren.class));\n        }\n        return bomReleasedRepository.findRootBomsByProductId(productId, releaseVer)\n                .map(this::convertReleasedBom);\n    }\n\n    public Optional<EngineeringBomWoChildren> readShortDtoById(Long id, Long release) {\n        if (release == null || release == 0L) {\n            return engineeringBomRepository.findById(ReleasableId.releasableId(id))\n                    .filter(b -> !b.isDeleted())\n                    .map(b -> b.convert(EngineeringBomWoChildren.class));\n        }\n        return bomReleasedRepository.findById(new ReleasableId(id, release))\n                .filter(b -> !b.isDeleted())\n                .map(this::convertReleasedBom);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<BomActiveReleaseDto> readDtoTreeById(Long id, Long release) {\n        if (release == null || release == 0L) {\n            return bomCrudService.readById(id)\n                    .filter(b -> !b.isDeleted())\n                    .map(bom -> {\n                        BomActiveReleaseDto dto = bom.convert(BomActiveReleaseDto.class);\n                        java.util.Set<ComponentActiveReleaseDto> children = bom.getChildren().stream()\n                                .map(rel -> readComponentsrecursive(rel.getChild()))\n                                .collect(java.util.stream.Collectors.toSet());\n                        dto.setChildren(children);\n                        return dto;\n                    });\n        }\n        return bomReleasedRepository.findById(new ReleasableId(id, release))\n                .filter(b -> !b.isDeleted())\n                .map(bom -> {\n                    BomActiveReleaseDto dto = new BomActiveReleaseDto();\n                    dto.setId(bom.getId());\n                    dto.setName(bom.getName());\n                    dto.setPartNumber(bom.getPartNumber());\n                    dto.setDescription(bom.getDescription());\n                    dto.setFusionVersion(bom.getFusionVersion());\n                    dto.setFusionId(bom.getFusionId());\n                    dto.setLibraryItem(bom.isLibraryItem());\n                    dto.setFusionRevisionId(bom.getFusionRevisionId());\n                    dto.setConfiguration(bom.isConfiguration());\n                    dto.setConfiguredDesign(bom.isConfiguredDesign());\n                    dto.setConsistent(bom.isConsistent());\n                    java.util.Set<ComponentActiveReleaseDto> children = componentReleasedRepository\n                            .findByParentBom(id, release)\n                            .stream()\n                            .map(this::readComponentsrecursive)\n                            .collect(java.util.stream.Collectors.toSet());\n                    dto.setChildren(children);\n                    return dto;\n                });\n    }\n\n    @Transactional\n    public List<ComponentActiveReleaseDto> readComponents(Long id, Long release) {\n        if (release == null || release == 0L) {\n            BomActiveRelease bomActiveRelease = bomCrudService.readById(id)\n                    .orElseThrow(() -> new NotFoundException(id, BomActiveRelease.class));\n            List<ComponentActiveReleaseDto> children = bomActiveRelease.getChildren().stream()\n                    .map(c -> readComponentsrecursive(c.getChild()))\n                    .toList();\n            ComponentActiveReleaseDto root = convertBomToComponent(bomActiveRelease, children);\n            return java.util.List.of(root);\n        }\n        BomReleased bom = bomReleasedRepository.findById(new ReleasableId(id, release))\n                .orElseThrow(() -> new NotFoundException(id, BomReleased.class));\n        List<ComponentActiveReleaseDto> children = componentReleasedRepository.findByParentBom(id, release)\n                .stream()\n                .map(this::readComponentsrecursive)\n                .toList();\n        ComponentActiveReleaseDto root = convertBomToComponent(bom, children);\n        return java.util.List.of(root);\n    }\n\n    private ComponentActiveReleaseDto convertBomToComponent(BomActiveRelease bom, java.util.List<ComponentActiveReleaseDto> children) {\n        ComponentActiveReleaseDto dto = new ComponentActiveReleaseDto();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        dto.setDescription(bom.getDescription());\n        dto.setItemType(ItemTypes.BOM.name());\n        dto.setParts(children);\n        return dto;\n    }\n\n    private ComponentActiveReleaseDto convertBomToComponent(BomReleased bom, java.util.List<ComponentActiveReleaseDto> children) {\n        ComponentActiveReleaseDto dto = new ComponentActiveReleaseDto();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        dto.setDescription(bom.getDescription());\n        dto.setItemType(ItemTypes.BOM.name());\n        dto.setParts(children);\n        return dto;\n    }\n\n\n    private ComponentActiveReleaseDto readComponentsrecursive(ComponentActiveRelease comp) {\n        ComponentActiveReleaseDto res = comp.convert(ComponentActiveReleaseDto.class);\n        for (ComponentRel rel : comp.getParts()) {\n            ComponentActiveReleaseDto child = readComponentsrecursive(rel.getChild());\n            child.setQuantity(rel.getQuantity());\n            res.getParts().add(child);\n        }\n        return res;\n    }\n\n    @Transactional\n    public Stream<QuantitiveComponent> shortList(Long id) {\n        HashMap<String, QuantitiveComponent> shortList = new HashMap<>();\n        BomActiveRelease bom = bomCrudService.readById(id).orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        for (BomComponentRel c : bom.getChildren()) {\n            shortList(c, shortList);\n        }\n        return shortList.values().stream();\n    }\n\n\n    private void shortList(BaseRel root, HashMap<String, QuantitiveComponent> shortList) {\n        QuantitiveComponent i = shortList.get(root.getChild().getPartNumber());\n        if (i != null) {\n            i.setQuantity(i.getQuantity() + 1);\n        } else {\n            shortList.put(root.getChild().getPartNumber(), new QuantitiveComponent(root.getChild(), root.getQuantity()));\n        }\n        for (ComponentRel item : root.getChild().getParts()) {\n            shortList(item, shortList);\n        }\n    }\n\n    @Transactional\n    public BomActiveRelease importFusionBom(FusionId id) {\n        return cadToEngBomConversionService.importFusionBom(id);\n    }\n\n    @Transactional\n    public Optional<BomActiveReleaseDto> readDtoById(Long id) {\n        return bomCrudService.readById(id).orElseThrow(()->new NotFoundException(id,BomActiveRelease.class)).convert(BomActiveReleaseDto.class).optional();\n    }\n\n    private EngineeringBomWoChildren convertReleasedBom(BomReleased bom) {\n        EngineeringBomWoChildren dto = new EngineeringBomWoChildren();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        return dto;\n    }\n\n    private ComponentActiveReleaseDto readComponentsrecursive(ComponentReleased comp) {\n        ComponentActiveReleaseDto res = new ComponentActiveReleaseDto();\n        res.setId(comp.getId());\n        res.setName(comp.getName());\n        res.setPartNumber(comp.getPartNumber());\n        if (comp.getParts() != null) {\n            List<ComponentActiveReleaseDto> children = comp.getParts().stream()\n                    .map(this::readComponentsrecursive).toList();\n            res.setParts(children);\n        }\n        return res;\n    }\n\n    @Transactional\n    public BomActiveRelease softDelete(Long id, boolean deleteComponents) {\n        BomActiveRelease bom = bomCrudService.readById(id)\n                .orElseThrow(() -> new NotFoundException(id, BomActiveRelease.class));\n        if (deleteComponents) {\n            // Use a defensive copy to avoid ConcurrentModificationException when\n            // Hibernate flushes updates while iterating over the collection\n            for (BomComponentRel rel : new java.util.ArrayList<>(bom.getChildren())) {\n                ComponentActiveRelease child = rel.getChild();\n                if (child != null && !child.isDeleted()) {\n                    child.setDeleted(true);\n                    componentService.save(child);\n                }\n            }\n        }\n        bom.setDeleted(true);\n        engineeringBomRepository.save(bom);\n        return bom;\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/ItemTypeNameMappingService.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.database.repo.ItemTypeNameMappingRepository;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.StreamSupport;\n\n@Service\npublic class ItemTypeNameMappingService {\n    private final ItemTypeNameMappingRepository repository;\n\n    @Autowired\n    public ItemTypeNameMappingService(ItemTypeNameMappingRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public List<ItemTypeNameMapping> findAll() {\n        return StreamSupport.stream(repository.findAll().spliterator(), false).toList();\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<ItemTypeNameMappingDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(ItemTypeNameMappingDto.class));\n    }\n\n    @Transactional\n    public ItemTypeNameMapping save(ItemTypeNameMapping mapping) {\n        return repository.save(mapping);\n    }\n\n    @Transactional\n    public void deleteById(Long id) {\n        repository.deleteById(id);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/ComponentService.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.ComponentRelRepository;\nimport com.ua.crow.plm.database.repo.ComponentRepository;\nimport com.ua.crow.plm.database.repo.ComponentPropertiesRepository;\nimport com.ua.crow.plm.dto.requests.ComponentRequestDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.service.product.ProductService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Stream;\n\n@Service\npublic class ComponentService {\n    @Autowired\n    ComponentRepository componentRepository;\n\n    @Autowired\n    ComponentPropertiesRepository propertiesRepository;\n\n    @Autowired\n    ProductService productService;\n    @Autowired\n    private ComponentRelRepository componentRelRepo;\n\n\n    @Transactional\n    public Stream<ComponentActiveRelease> findByPartNumber(String partNumber) {\n        return componentRepository.findByPartNumber(partNumber);\n    }\n\n\n    @Transactional\n    public ComponentActiveRelease merge(@NotNull Long itemId, @NotNull Set<Long> items) {\n        ComponentActiveRelease item = componentRepository.findById(ReleasableId.releasableId(itemId))\n                .orElseThrow(() -> new NotFoundException(itemId, FusionComponent.class));\n        Double qty = 1d + items.size();\n        for (Long i : items) {\n            ComponentActiveRelease itemToMerge = componentRepository.findById(ReleasableId.releasableId(i))\n                    .orElseThrow(() -> new NotFoundException(itemId, FusionComponent.class));\n            itemToMerge.setDescription(item.getDescription());\n            itemToMerge.setPartNumber(item.getPartNumber());\n            itemToMerge.setName(item.getName());\n            itemToMerge.setItemType(item.getItemType());\n            componentRepository.save(itemToMerge);\n        }\n        return item;\n    }\n\n    @Transactional\n    public Optional<ComponentActiveRelease> findByPartNumberAndBomId(String partNumber, Long id) {\n        return componentRepository.findByPartNumberAndBomId(partNumber, id);\n    }\n\n    public Stream<ComponentActiveReleaseDto> list(ComponentRequestDto req) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Transactional\n    public ComponentActiveRelease save(ComponentActiveRelease child) {\n        return componentRepository.save(child);\n    }\n\n    @Autowired\n    RelationshipCache cache;\n\n\n    @Transactional\n    public void addChild(ComponentActiveRelease parent, ComponentActiveRelease child, double quantity, BomActiveRelease bom) {\n        addChild(parent, child, quantity, bom, productService.getDefaultCompleteSet(bom.getProduct().getId()));\n    }\n\n\n    private void addChild(ComponentActiveRelease parent, ComponentActiveRelease child, double quantity, BomActiveRelease bom, CompleteSet completeSet) {\n        Map<ComponentPartRelationshipId, ComponentRel> processed = cache.getProcessedComponentRels();\n        if (bom == null || bom.getId() == null || completeSet == null) {\n            throw new RuntimeException(\"Complete set and bom should not be empty\");\n        }\n\n\n        ComponentPartRelationshipId id = new ComponentPartRelationshipId(parent.getId(), parent.getRelease_ver(),\n                child.getId(), child.getRelease_ver(), bom.getId(), bom.getRelease_ver(), completeSet.getId());\n        ComponentRel existingTransactionRel = processed.get(id);\n\n        if (existingTransactionRel != null) {\n            existingTransactionRel.setQuantity(existingTransactionRel.getQuantity() + quantity);\n        } else if (existingTransactionRel == null) {\n            existingTransactionRel = componentRelRepo.findById(id).or(() -> {\n                ComponentRel relationship = new ComponentRel();\n                relationship.setBomId(bom.getId());\n                relationship.setBomVersion(bom.getRelease_ver());\n                relationship.setCompleteSetId(completeSet.getId());\n                relationship.setParent(parent);\n                relationship.setParentId(parent.getId());\n                relationship.setParentReleaseVer(parent.getRelease_ver());\n                relationship.setChildId(child.getId());\n                relationship.setChildReleaseVer(child.getRelease_ver());\n                relationship.setQuantity(quantity);\n                return Optional.of(relationship);\n            }).get();\n        }\n\n\n        processed.put(id, componentRelRepo.save(existingTransactionRel));\n\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomFileService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\n\n@Service\npublic class FusionBomFileService {\n\n    private static final String STEP_NAME = \"model.step\";\n\n    @Autowired\n    private MinioService minioService;\n\n    @Autowired\n    private FusionBomRepository fusionBomRepository;\n\n    private String getFolder(FusionId id) {\n        return new StringBuilder()\n                .append(\"fusionbom/\")\n                .append(id.getFusionId())\n                .append('_')\n                .append(id.getRevisionId())\n                .append('/')\n                .toString();\n    }\n\n    public void uploadStepFile(FusionId id, MultipartFile file) throws IOException {\n        String objectName = getFolder(id) + STEP_NAME;\n        minioService.put(Buckets.cad, objectName, file.getInputStream(), file.getSize(), file.getContentType());\n    }\n\n    public String getStepFileUrl(FusionBom bom) {\n        String objectName = getFolder(FusionId.id(bom.getFusionId(), bom.getRevisionId())) + STEP_NAME;\n        if (!minioService.exist(Buckets.cad, objectName)) {\n            return null;\n        }\n        return minioService.sign(Buckets.cad, objectName);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomTreeService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionComponentRel;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.HashSet;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Stream;\nimport java.util.stream.Collectors;\n\n@Service\n@Validated\npublic class FusionBomTreeService {\n\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n    @Autowired\n    FusionComponentRelRepository componentRelRepository;\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId){\n        return readFullTree(fusionId, false);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId, boolean includeBodies){\n        return fusionBomRepository.findById(fusionId)\n            .filter(fb -> !fb.isDeleted() && fb.isConsistent())\n            .map(fb -> buildFullTreeDto(fb, includeBodies));\n    }\n\n    public Stream<FusionComponentRel> findChildrenForBom(FusionComponent parent, @NotNull FusionBom bom) {\n        return componentRelRepository.findChildrenForBom(parent.getFusionId(),parent.getRevisionId(), bom.getFusionId(),bom.getRevisionId());\n    }\n\n    private FusionBomDto buildFullTreeDto(FusionBom fusionBom, boolean includeBodies) {\n        FusionBomDto dto = fusionBom.convert(FusionBomDto.class);\n        FusionComponent rootComponent = fusionBom.getRoot();\n        dto.setRootPart(convertComponentTree(rootComponent, fusionBom, new HashSet<>(), includeBodies));\n        return dto;\n    }\n\n    private FusionComponentDto convertComponentTree(FusionComponent component, FusionBom bom, Set<String> visited, boolean includeBodies) {\n        if (visited.contains(component.getFusionId())) {\n            throw new IllegalStateException(\"Cycle detected for component ID: \" + component.getFusionId());\n        }\n        visited.add(component.getFusionId());\n        FusionComponentDto componentDto = component.convert(FusionComponentDto.class);\n        if (includeBodies) {\n            componentDto.setBodies(component.getPhysicalProperties().stream()\n                    .map(p -> p.convert(Body.class))\n                    .collect(Collectors.toSet()));\n        }\n        fusionBomItemService.getChildren(component, bom).forEach(childRel -> {\n            FusionComponentDto childDto = convertComponentTree(childRel.getChild(), bom, visited, includeBodies);\n            childDto.setQuantity(childRel.getQuantity());\n            componentDto.addChild(childDto);\n        });\n\n        visited.remove(component.getFusionId());\n        return componentDto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomImportService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.ResourceAlreadyExist;\nimport jakarta.validation.constraints.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n\n@Service\npublic class FusionBomImportService {\n    @Autowired\n    FusionBomManagementService fusionBomService;\n    @Autowired\n    FusionBomFacadeService fusionBomFacadeService;\n\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n\n    @Autowired\n    FusionComponentRelRepository fusionComponentRelRepository;\n\n    private static final Logger logger = LoggerFactory.getLogger(FusionBomImportService.class);\n    private static final int TRANSACTION_TIMEOUT_SECONDS = 60;  // Example timeout duration\n\n\n    @Autowired\n    private JpaTransactionManager tm;\n\n\n    @Transactional(propagation = Propagation.REQUIRED)\n    public FusionBomDto save(@NotNull FusionBomDto dto) {\n        FusionId fusionId = FusionId.id(dto.getFusionId(), dto.getRevisionId());\n        Optional<FusionBom> fbo = checkIfExists(fusionId);\n        if (fbo.isPresent()) {\n            FusionBom existing = fbo.get();\n            if (dto.getProduct() != null) {\n                existing.setProduct(dto.getProduct().convert(ProductActiveRelease.class));\n            }\n            existing.setDocumentName(dto.getDocumentName());\n            existing.setVersion(dto.getVersion());\n            existing.setProcessed(dto.isProcessed());\n            existing.setEngineeringBomId(dto.getEngineeringBomId());\n            existing.setDescription(dto.getDescription());\n            existing.setLibraryItem(dto.isLibraryItem());\n            existing.setPartNumber(dto.getPartNumber());\n            existing.setConfiguration(dto.isConfiguration());\n            existing.setConfiguredDesign(dto.isConfiguredDesign());\n            existing.setDeleted(dto.isDeleted());\n            existing.setName(dto.getName());\n            if (dto.getRootPart() != null) {\n                FusionComponentDto rootDto = dto.getRootPart();\n                rootDto.setRoot(true);\n                FusionComponent root = fusionBomService.updateItem(rootDto.convert(FusionComponent.class), true);\n                existing.setRoot(root);\n            }\n            FusionBom saved = fusionBomRepository.save(existing);\n            fusionBomService.ensureBomRelations(saved);\n            return saved.convert(FusionBomDto.class);\n        } else {\n            return fusionBomFacadeService.create(dto);\n        }\n    }\n\n    @Transactional\n    public Optional<FusionBom> checkIfExists(FusionId fusionId) {\n        Optional<FusionBom> bom = fusionBomRepository.findById(fusionId);\n        return bom;\n\n    }\n\n    public FusionComponent saveItem(FusionComponentDto dto) {\n        FusionId componentId = FusionId.id(dto.getFusionId(), dto.getRevisionId());\n        Optional<FusionComponent> existing = fusionBomService.fusionComponentRepository.findById(componentId);\n        if (existing.isPresent()) {\n            return fusionBomService.updateItem(dto.convert(FusionComponent.class), true);\n        }\n        return fusionBomService.createItem(dto);\n\n    }\n\n\n    public FusionComponent addChildItem(AddChildRequest dto) {\n        return fusionBomService.addChildItem(dto);\n    }\n\n    public FusionBom delete(FusionId id) {\n        return fusionBomService.hardDeleteBomRelations(id);\n    }\n\n    public FusionBomDto commitTransaction(FusionId id) {\n        return fusionBomService.commit(id).convert(FusionBomDto.class);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/CadToEngBomConversionService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionComponentRel;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.fusion.FusionBomEngineeringBom;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.service.engbom.BomCrudService;\nimport com.ua.crow.plm.service.ComponentService;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport com.ua.crow.plm.service.RelationshipCache;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CadToEngBomConversionService {\n    @Autowired\n    FusionBomManagementService fusionBomService;\n\n    @Autowired\n    FusionBomTreeService fusionBomTreeService;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n\n    @Autowired\n    private EngineeringBomRepository engineeringBomRepository;\n\n    @Autowired\n    BomCrudService bomCrudService;\n\n    @Autowired\n    ComponentService componentService;\n\n    @Autowired\n    RelationshipCache relationshipCache;\n\n    private double toQuantity(Double quantity) {\n        return quantity == null ? 1d : quantity;\n    }\n\n    @Transactional\n    public BomActiveRelease importFusionBom(@NotNull FusionId id) {\n\n        FusionBom fb = fusionBomService.readById(id).orElseThrow(() -> new NotFoundException(id, FusionComponent.class));\n        BomActiveRelease ebom = bomCrudService.create(fb.convert(BomActiveRelease.class));\n        fb.setEngineeringBomId(ebom.getId());\n        ebom.getFusionBoms()\n            .add(new FusionBomEngineeringBom(fb, ebom,\n                \"Engineering BOM creation using Fusion 360 model\"));\n        fusionBomService.save(fb);\n        ebom.setRoot(true);\n        fusionBomItemService.getChildren(fb.getRoot(), fb).forEach(c -> {\n            ComponentActiveRelease component = convertToEngineeringBomItemRecursive(ebom, c, fb);\n            if (component != null) {\n                component.setParentBom(ebom);\n                bomCrudService.addChildToBom(ebom, component, toQuantity(c.getQuantity()));\n            }\n        });\n        ebom.setConsistent(true);\n        return engineeringBomRepository.save(ebom);\n    }\n\n    @Transactional(propagation = Propagation.REQUIRED)\n    public ComponentActiveRelease convertToEngineeringBomItemRecursive(BomActiveRelease bomParent,  FusionComponentRel fusionComponentRel, @NotNull FusionBom fusionBom) {\n        FusionComponent fusionComponent = fusionComponentRel.getChild();\n\n        if (fusionComponent.getType() == ItemTypes.NONE) {\n            return null;\n        }\n\n        ComponentActiveRelease component = componentService\n                .findByPartNumberAndBomId(fusionComponent.getPartNumber(), bomParent.getId())\n                .orElse(componentService.save(fusionComponent.convert(ComponentActiveRelease.class)));\n        component.setParentBom(bomParent);\n        switch (fusionComponent.getType()) {\n            case BOM -> {\n                BomActiveRelease childBom = fusionComponent.convert(BomActiveRelease.class);\n                childBom.setProduct(fusionBom.getProduct());\n                childBom.setParentComponent(component);\n                childBom = bomCrudService.create( childBom);\n                List<FusionComponentRel> children = fusionBomTreeService.findChildrenForBom(fusionComponent, fusionBom).collect(Collectors.toList());\n                for (FusionComponentRel f : children) {\n                    ComponentActiveRelease c = convertToEngineeringBomItemRecursive(childBom, f, fusionBom);\n                    if (c != null) {\n                        bomCrudService.addChildToBom(childBom, c, toQuantity(f.getQuantity()));\n                        componentService.addChild(component, c, toQuantity(f.getQuantity()), childBom);\n                    }\n                }\n                childBom = bomCrudService.create(childBom);\n                component.setChildBom(childBom);\n                //create new bom\n            }\n            case THRDPARTY, FASTENER -> {\n                //leaf components without child BOMs\n            }\n            case PART, COMPONENT -> {\n                fusionBomItemService.getChildren(fusionComponent, fusionBom).forEach(fbiRel -> {\n                    ComponentActiveRelease child = convertToEngineeringBomItemRecursive(bomParent, fbiRel, fusionBom);\n                    if (child != null) {\n                        double qty = toQuantity(fbiRel.getQuantity());\n                        componentService.addChild(component, child, qty, bomParent);\n                        bomCrudService.addChildToBom(bomParent, child, qty);\n                    }\n                });\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Merges the structure of the given Fusion BOM into an existing Engineering BOM.\n     * Components are created if missing and appended to the target BOM root.\n     */\n    @Transactional\n    public BomActiveRelease mergeFusionIntoEngineeringBom(@NotNull FusionId id, @NotNull Long engineeringBomId) {\n        FusionBom fb = fusionBomService.readById(id)\n                .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        BomActiveRelease ebom = bomCrudService.readById(engineeringBomId)\n                .orElseThrow(() -> new NotFoundException(engineeringBomId, BomActiveRelease.class));\n\n        fusionBomItemService.getChildren(fb.getRoot(), fb).forEach(rel -> {\n            ComponentActiveRelease component = convertToEngineeringBomItemRecursive(ebom, rel, fb);\n            if (component != null) {\n                component.setParentBom(ebom);\n                bomCrudService.addChildToBom(ebom, component, toQuantity(rel.getQuantity()));\n            }\n        });\n\n        return engineeringBomRepository.save(ebom);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomManagementService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionBomRel;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.ActiveReleaseProductRepository;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRepository;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Service\n@Validated\npublic class FusionBomManagementService {\n\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n\n    @Autowired\n    FusionComponentRepository fusionComponentRepository;\n\n    @Autowired\n    FusionComponentRelRepository fusionComponentRelRepository;\n\n    @Autowired\n    com.ua.crow.plm.database.repo.FusionBomRelRepository fusionBomRelRepository;\n\n    @Autowired\n    ActiveReleaseProductRepository productRepository;\n\n    @Autowired\n    FusionBomItemService itemService;\n\n    /**\n     * Ensures that BOM-to-BOM relations exist for the given BOM. When a BOM is\n     * created after its parent assemblies were uploaded, the relations to those\n     * parent BOMs are not created automatically. This method scans all\n     * {@link com.ua.crow.plm.database.fusion.FusionComponentRel} entries where\n     * the current BOM's root component is used as a child and creates the\n     * corresponding {@link com.ua.crow.plm.database.fusion.FusionBomRel}\n     * relations if they are missing.\n     */\n    @Transactional\n    public void ensureBomRelations(@NotNull FusionBom bom) {\n        FusionComponent root = bom.getRoot();\n        if (root == null) {\n            return;\n        }\n\n        fusionComponentRelRepository\n            .findByChild(root.getFusionId(), root.getRevisionId())\n            .forEach(rel -> {\n                FusionId parentId = new FusionId(rel.getBomId(), rel.getBomRevisionId());\n                fusionBomRepository.findById(parentId).ifPresent(parentBom -> {\n                    // Skip relation to itself\n                    if (parentBom.getFusionId().equals(bom.getFusionId()) &&\n                        parentBom.getRevisionId().equals(bom.getRevisionId())) {\n                        return;\n                    }\n\n                    fusionBomRelRepository\n                        .findRelation(parentBom.getFusionId(), parentBom.getRevisionId(),\n                                       bom.getFusionId(), bom.getRevisionId())\n                        .map(existing -> {\n                            existing.setQuantity(rel.getQuantity());\n                            return fusionBomRelRepository.save(existing);\n                        })\n                        .orElseGet(() -> {\n                            FusionBomRel r = new FusionBomRel();\n                            r.setParentBom(parentBom);\n                            r.setChildBom(bom);\n                            r.setQuantity(rel.getQuantity());\n                            return fusionBomRelRepository.save(r);\n                        });\n                });\n            });\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBom> readById(@NotNull FusionId fusionId) {\n        return fusionBomRepository.findById(fusionId).filter(fb -> !fb.isDeleted() && fb.isConsistent());\n    }\n    @Transactional\n    public FusionBom create(@NotNull FusionBom bom, FusionComponentDto dtoRoot) {\n        bom = fusionBomRepository.save(bom);\n        bom.setRoot(itemService.create(dtoRoot, bom));\n        // If this BOM's root component already exists in other assemblies,\n        // create corresponding BOM hierarchy relations immediately.\n        ensureBomRelations(bom);\n        return bom;\n    }\n\n    @Transactional\n    public FusionBom commit(@NotNull FusionId id) {\n        FusionBom bom = fusionBomRepository.findById(id)\n            .filter(f->!f.isDeleted())\n            .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        bom.setConsistent(true);\n        return fusionBomRepository.save(bom);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readDtoById(@NotNull FusionId fusionId) {\n        return fusionBomRepository.findById(fusionId)\n            .filter(fb -> !fb.isDeleted() && fb.isConsistent())\n            .map(f->f.convert(FusionBomDto.class));\n    }\n\n    @Transactional(readOnly = true)\n    public Stream<FusionBom> readAll() {\n        return fusionBomRepository.findNotDeleted();\n    }\n\n\n    @Transactional\n    public FusionComponent updateItem(FusionComponent updatedComponent, boolean updatePhysicalProperties) {\n        FusionComponent existingComponent = fusionComponentRepository\n                .findById(new FusionId(updatedComponent.getFusionId(), updatedComponent.getRevisionId()))\n                .orElseThrow(() -> new NotFoundException(updatedComponent.getFusionId(), FusionComponent.class));\n        existingComponent.setType(updatedComponent.getType());\n        existingComponent.setPartName(updatedComponent.getPartName());\n        existingComponent.setPartNumber(updatedComponent.getPartNumber());\n        existingComponent.setDescription(updatedComponent.getDescription());\n        existingComponent.setSourceFile(updatedComponent.getSourceFile());\n        existingComponent.setPath(updatedComponent.getPath());\n        existingComponent.setRoot(updatedComponent.isRoot());\n        existingComponent.setTenantId(updatedComponent.getTenantId());\n        existingComponent.setDeleted(updatedComponent.isDeleted());\n        if (updatePhysicalProperties) {\n            existingComponent.getPhysicalProperties().clear();\n            existingComponent.getPhysicalProperties().addAll(updatedComponent.getPhysicalProperties());\n\n        }\n        FusionComponent savedComponent = fusionComponentRepository.save(existingComponent);\n        return savedComponent;\n    }\n\n    @Transactional\n    public FusionComponent addChildItem(@NotNull AddChildRequest dto) {\n        FusionBom fusionBom = fusionBomRepository.findById(dto.getBomId())\n            .orElseThrow(() -> new NotFoundException(dto.getBomId(), FusionBom.class));\n\n        return itemService.addChildById(fusionBom, dto.getChildId(), dto.getParentId());\n    }\n\n    @Transactional\n    public FusionBom hardDeleteBomRelations(@NotNull FusionId id) {\n        FusionBom fb = fusionBomRepository.findById(id)\n            .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        fusionComponentRelRepository.hardDeleteBomRelations(id.getFusionId(), id.getRevisionId());\n        fusionBomRepository.delete(fb);\n        return fb;\n    }\n\n    @Transactional\n    public void unlinkFromParents(@NotNull FusionId id) {\n        fusionBomRelRepository.findParents(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionBomRelRepository::delete);\n        fusionComponentRelRepository.findByChild(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionComponentRelRepository::delete);\n    }\n\n    @Transactional\n    public FusionBom softDelete(@NotNull FusionId id) {\n        unlinkFromParents(id);\n        FusionBom fb = fusionBomRepository.findById(id)\n                .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        fb.setDeleted(true);\n        return fusionBomRepository.save(fb);\n    }\n\n    @Transactional\n    public FusionComponent createItem(@NotNull FusionComponentDto bomItemDto) {\n        FusionId fusionId = FusionId.id(bomItemDto.getParentBom().getFusionId(), bomItemDto.getParentBom().getRevisionId());\n        FusionBom bom = fusionBomRepository.findById(fusionId)\n                .orElseThrow(() -> new NotFoundException(fusionId, FusionBom.class));\n\n        return itemService.create(bomItemDto, bom);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readUnprocessedBomsByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findUnprocessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readProcessedBomsByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findProcessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findByProductIdAndReleaseVerConsistentNotDeleted(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readRootUnprocessedByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findRootUnprocessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readRootProcessedByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findRootProcessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readRootByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findRootByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public Stream<FusionBom> readRootAll() {\n        return fusionBomRepository.findRootNotDeleted();\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> buildBomTree(java.util.List<FusionBom> boms, java.util.List<FusionBom> roots) {\n        java.util.Map<com.ua.crow.plm.database.fusion.FusionId, FusionBomDto> map = boms.stream()\n                .collect(java.util.stream.Collectors.toMap(\n                        b -> new FusionId(b.getFusionId(), b.getRevisionId()),\n                        b -> b.convert(FusionBomDto.class)));\n\n        boms.forEach(b -> {\n            java.util.List<com.ua.crow.plm.database.fusion.FusionBomRel> rels =\n                    fusionBomRelRepository.findChildren(b.getFusionId(), b.getRevisionId());\n            FusionBomDto parentDto = map.get(new FusionId(b.getFusionId(), b.getRevisionId()));\n            rels.forEach(r -> {\n                com.ua.crow.plm.database.fusion.FusionId cid = new FusionId(r.getChildBomId(), r.getChildBomRevisionId());\n                FusionBomDto childDto = map.get(cid);\n                if (childDto != null) {\n                    if (parentDto.getChildren().isEmpty()) {\n                        parentDto.setChildren(new java.util.ArrayList<>());\n                    }\n                    parentDto.getChildren().add(copyDto(childDto));\n                }\n            });\n        });\n\n        java.util.Set<com.ua.crow.plm.database.fusion.FusionId> rootIds = roots.stream()\n                .map(r -> new FusionId(r.getFusionId(), r.getRevisionId()))\n                .collect(java.util.stream.Collectors.toSet());\n\n        return rootIds.stream()\n                .map(map::get)\n                .filter(java.util.Objects::nonNull)\n                .collect(java.util.stream.Collectors.toList());\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> readUnprocessedBomTreeByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        java.util.List<FusionBom> all = readUnprocessedBomsByProduct(productId, releaseVer);\n        java.util.List<FusionBom> roots = readRootUnprocessedByProduct(productId, releaseVer);\n        return buildBomTree(all, roots);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> readProcessedBomTreeByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        java.util.List<FusionBom> all = readProcessedBomsByProduct(productId, releaseVer);\n        java.util.List<FusionBom> roots = readRootProcessedByProduct(productId, releaseVer);\n        return buildBomTree(all, roots);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> readBomTreeByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        java.util.List<FusionBom> all = readByProduct(productId, releaseVer);\n        java.util.List<FusionBom> roots = readRootByProduct(productId, releaseVer);\n        return buildBomTree(all, roots);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> readRevisionDtos(\n            @NotNull Long productId,\n            @NotNull Long releaseVer,\n            @NotBlank String fusionId) {\n        java.util.List<FusionBom> list = readByProduct(productId, releaseVer)\n                .stream()\n                .filter(b -> fusionId.equals(b.getFusionId()))\n                .sorted(java.util.Comparator.comparing(FusionBom::getCreatedAt))\n                .toList();\n\n        java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> result = new java.util.ArrayList<>();\n        int num = 1;\n        for (FusionBom b : list) {\n            com.ua.crow.plm.dto.fusion.FusionRevisionDto dto = new com.ua.crow.plm.dto.fusion.FusionRevisionDto();\n            dto.setRevisionId(b.getRevisionId());\n            dto.setNumber(num++);\n            result.add(dto);\n        }\n        return result;\n    }\n\n    @Transactional\n    public FusionBom mapProduct(@NotNull FusionId fusionId, @NotNull Long productId) {\n        ProductActiveRelease product = productRepository.findById(ReleasableId.releasableId(productId))\n                .orElseThrow(() -> new NotFoundException(productId, ProductActiveRelease.class));\n\n        FusionBom bom = fusionBomRepository.findById(fusionId)\n                .orElseThrow(() -> new NotFoundException(fusionId, FusionBom.class));\n\n        bom.setProduct(product);\n        return fusionBomRepository.save(bom);\n    }\n\n    @Transactional\n    public Stream<FusionBom> readByPartNumber(@NotBlank String partNumber) {\n        return fusionBomRepository.findByPartNumber(partNumber);\n    }\n\n    @Transactional\n    public FusionBom save(FusionBom bom) {\n        return fusionBomRepository.save(bom);\n    }\n\n    @Transactional\n    public void deleteComponent(@NotNull FusionId id) {\n        fusionBomRepository.findByRoot(id.getFusionId(), id.getRevisionId())\n                .ifPresent(b -> { throw new com.ua.crow.service.BadRequest(\"Cannot delete root component of a BOM\"); });\n\n        fusionComponentRelRepository.findByChild(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionComponentRelRepository::delete);\n        fusionComponentRelRepository.findByParent(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionComponentRelRepository::delete);\n\n        fusionComponentRepository.deleteById(id);\n    }\n\n    private FusionBomDto copyDto(FusionBomDto source) {\n        FusionBomDto target = new FusionBomDto();\n        org.springframework.beans.BeanUtils.copyProperties(source, target);\n        if (source.getChildren() != null && !source.getChildren().isEmpty()) {\n            java.util.List<FusionBomDto> children = new java.util.ArrayList<>();\n            for (FusionBomDto child : source.getChildren()) {\n                children.add(copyDto(child));\n            }\n            target.setChildren(children);\n        } else {\n            target.setChildren(null);\n        }\n        return target;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomFacadeService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.views.components.fusionbom.edit.FusionComponentTreeGrid;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.merge.MergeBomTreesDto;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.service.engbom.BomCrudService;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@Validated\npublic class FusionBomFacadeService {\n\n    @Autowired\n    FusionBomTreeService treeService;\n\n    @Autowired\n    FusionBomManagementService managementService;\n\n    @Autowired\n    CadToEngBomConversionService conversionService;\n\n    @Autowired\n    EngineeringBomRepository engineeringBomRepository;\n\n    @Autowired\n    BomCrudService bomCrudService;\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId) {\n        return treeService.readFullTree(fusionId);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId, boolean includeBodies) {\n        return treeService.readFullTree(fusionId, includeBodies);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readDtoById(@NotNull FusionId fusionId) {\n        return managementService.readDtoById(fusionId);\n    }\n\n    @Transactional\n    public FusionBomDto create(@NotNull FusionBomDto dto) {\n        FusionBom bom = dto.convert(FusionBom.class);\n        FusionComponentDto dtoRoot = dto.getRootPart();\n        dtoRoot.setRoot(true);\n        return managementService.create(bom,dtoRoot).convert(FusionBomDto.class);\n    }\n\n\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readAllTreeDto() {\n        java.util.List<com.ua.crow.plm.database.fusion.FusionBom> all = managementService.readAll().collect(java.util.stream.Collectors.toList());\n        java.util.List<com.ua.crow.plm.database.fusion.FusionBom> roots = managementService.readRootAll().collect(java.util.stream.Collectors.toList());\n        return managementService.buildBomTree(all, roots);\n    }\n\n    @Transactional\n    public FusionComponentDto updateItem(FusionComponentDto dto, boolean updatePhysicalProperties) {\n        FusionComponent updatedComponent = dto.convert(FusionComponent.class);\n        FusionComponent bom = managementService.updateItem(updatedComponent, updatePhysicalProperties);\n        return bom.convert(FusionComponentDto.class);\n    }\n\n    @Transactional\n    public FusionComponent addChildItem(@NotNull AddChildRequest dto) {\n        return managementService.addChildItem(dto);\n    }\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readUnprocessedBomTreeDtosByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return managementService.readUnprocessedBomTreeByProduct(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readProcessedBomTreeDtosByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return managementService.readProcessedBomTreeByProduct(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readBomTreeDtoByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return managementService.readBomTreeByProduct(productId, releaseVer);\n    }\n\n    public FusionComponentDto updateItemType(String id, String revId, ItemTypes type) {\n        return managementService.itemService.updateType(id, revId, type).convert(FusionComponentDto.class);\n    }\n    @Transactional\n    public FusionBomDto mapProduct(@NotNull FusionId fusionId, @NotNull Long productId) {\n        return managementService.mapProduct(fusionId, productId).convert(FusionBomDto.class);\n    }\n\n    /**\n     * Merge a Fusion BOM into an existing Engineering BOM.\n     */\n    @Transactional\n    public BomActiveRelease mergeFusionIntoEngineeringBom(@NotNull FusionId fusionId, @NotNull Long engineeringBomId) {\n        return conversionService.mergeFusionIntoEngineeringBom(fusionId, engineeringBomId);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> readRevisionDtos(\n            @NotNull String fusionId,\n            @NotNull Long productId,\n            @NotNull Long releaseVer) {\n        return managementService.readRevisionDtos(productId, releaseVer, fusionId);\n    }\n\n    /**\n     * Find a mergeable Engineering BOM for the given Fusion BOM.\n     */\n    @Transactional(readOnly = true)\n    public Optional<EngineeringBomWoChildren> findMergeableEngineeringBom(@NotNull FusionId fusionId) {\n        return managementService.readById(fusionId).flatMap(fb -> {\n            if (fb.getEngineeringBomId() != null) {\n                return engineeringBomRepository.findById(ReleasableId.releasableId(fb.getEngineeringBomId()))\n                        .map(b -> b.convert(EngineeringBomWoChildren.class));\n            }\n            if (fb.getProduct() == null) {\n                return Optional.empty();\n            }\n            List<BomActiveRelease> list = engineeringBomRepository.findBomsByProductId(fb.getProduct().getId(),0L, Pageable.unpaged());\n            return list.stream()\n                    .max(java.util.Comparator.comparing(BomActiveRelease::getCreatedAt))\n                    .map(b -> b.convert(EngineeringBomWoChildren.class));\n        });\n    }\n\n    /**\n     * Load both Fusion and Engineering BOM trees for merge UI.\n     */\n    @Transactional(readOnly = true)\n    public Optional<MergeBomTreesDto> loadMergeTrees(@NotNull FusionId fusionId, @NotNull Long engineeringBomId) {\n        Optional<FusionBomDto> fusion = treeService.readFullTree(fusionId);\n        Optional<BomActiveReleaseDto> eff = bomCrudService.readById(engineeringBomId)\n                .map(b -> b.convert(BomActiveReleaseDto.class));\n        if (fusion.isPresent() && eff.isPresent()) {\n            MergeBomTreesDto dto = new MergeBomTreesDto();\n            dto.setFusionBom(fusion.get());\n            dto.setEngineeringBom(eff.get());\n            return Optional.of(dto);\n        }\n        return Optional.empty();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/UriEncodingService.java =====\npackage com.ua.crow.plm.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.util.UriComponents;\nimport org.springframework.web.util.UriComponentsBuilder;\n\n@Service\npublic class UriEncodingService {\n\n    public String encodeUrl(String url) {\n        // Parse the URL\n        UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(url).build();\n\n        // Rebuild and encode the URL\n        UriComponents encodedUriComponents = UriComponentsBuilder.newInstance()\n                .scheme(uriComponents.getScheme())\n                .host(uriComponents.getHost())\n                .port(uriComponents.getPort())\n                .path(uriComponents.getPath())\n                .query(uriComponents.getQuery())\n                .build()\n                .encode();\n\n        return encodedUriComponents.toUriString();\n    }\n\n    public String encodeUrlWithParams(String url, String paramName, String paramValue) {\n        // Parse the URL and add query parameters\n        UriComponents encodedUriComponents = UriComponentsBuilder.fromHttpUrl(url)\n                .queryParam(paramName, paramValue)\n                .build()\n                .encode();\n\n        return encodedUriComponents.toUriString();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/Application.java =====\npackage com.ua.crow;\n\nimport com.vaadin.flow.component.page.AppShellConfigurator;\nimport com.vaadin.flow.component.page.Push;\nimport com.vaadin.flow.shared.communication.PushMode;\nimport com.vaadin.flow.shared.ui.Transport;\nimport com.vaadin.flow.spring.VaadinMVCWebAppInitializer;\nimport com.vaadin.flow.spring.annotation.EnableVaadin;\nimport com.vaadin.flow.theme.Theme;\nimport com.vaadin.flow.theme.lumo.Lumo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n/**\n * The entry point of the Spring Boot application.\n *\n * Use the @PWA annotation make the application installable on phones, tablets\n * and some desktop browsers.\n *\n */\n@SpringBootApplication\n@EnableJpaRepositories\n@EnableTransactionManagement\n@ComponentScan(basePackages = { \"com.ua.crow\" })\npublic class Application extends SpringBootServletInitializer {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/util/SecurityContext.java =====\npackage com.ua.crow.util;\n\nimport java.util.Optional;\nimport java.util.function.Predicate;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\n\npublic class SecurityContext {\n\n    private static Optional<User> getUser() {\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        if (auth == null || auth.getPrincipal() == null) {\n            return Optional.empty();\n        }\n        User userDetails = (User) auth.getPrincipal();\n        return Optional.of(userDetails);\n    }\n\n    private static Optional<String> getUserName() {\n        Predicate<UserDetails> userAccountIsEnabled = userDetails ->\n                userDetails.isAccountNonLocked() && userDetails.isAccountNonExpired() && userDetails.isEnabled();\n\n        Predicate<UserDetails> usernameExistsAndNonEmpty = userDetails ->\n                userDetails.getUsername() != null && !userDetails.getUsername().isEmpty();\n\n        return getUser().flatMap(userDetails -> {\n            if (userAccountIsEnabled.and(usernameExistsAndNonEmpty).test(userDetails)) {\n                return Optional.of(userDetails.getUsername());\n            }\n            return Optional.empty();\n        });\n    }\n\n    public static String getUsernameOrElseThrow() throws RuntimeException {\n        return getUserName().orElse(\"user\");\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/util/SpringContext.java =====\npackage com.ua.crow.util;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringContext implements ApplicationContextAware {\n\n    private static ApplicationContext context;\n\n    public static ConversionService getConversionService() {\n        return getBean(\"mvcConversionService\",ConversionService.class);\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) {\n        context = applicationContext;\n    }\n\n    public static ApplicationContext getApplicationContext() {\n        return context;\n    }\n\n\n\n    public static <T> T getBean(Class<T> beanClass) {\n        return context.getBean(beanClass);\n    }\n\n    public static <T> T getBean(String name, Class<T> beanClass) {\n        return context.getBean(name, beanClass);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/Conversion.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.Map;\n\n@Configuration\npublic class Conversion implements WebMvcConfigurer {\n\n    private final ApplicationContext applicationContext;\n\n\n    @Autowired\n    public Conversion(ApplicationContext applicationContext) {\n        this.applicationContext = applicationContext;\n    }\n\n    @Override\n    public void addFormatters(FormatterRegistry registry) {\n        // Получение всех бинов, которые реализуют Converter\n        Map<String, Converter> converters = applicationContext.getBeansOfType(Converter.class);\n        for (Converter<?, ?> converter : converters.values()) {\n            // Проверка, что бин находится в пакете com.ua.converters\n            if (converter.getClass().getPackage().getName().startsWith(\"com.ua.crow.plm.converters\")) {\n                registry.addConverter(converter);\n            }\n        }\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/Minio.java =====\npackage com.ua.crow.config;\n\n\nimport io.minio.MinioClient;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\n@Getter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Minio {\n\n    private MinioClient client;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/AuditConfig.java =====\npackage com.ua.crow.config;\n\nimport com.ua.crow.util.SecurityContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.domain.AuditorAware;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n\nimport java.util.Optional;\n\n@Configuration\n@EnableJpaAuditing(auditorAwareRef = \"auditorProvider\")\npublic class AuditConfig {\n    @Bean\n    public AuditorAware<String> auditorProvider() {\n        return () -> Optional.ofNullable(SecurityContext.getUsernameOrElseThrow()); // Замените на актуальное получение текущего пользователя\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/SecurityConfig.java =====\npackage com.ua.crow.config;\n\nimport com.ua.crow.views.pages.LoginView;\nimport com.vaadin.flow.spring.security.VaadinWebSecurity;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport com.ua.crow.service.CrowUserService;\nimport org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;\nimport org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\nimport javax.sql.DataSource;\n\n@EnableWebSecurity // <1>\n@Configuration\npublic class SecurityConfig extends VaadinWebSecurity { // <2>\n    private final CrowUserService userService;\n    private final PasswordEncoder passwordEncoder;\n    private final DataSource dataSource;\n\n    public SecurityConfig(CrowUserService crowUserService, PasswordEncoder passwordEncoder, DataSource dataSource) {\n        this.userService = crowUserService;\n        this.passwordEncoder = passwordEncoder;\n        this.dataSource = dataSource;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.authorizeHttpRequests(auth ->\n                auth.requestMatchers(\n                        AntPathRequestMatcher.antMatcher(HttpMethod.GET, \"/images/*\")\n                ).permitAll());\n        super.configure(http);\n\n        http.rememberMe(rm -> rm\n                .userDetailsService(userService)\n                .tokenValiditySeconds(60 * 60 * 24 * 14)\n                .tokenRepository(persistentTokenRepository())\n                .key(\"remember-me\"));\n\n        setLoginView(http, LoginView.class); // <4>\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        // Customize your WebSecurity configuration.\n        web.ignoring()\n                .requestMatchers(\n                        AntPathRequestMatcher.antMatcher( \"/fusion/*\"),\n                        AntPathRequestMatcher.antMatcher( \"/fusionbom/*\"),\n                        AntPathRequestMatcher.antMatcher( \"/fusionbomitem/*\")\n                );\n        super.configure(web);\n    }\n\n    @Bean\n    public PersistentTokenRepository persistentTokenRepository() {\n        JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();\n        tokenRepository.setDataSource(dataSource);\n        if (!persistentLoginsExists()) {\n            tokenRepository.setCreateTableOnStartup(true);\n        }\n        return tokenRepository;\n    }\n\n    private boolean persistentLoginsExists() {\n        try (var connection = dataSource.getConnection()) {\n            var metaData = connection.getMetaData();\n            try (var rs = metaData.getTables(null, null, \"persistent_logins\", null)) {\n                if (rs.next()) {\n                    return true;\n                }\n            }\n            // Some databases (e.g. PostgreSQL) store table names in upper case\n            try (var rs = metaData.getTables(null, null, \"PERSISTENT_LOGINS\", null)) {\n                return rs.next();\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n\n\n\n\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/I18nConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\nimport java.util.Locale;\n\n@Configuration\npublic class I18nConfig implements WebMvcConfigurer {\n\n    @Bean\n    public MessageSource messageSource() {\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n        messageSource.setBasename(\"messages\");\n        messageSource.setDefaultEncoding(\"UTF-8\");\n        return messageSource;\n    }\n\n    @Bean\n    public LocaleResolver localeResolver() {\n        SessionLocaleResolver slr = new SessionLocaleResolver();\n        slr.setDefaultLocale(Locale.ENGLISH);\n        return slr;\n    }\n\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();\n        interceptor.setParamName(\"lang\");\n        return interceptor;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/AsyncConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n@Configuration\n@EnableAsync\npublic class AsyncConfig implements AsyncConfigurer {\n    @Override\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(500);\n        executor.setThreadNamePrefix(\"Async-\");\n        executor.initialize();\n        return executor;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/LocaleServiceInitListener.java =====\npackage com.ua.crow.config;\n\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.server.ServiceInitEvent;\nimport com.vaadin.flow.server.VaadinServiceInitListener;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class LocaleServiceInitListener implements VaadinServiceInitListener {\n\n    @Override\n    public void serviceInit(ServiceInitEvent event) {\n        event.getSource().addUIInitListener(uiInitEvent ->\n                uiInitEvent.getUI().addBeforeEnterListener(e ->\n                        UI.getCurrent().setLocale(LocaleContextHolder.getLocale())\n                )\n        );\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/SecurityService.java =====\npackage com.ua.crow.config;\n\nimport com.vaadin.flow.spring.security.AuthenticationContext;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SecurityService {\n\n    private final AuthenticationContext authenticationContext;\n\n    public SecurityService(AuthenticationContext authenticationContext) {\n        this.authenticationContext = authenticationContext;\n    }\n\n    public UserDetails getAuthenticatedUser() {\n        return authenticationContext.getAuthenticatedUser(UserDetails.class).get();\n    }\n\n    public void logout() {\n        authenticationContext.logout();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/PasswordEncoderConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class PasswordEncoderConfig {\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/cad/fusion/ItemTypeNameMappingInitializer.java =====\npackage com.ua.crow.config.cad.fusion;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.repo.ItemTypeNameMappingRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.beans.factory.InitializingBean;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@Component\npublic class ItemTypeNameMappingInitializer implements InitializingBean {\n\n    @Autowired\n    private ItemTypeNameMappingRepository itemTypeNameMappingRepository;\n\n    @Override\n    public void afterPropertiesSet() {\n        initializeItemTypes();\n    }\n\n    private void initializeItemTypes() {\n        List<String> fastenerNames = Arrays.asList(\"bolt\", \"nut\", \"washer\", \"screw\", \"бовт\", \"гайка\", \"шайба\", \"гвинт\");\n\n        saveItemTypes(ItemTypes.FASTENER, fastenerNames);\n    }\n\n    private void saveItemTypes(ItemTypes type, List<String> names) {\n        for (String name : names) {\n            saveItemType(type, name);\n        }\n    }\n\n    private void saveItemType(ItemTypes type, String name) {\n        if (!itemTypeNameMappingRepository.findByName(name).isPresent()) {\n            ItemTypeNameMapping itemTypeNameMapping = new ItemTypeNameMapping();\n            itemTypeNameMapping.setType(type);\n            itemTypeNameMapping.setName(name);\n            itemTypeNameMappingRepository.save(itemTypeNameMapping);\n            System.out.println(\"Created item type: \" + name);\n        } else {\n            System.out.println(\"Item type already exists: \" + name);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/cad/fusion/EngineeringBomItemPropertyTypeInitializer.java =====\npackage com.ua.crow.config.cad.fusion;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeGroupRepository;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeRepository;\nimport com.ua.crow.database.repository.UnitsRepository;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.stereotype.Component;\n\n@Component\n@DependsOn(\"unitInitializer\")\npublic class EngineeringBomItemPropertyTypeInitializer implements ApplicationContextAware {\n\n    private EngineeringBomItemPropertyTypeRepository propertyTypeRepository;\n    private EngineeringBomItemPropertyTypeGroupRepository propertyTypeGroupRepository;\n    private UnitsRepository unitsRepository;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.propertyTypeRepository = applicationContext.getBean(EngineeringBomItemPropertyTypeRepository.class);\n        this.propertyTypeGroupRepository = applicationContext.getBean(EngineeringBomItemPropertyTypeGroupRepository.class);\n        this.unitsRepository = applicationContext.getBean(UnitsRepository.class);\n        initializePropertyTypes();\n    }\n\n    private void initializePropertyTypes() {\n        BomItemPropertyTypeGroup group = initializeGroup(\"Dimensional Values\", \"Вимірювальні значення\");\n        initializePropertyType(\"widthMm\", \"ширина мм\", \"mm\", group);\n        initializePropertyType(\"lengthMm\", \"довжина мм\", \"mm\", group);\n        initializePropertyType(\"heightMm\", \"висота мм\", \"mm\", group);\n        initializePropertyType(\"volumeCm3\", \"об'єм см³\", \"cm³\", group);\n        initializePropertyType(\"areaCm2\", \"площа см²\", \"cm²\", group);\n        initializePropertyType(\"massKg\", \"маса кг\", \"kg\", group);\n        initializePropertyType(\"densityKgCm3\", \"щільність кг/см³\", \"kg/cm³\", group);\n    }\n\n    private BomItemPropertyTypeGroup initializeGroup(String name, String ukrName) {\n        return propertyTypeGroupRepository.findByName(name)\n            .orElseGet(() -> {\n                BomItemPropertyTypeGroup group = new BomItemPropertyTypeGroup();\n                group.setName(name);\n                group.setUkrName(ukrName);\n                return propertyTypeGroupRepository.save(group);\n            });\n    }\n\n    private void initializePropertyType(String name, String ukrName, String unitShortName, BomItemPropertyTypeGroup group) {\n        if (!propertyTypeRepository.findByName(name).isPresent()) {\n            Units unit = unitsRepository.findByShortName(unitShortName)\n                .orElseThrow(() -> new RuntimeException(\"Unit not found: \" + unitShortName));\n            \n            BomItemPropertyType propertyType = new BomItemPropertyType();\n            propertyType.setName(name);\n            propertyType.setUkrName(ukrName);\n            propertyType.setUnits(unit);\n            propertyType.setGroup(group);\n            propertyType.setDataType(DataTypes.NUMBER);\n            propertyTypeRepository.save(propertyType);\n            System.out.println(\"Created property type with name: \" + name + \", ukrName: \" + ukrName + \", unit: \" + unitShortName);\n        } else {\n            System.out.println(\"Property type with name: \" + name + \" already exists.\");\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/cad/fusion/FusionEngineeringBomItemPropertyTypeConfig.java =====\npackage com.ua.crow.config.cad.fusion;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeRepository;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\n\n@Configuration\npublic class FusionEngineeringBomItemPropertyTypeConfig {\n\n    private final EngineeringBomItemPropertyTypeRepository propertyTypeRepository;\n\n    public FusionEngineeringBomItemPropertyTypeConfig(EngineeringBomItemPropertyTypeRepository propertyTypeRepository) {\n        this.propertyTypeRepository = propertyTypeRepository;\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType widthMm() {\n        return propertyTypeRepository.findByName(\"widthMm\")\n            .orElseThrow(() -> new RuntimeException(\"widthMm not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType lengthMm() {\n        return propertyTypeRepository.findByName(\"lengthMm\")\n            .orElseThrow(() -> new RuntimeException(\"lengthMm not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType heightMm() {\n        return propertyTypeRepository.findByName(\"heightMm\")\n            .orElseThrow(() -> new RuntimeException(\"heightMm not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType volumeCm3() {\n        return propertyTypeRepository.findByName(\"volumeCm3\")\n            .orElseThrow(() -> new RuntimeException(\"volumeCm3 not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType areaCm2() {\n        return propertyTypeRepository.findByName(\"areaCm2\")\n            .orElseThrow(() -> new RuntimeException(\"areaCm2 not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType massKg() {\n        return propertyTypeRepository.findByName(\"massKg\")\n            .orElseThrow(() -> new RuntimeException(\"massKg not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType densityKgCm3() {\n        return propertyTypeRepository.findByName(\"densityKgCm3\")\n            .orElseThrow(() -> new RuntimeException(\"densityKgCm3 not found\"));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/MinioConfiguration.java =====\npackage com.ua.crow.config;\n\nimport io.minio.BucketExistsArgs;\nimport io.minio.MakeBucketArgs;\nimport io.minio.MinioClient;\nimport io.minio.errors.*;\nimport io.minio.messages.Bucket;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class MinioConfiguration {\n\n    @Value(\"${minio.url}\")\n    String miniourl;\n\n    @Value(\"${minio.accesskey}\")\n    String minioaccesskey;\n\n    @Value(\"${minio.secret}\")\n    String miniosecret;\n\n    @Bean(\"minio\")\n    Minio minio() {\n        return new Minio(MinioClient.builder()\n                .endpoint(miniourl)\n                .credentials(minioaccesskey, miniosecret)\n                .build());\n    }\n    @Bean\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/ConversionConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ConversionServiceFactoryBean;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.converter.Converter;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Configuration\npublic class ConversionConfig {\n\n    @Bean\n    public ConversionService conversionService(@Autowired Set<Converter<?, ?>> converters) {\n        ConversionServiceFactoryBean factoryBean = new ConversionServiceFactoryBean();\n        factoryBean.setConverters(converters);\n        factoryBean.afterPropertiesSet();\n\n        return factoryBean.getObject();\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/Buckets.java =====\npackage com.ua.crow.config;\n\npublic enum Buckets {\n    products,\n    components,\n    cad;\n\n    public String getDirectory() {\n        return this.name();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/FusionComponentTypeConstraintUpdater.java =====\npackage com.ua.crow.config.dbinit;\n\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\n/**\n * Ensures that the fusion_component type check constraint\n * allows the NONE value.\n */\n@Component\npublic class FusionComponentTypeConstraintUpdater {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    public FusionComponentTypeConstraintUpdater(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @PostConstruct\n    public void updateConstraint() {\n        try {\n            jdbcTemplate.execute(\n                \"ALTER TABLE fusion_component DROP CONSTRAINT IF EXISTS fusion_component_type_check\");\n            jdbcTemplate.execute(\n                \"ALTER TABLE fusion_component ADD CONSTRAINT fusion_component_type_check \" +\n                \"CHECK (type in ('COMPONENT','PART','BOM','FASTENER','THRDPARTY','NONE'))\");\n        } catch (Exception ex) {\n            System.err.println(\n                \"Unable to update fusion_component_type_check constraint: \" + ex.getMessage());\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/MinioInit.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.config.Minio;\nimport io.minio.BucketExistsArgs;\nimport io.minio.MakeBucketArgs;\nimport io.minio.errors.*;\nimport jakarta.annotation.PostConstruct;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n@Component\n@DependsOn(\"minio\")\npublic class MinioInit implements ApplicationContextAware {\n    Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    Minio minio;\n\n    @PostConstruct\n    public void minioBucket() throws ServerException, InsufficientDataException, ErrorResponseException, IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException, InternalException {\n\n        String[] list = new String[]{\"products\",\"components\",\"cad\"};\n\n        // Make 'asiatrip' bucket if not exist.\n        for (Buckets bucket : Buckets.values()) {\n            boolean found = minio.getClient().bucketExists(BucketExistsArgs.builder().bucket(bucket.name()).build());\n            if (!found) {\n                minio.getClient().makeBucket(MakeBucketArgs.builder().bucket(bucket.name()).build());\n                logger.info(\"Bucket '\"+bucket.name()+\"' created.\");\n            } else {\n                logger.info(\"Bucket '\"+bucket.name()+\"' already exists.\");\n            }\n        }\n\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.minio = applicationContext.getBean(Minio.class);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/DatabaseFeeder.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.inventory.repo.ItemRepository;\nimport com.ua.crow.inventory.repo.ToolTypeRepository;\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.database.repository.*;\nimport com.ua.crow.mes.repo.TaskRepository;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.mes.repo.TaskTypeRepository;\nimport com.ua.crow.plm.database.repo.ComponentRepository;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport jakarta.annotation.PostConstruct;\nimport jakarta.transaction.Transactional;\nimport java.util.*;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DatabaseFeeder {\n    final TaskRepository taskRepository;\n\n    private final TaskStatusRepository taskStatusRepository;\n\n    final UserRepository userRepository;\n\n    private final EngineeringBomRepository engineeringBomRepository;\n\n    private final ComponentRepository bomItemRepository;\n\n    private final ItemRepository itemRepository;\n\n    private final UnitsRepository unitsRepository;\n\n    private final ToolTypeRepository toolTypeRepository;\n\n\n    final TaskTypeRepository taskTypeRepository;\n\n    public DatabaseFeeder(\n            TaskRepository taskRepository,\n            TaskStatusRepository taskStatusRepository,\n            EngineeringBomRepository engineeringBomRepository,\n            ComponentRepository bomItemRepository,\n            ItemRepository itemRepository,\n            UnitsRepository unitsRepository,\n            ToolTypeRepository toolTypeRepository,\n\n            TaskTypeRepository taskTypeRepository,\n            UserRepository userRepository) {\n        this.taskRepository = taskRepository;\n        this.taskStatusRepository = taskStatusRepository;\n        this.engineeringBomRepository = engineeringBomRepository;\n        this.bomItemRepository = bomItemRepository;\n        this.itemRepository = itemRepository;\n        this.unitsRepository = unitsRepository;\n        this.toolTypeRepository = toolTypeRepository;\n\n        this.taskTypeRepository = taskTypeRepository;\n        this.userRepository = userRepository;\n    }\n\n    @PostConstruct\n    @Transactional\n    public void postConstruct() {\n        taskStatusRepository.findById(3L).map(taskStatus -> {\n            List<TaskStatus> availableNextStatuses = new ArrayList<>();\n            availableNextStatuses.add(taskStatusRepository.findById(2L).get());\n            taskStatus.setAvailableNextStatuses(availableNextStatuses);\n            taskStatusRepository.save(taskStatus);\n            return taskStatus;\n        });\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/UnitInitializer.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.database.models.common.TypeOfUnits;\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.database.repository.UnitsRepository;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class UnitInitializer implements ApplicationContextAware {\n\n    private UnitsRepository unitsRepository;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.unitsRepository = applicationContext.getBean(UnitsRepository.class);\n\n    }\n\n\n    @PostConstruct\n    private void initializeUnits() {\n        initializeUnit(\"Square Meter\", \"m²\", TypeOfUnits.SQUARE);\n        initializeUnit(\"Square Centimeter\", \"cm²\", TypeOfUnits.SQUARE);\n        initializeUnit(\"Square Millimeter\", \"mm²\", TypeOfUnits.SQUARE);\n        initializeUnit(\"Square Foot\", \"ft²\", TypeOfUnits.SQUARE);\n\n        // Единицы длины\n        initializeUnit(\"Meter\", \"m\", TypeOfUnits.UNITS_LENGTH);\n        initializeUnit(\"Millimeter\", \"mm\", TypeOfUnits.UNITS_LENGTH);\n        initializeUnit(\"Foot\", \"ft\", TypeOfUnits.UNITS_LENGTH);\n        // Единицы веса\n        initializeUnit(\"Kilogram\", \"kg\", TypeOfUnits.MASS);\n        initializeUnit(\"Gram\", \"g\", TypeOfUnits.MASS);\n        initializeUnit(\"Pound\", \"lb\", TypeOfUnits.MASS);\n        // Единицы объема\n        initializeUnit(\"Liter\", \"l\", TypeOfUnits.VOLUME);\n        initializeUnit(\"Milliliter\", \"ml\", TypeOfUnits.VOLUME);\n        initializeUnit(\"Cubic Meter\", \"m³\", TypeOfUnits.VOLUME);\n        initializeUnit(\"Cubic Centimeter\", \"cm³\", TypeOfUnits.VOLUME);\n\n        // Единицы плотности\n        initializeUnit(\"Kilogram per Cubic Meter\", \"kg/m³\", TypeOfUnits.DENSITY);\n        initializeUnit(\"Kilogram per Cubic Centimeter\", \"kg/cm³\", TypeOfUnits.DENSITY);\n        initializeUnit(\"Gram per Cubic Centimeter\", \"g/cm³\", TypeOfUnits.DENSITY);\n        initializeUnit(\"Pound per Cubic Foot\", \"lb/ft³\", TypeOfUnits.DENSITY);\n\n        // Единицы давления\n        initializeUnit(\"Pascal\", \"Pa\", TypeOfUnits.PRESSURE);\n        initializeUnit(\"Bar\", \"bar\", TypeOfUnits.PRESSURE);\n        initializeUnit(\"Pound per Square Inch\", \"psi\", TypeOfUnits.PRESSURE);\n\n        // Единицы температуры\n        initializeUnit(\"Celsius\", \"°C\", TypeOfUnits.TEMPERATURE);\n        initializeUnit(\"Fahrenheit\", \"°F\", TypeOfUnits.TEMPERATURE);\n        initializeUnit(\"Kelvin\", \"K\", TypeOfUnits.TEMPERATURE);\n\n    }\n\n    private void initializeUnit(String name, String shortName, TypeOfUnits type) {\n        if (!unitsRepository.findByShortName(shortName).isPresent()) {\n            Units unit = new Units();\n            unit.setName(name);\n            unit.setShortName(shortName);\n            unit.setType(type);\n            unitsRepository.save(unit);\n            System.out.println(\"Created unit with name: \" + name + \", shortName: \" + shortName + \" and type: \" + type);\n        } else {\n            System.out.println(\"Unit with shortName: \" + shortName + \" already exists.\");\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/DefaultUserFeeder.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.database.models.auth.Role;\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.auth.UserRole;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.database.repository.UserRoleRepository;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DefaultUserFeeder {\n    final UserRepository userRepository;\n    final UserRoleRepository userRoleRepository;\n    final PasswordEncoder passwordEncoder;\n\n    public DefaultUserFeeder(UserRepository userRepository,\n                             UserRoleRepository userRoleRepository,PasswordEncoder passwordEncoder ) {\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.userRoleRepository = userRoleRepository;\n    }\n\n    @PostConstruct\n    public void init() {\n        createUserIfAbsent(\"admin\", Role.ADMIN);\n        createUserIfAbsent(\"user\", Role.WORKER);\n    }\n\n    private void createUserIfAbsent(String username, Role role) {\n        if (userRepository.findByUsername(username).isPresent()) {\n            return;\n        }\n        UserEntity user = new UserEntity();\n        user.setUsername(username);\n        user.setEnabled(true);\n        user.setAccountNonExpired(true);\n        user.setAccountNonLocked(true);\n        user.setCredentialsNonExpired(true);\n        user.setPassword(passwordEncoder.encode(\"password\"));\n        UserRole userRole = new UserRole(role);\n        userRole.setUser(user);\n        userRepository.save(user);\n        userRole.setUserId(user.getId());\n        userRoleRepository.save(userRole);\n        user.setUserRole(userRole);\n        userRepository.save(user);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/AppI18NProvider.java =====\npackage com.ua.crow.config;\n\nimport com.vaadin.flow.i18n.I18NProvider;\nimport org.springframework.stereotype.Component;\n\nimport java.text.MessageFormat;\nimport java.util.*;\n\n@Component\npublic class AppI18NProvider implements I18NProvider {\n\n    private static final String BUNDLE_PREFIX = \"messages\";\n    private final Map<Locale, ResourceBundle> bundles = new HashMap<>();\n\n    public AppI18NProvider() {\n        for (Locale locale : getProvidedLocales()) {\n            bundles.put(locale, ResourceBundle.getBundle(BUNDLE_PREFIX, locale));\n        }\n    }\n\n    @Override\n    public List<Locale> getProvidedLocales() {\n        return List.of(Locale.ENGLISH, new Locale(\"ru\"));\n    }\n\n    @Override\n    public String getTranslation(String key, Locale locale, Object... params) {\n        ResourceBundle bundle = bundles.getOrDefault(locale, bundles.get(Locale.ENGLISH));\n        try {\n            String value = bundle.getString(key);\n            if (params.length > 0) {\n                value = MessageFormat.format(value, params);\n            }\n            return value;\n        } catch (MissingResourceException e) {\n            return key;\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/workspace/WorkspaceType.java =====\npackage com.ua.crow.workspace;\n\npublic enum WorkspaceType {\n    RND,\n    ASSEMBLY,\n    LOGISTICS,\n    ADMIN\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/workspace/Workspace.java =====\npackage com.ua.crow.workspace;\n\nimport java.util.Set;\n\npublic class Workspace {\n    private WorkspaceType type;\n    private String name;\n    private Set<String> permissions;\n\n    public Workspace(WorkspaceType type, String name, Set<String> permissions) {\n        this.type = type;\n        this.name = name;\n        this.permissions = permissions;\n    }\n\n    public WorkspaceType getType() {\n        return type;\n    }\n\n    public void setType(WorkspaceType type) {\n        this.type = type;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Set<String> getPermissions() {\n        return permissions;\n    }\n\n    public void setPermissions(Set<String> permissions) {\n        this.permissions = permissions;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TimeLogDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.Date;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class TimeLogDto extends NamedBasicEntityWithNumericIdDto {\n    private Long taskId;\n    private double amount;\n    private UserDto loggedBy;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date date;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskRef.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class TaskRef extends NamedBasicEntityWithNumericIdDto {\n    private TaskStatusDto status;\n    private TaskTypeDto type;\n    private UserDto assignee;\n    private UserDto reporter;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskTypeDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedNumericIdEntityDto;\n\npublic class TaskTypeDto extends NamedNumericIdEntityDto {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/Exception.java =====\npackage com.ua.crow.mes.dto;\n\npublic record Exception(String msg) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/AttachmentDto.java =====\npackage com.ua.crow.mes.dto;\n\npublic record AttachmentDto(String url) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/PasswordChangeDto.java =====\npackage com.ua.crow.mes.dto;\n\npublic record PasswordChangeDto(String password) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/BasicEntityWithNumericId.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.Date;\n\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class BasicEntityWithNumericId extends NumericIdEntityDto {\n    private String creator = null;\n\n    private String modifier = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date createdAt = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.*;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.plm.dto.BomDtoShort;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class TaskDto extends NamedBasicEntityWithNumericIdDto {\n    private UserDto assignee;\n    private boolean isSubtask;\n    private UserDto reporter;\n    private String description;\n    private BomDtoShort bom;\n    private TaskStatusDto status;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date start;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date end;\n\n    private List<TimeLogDto> hoursLogged;\n    private List<CommentDto> comments;\n    private List<AttachmentDto> attachments;\n    private Set<SubtaskDto> subtasks = new TreeSet<>(Comparator.comparing(SubtaskDto::getSequence));\n    private SeverityDto severity;\n    private TaskTypeDto taskType;\n    private String audioUrl;\n    private Double totalHoursLogged;\n    private int subtasksCount;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/CreateUserDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class CreateUserDto {\n    private String username;\n    private String name;\n    private String password;\n    private boolean enabled = true;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/CreateTaskRequest.java =====\npackage com.ua.crow.mes.dto;\n\nimport java.util.Date;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class CreateTaskRequest {\n\n    String name;\n\n    String description;\n\n    Date start;\n\n    Date end;\n\n    Long assignee;\n\n    Long reporter;\n\n    Long parent;\n\n    Long taskType;\n\n    Integer severity;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/SubtaskDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class SubtaskDto extends NamedBasicEntityWithNumericIdDto {\n    private Integer sequence;\n    private TaskRef task;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/SeverityDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class SeverityDto {\n    private String name;\n    private String color;\n    private int value;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/UserDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class UserDto extends NumericIdEntityDto {\n    private String username;\n    private boolean enabled;\n    private String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/UpdateTaskRequest.java =====\npackage com.ua.crow.mes.dto;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class UpdateTaskRequest extends CreateTaskRequest {\n    private Long status;\n\n    public UpdateTaskRequest() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/FileUploadRequest.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.FileTypes;\nimport org.springframework.web.multipart.MultipartFile;\n\npublic record FileUploadRequest(Long taskId, Boolean isPrimaryAudio, FileTypes fileType, MultipartFile file) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskStatusDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedNumericIdEntityDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class TaskStatusDto extends NamedNumericIdEntityDto {\n    private TaskTypeDto taskType;\n    boolean initialStatus;\n    private boolean terminatedStatus;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/CommentDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class CommentDto extends NamedBasicEntityWithNumericIdDto {\n\n    private String imageUrl;\n\n    private String audioUrl;\n\n    private UserDto author;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/TaskStatus.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport jakarta.persistence.*;\nimport java.util.List;\nimport java.util.Objects;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class TaskStatus extends NamedNumericIdEntity {\n\n    @ManyToMany\n    @JoinTable(\n            name = \"available_next_statuses\",\n            joinColumns = @JoinColumn(name = \"status_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"next_status_id\"))\n    private List<TaskStatus> availableNextStatuses;\n\n    @ManyToOne\n    private TaskType taskType;\n\n    private boolean initialStatus;\n\n    private boolean terminatedStatus;\n\n    private boolean plannedStatus;\n\n    private boolean inProgressStatus;\n\n    private boolean backlogStatus;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof TaskStatus that)) return false;\n        return Objects.equals(availableNextStatuses, that.availableNextStatuses)\n                && Objects.equals(taskType, that.taskType);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(availableNextStatuses, taskType);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/TaskType.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport jakarta.persistence.Entity;\n\n@Entity\npublic class TaskType extends NamedNumericIdEntity {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Severity.java =====\npackage com.ua.crow.mes.database;\n\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\n\npublic enum Severity {\n    EXTRAHIGHT(50, \"#b91c1c\"),\n    HIGHT(40, \"#eab308\"),\n    MEDIUM(30, \"#3b82f6\"),\n    LOW(20, \"#22c55e\"),\n    EXTRALOW(10, \"#71717a\");\n\n    @Getter\n    private final Integer value;\n\n    @Getter\n    private final String color;\n\n    Severity(@NotNull int value, @NotNull String color) {\n        this.value = value;\n        this.color = color;\n    }\n\n    public static Severity fromValue() {\n        return MEDIUM;\n    }\n\n    public static Severity fromValue(@NotNull Integer value) throws IllegalArgumentException {\n        for (Severity severity : Severity.values()) {\n            if (severity.getValue().equals(value)) {\n                return severity;\n            }\n        }\n        throw new IllegalArgumentException(\"No severity with value \" + value);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Comment.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class Comment extends NamedBasicEntityWithNumericId {\n\n    private String imageUrl;\n\n    private String audioUrl;\n\n    @ManyToOne\n    private UserEntity author;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Task.java =====\npackage com.ua.crow.mes.database;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport jakarta.persistence.Convert;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToMany;\nimport java.util.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Task extends NamedBasicEntityWithNumericId {\n\n    @ManyToOne\n    private UserEntity assignee;\n\n    private boolean isSubtask;\n\n    @ManyToOne\n    private UserEntity reporter;\n\n    private String description;\n\n    @ManyToOne\n    private BomActiveRelease bomActiveRelease;\n\n    @ManyToOne\n    private TaskStatus status;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date start;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date endTime;\n\n    @OneToMany\n    private List<TimeLog> hoursLogged;\n\n    @OneToMany\n    private List<Comment> comments;\n\n    @OneToMany\n    private Set<Subtask> subtasks = new TreeSet<>(Comparator.comparing(Subtask::getSequence));\n\n    @Convert(converter = SeverityConverter.class)\n    private Severity severity;\n\n    @ManyToOne\n    private TaskType taskType;\n\n    public Task() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/TimeLog.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Date;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class TimeLog extends NamedBasicEntityWithNumericId {\n\n    @ManyToOne\n    @JoinColumn(name = \"task_id\")\n    Task task;\n\n    private double amount;\n\n    @ManyToOne\n    @JoinColumn(name = \"loggedBy\")\n    private UserEntity loggedBy;\n\n    private Date date;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/SeverityConverter.java =====\npackage com.ua.crow.mes.database;\n\nimport jakarta.persistence.AttributeConverter;\nimport org.springframework.lang.NonNull;\n\npublic class SeverityConverter implements AttributeConverter<Severity, Integer> {\n    @Override\n    public Integer convertToDatabaseColumn(@NonNull Severity severity) {\n        return severity.getValue();\n    }\n\n    @Override\n    public Severity convertToEntityAttribute(@NonNull Integer integer) {\n        return Severity.fromValue(integer);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Subtask.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Subtask extends NamedBasicEntityWithNumericId {\n    @ManyToOne\n    @JoinColumn(name = \"task_id\")\n    private Task task;\n\n    private Integer sequence;\n\n    public Subtask() {}\n\n    public Subtask(Task task, int sequence) {\n        this.task = task;\n        this.sequence = sequence;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/CommentsMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Comment;\nimport com.ua.crow.mes.dto.CommentDto;\nimport java.util.List;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class CommentsMapper {\n    public abstract CommentDto toDto(Comment comment);\n    public abstract List<CommentDto> map(List<Comment> comments);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/SubtaskMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Subtask;\nimport com.ua.crow.mes.dto.SubtaskDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(\n        componentModel = \"spring\",\n        uses = {TaskMapper.class})\npublic abstract class SubtaskMapper {\n    public abstract SubtaskDto toDto(Subtask severity);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TaskTypeMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskType;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class TaskTypeMapper {\n    public abstract TaskTypeDto toDto(TaskType taskType);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TimeLogMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class TimeLogMapper {\n    public abstract TimeLogDto toDto(TimeLog timeLog);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/UserEntityMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.dto.UserDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class UserEntityMapper {\n    public abstract UserDto toDto(UserEntity user);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/SeverityMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Severity;\nimport com.ua.crow.mes.dto.SeverityDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class SeverityMapper {\n    @Mapping(target = \"name\", expression = \"java(severity.toString())\")\n    public abstract SeverityDto toDto(Severity severity);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TaskMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.TaskRef;\nimport com.ua.crow.plm.converters.mappers.BomShortMapper;\nimport com.ua.crow.mes.service.TaskService;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Mapper(\n        unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN,\n        componentModel = \"spring\",\n        uses = {\n            TaskTypeMapper.class,\n            UserEntityMapper.class,\n            CommentsMapper.class,\n            SeverityMapper.class,\n            TimeLogMapper.class,\n            BomShortMapper.class,\n            TaskService.class\n        })\npublic abstract class TaskMapper {\n\n    @Autowired\n    protected TaskService taskService;\n\n    @Mapping(target = \"totalHoursLogged\", expression = \"java(taskService.computeTotalHoursLogged(task))\")\n    @Mapping(target = \"subtasksCount\", expression = \"java(taskService.getSubtasksCount(task))\")\n    public abstract TaskDto toDto(Task task);\n\n    @Mapping(source = \"taskType\", target = \"type\")\n    public abstract TaskRef toRef(Task task);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TaskStatusMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class TaskStatusMapper {\n    public abstract TaskStatusDto toDto(TaskStatus task);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/service/WorkLogService.java =====\npackage com.ua.crow.mes.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.repo.TaskRepository;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.mes.repo.WorklogRepository;\nimport com.ua.crow.util.SecurityContext;\nimport jakarta.transaction.Transactional;\nimport java.util.Date;\nimport java.util.List;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class WorkLogService {\n    final TaskRepository taskRepository;\n    final UserRepository userRepository;\n    final WorklogRepository worklogRepository;\n\n    public WorkLogService(\n            TaskRepository taskRepository, UserRepository userRepository, WorklogRepository worklogRepository) {\n        this.taskRepository = taskRepository;\n        this.userRepository = userRepository;\n        this.worklogRepository = worklogRepository;\n    }\n\n    @Transactional\n    public Task logWork(Date date, Double amount, Long taskId) {\n        Task task = taskRepository.findById(taskId).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        UserEntity user = userRepository\n                .findByUsername(SecurityContext.getUsernameOrElseThrow())\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n        if (task.getHoursLogged() == null) {\n            task.setHoursLogged(List.of());\n        }\n\n        TimeLog timeLog = new TimeLog();\n        timeLog.setAmount(amount);\n        timeLog.setDate(date);\n        timeLog.setLoggedBy(user);\n        timeLog.setCreatedAt(new Date());\n        timeLog.setCreator(user.getUsername());\n\n        task.getHoursLogged().add(timeLog);\n\n        timeLog.setTask(task);\n\n        worklogRepository.save(timeLog);\n\n        return task;\n    }\n\n    @Transactional\n    public Task deleteWorkLog(Long timeLogId, Long taskId) {\n        Task task = taskRepository.findById(taskId).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        TimeLog timeLog =\n                worklogRepository.findById(timeLogId).orElseThrow(() -> new RuntimeException(\"Time log not found\"));\n\n        task.getHoursLogged().remove(timeLog);\n\n        worklogRepository.delete(timeLog);\n        taskRepository.save(task);\n\n        return task;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/service/CurrentUserTaskSearchService.java =====\npackage com.ua.crow.mes.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.repo.TaskSearchRepository;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.util.SecurityContext;\nimport jakarta.transaction.Transactional;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.function.Supplier;\nimport lombok.SneakyThrows;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CurrentUserTaskSearchService {\n    final TaskSearchRepository taskSearchRepository;\n    final TaskStatusRepository taskStatusRepository;\n    final UserRepository userRepository;\n\n    public CurrentUserTaskSearchService(\n            TaskSearchRepository taskRepository,\n            TaskStatusRepository taskStatusRepository,\n            UserRepository userRepository) {\n        this.taskSearchRepository = taskRepository;\n        this.taskStatusRepository = taskStatusRepository;\n        this.userRepository = userRepository;\n    }\n\n    @Transactional\n    public Page<Task> getPlannedForTodayTasksOfUser(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByPlannedStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdInForToday(\n                user.getId(), false, statuses, LocalDateTime.now(), pageable);\n    }\n\n    @Transactional\n    public Page<Task> getInProgressTasksOfUser(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByInProgressStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n                user.getId(), false, statuses, pageable);\n    }\n\n    @Transactional\n    public Page<Task> getPlannedTasksOfUser(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByPlannedStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n                user.getId(), false, statuses, pageable);\n    }\n\n    @Transactional\n    public Page<Task> computeBacklog(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByBacklogStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n                user.getId(), false, statuses, pageable);\n    }\n\n    @SneakyThrows\n    private UserEntity detectCurrentUser() {\n        return userRepository\n                .findByUsername(SecurityContext.getUsernameOrElseThrow())\n                .orElseThrow((Supplier<Throwable>) () -> new UsernameNotFoundException(\"User not found\"));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/service/TaskService.java =====\npackage com.ua.crow.mes.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.repository.*;\nimport com.ua.crow.mes.dto.CreateTaskRequest;\nimport com.ua.crow.mes.dto.UpdateTaskRequest;\nimport com.ua.crow.mes.database.*;\nimport com.ua.crow.mes.repo.SubTaskRepository;\nimport com.ua.crow.mes.repo.TaskRepository;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.mes.repo.TaskTypeRepository;\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.service.BadRequest;\nimport com.ua.crow.util.SecurityContext;\nimport jakarta.transaction.Transactional;\nimport java.util.*;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TaskService {\n    final TaskRepository taskRepository;\n    final CrowUserService crowUserService;\n    final TaskTypeRepository taskTypeRepository;\n    final TaskStatusRepository taskStatusRepository;\n    final UserRepository userRepository;\n    final SubTaskRepository subTaskRepository;\n\n    public TaskService(\n            TaskRepository taskRepository,\n            CrowUserService crowUserService,\n            TaskTypeRepository taskTypeRepository,\n            TaskStatusRepository taskStatusRepository,\n            UserRepository userRepository,\n            SubTaskRepository subTaskRepository\n            ) {\n        this.taskRepository = taskRepository;\n        this.crowUserService = crowUserService;\n        this.taskTypeRepository = taskTypeRepository;\n        this.taskStatusRepository = taskStatusRepository;\n        this.userRepository = userRepository;\n        this.subTaskRepository = subTaskRepository;\n    }\n\n    @Transactional\n    public Task createTask(CreateTaskRequest taskRequest) {\n        if (taskRequest.getName() == null || taskRequest.getName().isEmpty()) {\n            throw new BadRequest(\"Name is required\");\n        }\n        if (taskRequest.getAssignee() == null) {\n            throw new BadRequest(\"Assignee is required\");\n        }\n\n        UserEntity appsmithUserAssignee = crowUserService.getUserEntity(taskRequest.getAssignee());\n        UserEntity assignee = userRepository\n                .findByUsername(appsmithUserAssignee.getUsername())\n                .orElseThrow(() -> new BadRequest(\"Assignee login not found\"));\n\n        UserEntity appsmithUserCurrent = crowUserService.getUserEntity(SecurityContext.getUsernameOrElseThrow());\n\n        UserEntity appsmithUserReporter = crowUserService.getUserEntity(taskRequest.getReporter());\n        UserEntity reporter = taskRequest.getReporter() == null ? appsmithUserCurrent : appsmithUserReporter;\n\n        Long taskTypeId = taskRequest.getTaskType() != null ? taskRequest.getTaskType() : 1L;\n        TaskType taskType =\n                taskTypeRepository.findById(taskTypeId).orElseThrow(() -> new BadRequest(\"Task type not found\"));\n\n        TaskStatus taskStatus = taskStatusRepository\n                .findByTaskTypeAndInitialStatusIsTrue(taskType)\n                .findFirst()\n                .orElseThrow(() -> new RuntimeException(\"Initial Task status for type is not defined\"));\n\n        Severity severity =\n                taskRequest.getSeverity() == null ? Severity.MEDIUM : Severity.fromValue(taskRequest.getSeverity());\n\n        Task task = new Task();\n\n        task.setName(taskRequest.getName());\n        task.setDescription(taskRequest.getDescription());\n        task.setAssignee(assignee);\n        task.setReporter(reporter);\n        task.setStart(taskRequest.getStart());\n        task.setEndTime(taskRequest.getEnd());\n        task.setCreator(appsmithUserCurrent.getUsername());\n        task.setCreatedAt(new Date());\n        task.setTaskType(taskType);\n        task.setStatus(taskStatus);\n        task.setSeverity(severity);\n\n        if (taskRequest.getParent() != null) {\n            task.setSubtask(true);\n\n            Subtask subtask = new Subtask();\n            subtask.setTask(task);\n            subtask.setCreator(appsmithUserCurrent.getUsername());\n            subtask.setCreatedAt(new Date());\n\n            Task parentTask = taskRepository\n                    .findById(taskRequest.getParent())\n                    .orElseThrow(() -> new BadRequest(\"Parent task not found\"));\n\n            Set<Subtask> subtasks = parentTask.getSubtasks();\n            if (subtasks == null) {\n                subtasks = Set.of(subtask);\n            }\n\n            subtasks.add(subtask);\n            parentTask.setSubtasks(subtasks);\n            subTaskRepository.save(subtask);\n            taskRepository.save(parentTask);\n        }\n        return taskRepository.save(task);\n    }\n\n    @Transactional\n    public Optional<Task> getTaskById(long id) {\n        return taskRepository.findById(id);\n    }\n\n    @Transactional\n    public void deleteTask(long id) {\n        Task task = taskRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        task.setDeleted(true);\n        taskRepository.save(task);\n    }\n\n    @Transactional\n    public Task updateName(String name, Long id) {\n        Task task = taskRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        task.setName(name);\n        taskRepository.save(task);\n        return task;\n    }\n\n    @Transactional\n    public Task updateTaskProperty(UpdateTaskRequest request, Long id) {\n        boolean updateStatus = false;\n        Task task = taskRepository.findById(id).orElseThrow(() -> new BadRequest(\"Task not found\"));\n        if (request.getStatus() != null) {\n            task = changeStatus(request.getStatus(), task);\n            updateStatus = true;\n        }\n        if (request.getSeverity() != null) {\n            task.setSeverity(Severity.fromValue(request.getSeverity()));\n            updateStatus = true;\n        }\n        if (request.getName() != null) {\n            task.setName(request.getName());\n            updateStatus = true;\n        }\n        if (request.getDescription() != null) {\n            task.setDescription(request.getDescription());\n            updateStatus = true;\n        }\n        if (request.getAssignee() != null) {\n            task.setAssignee(crowUserService.getUserEntity(request.getAssignee()));\n            updateStatus = true;\n        }\n        if (request.getReporter() != null) {\n            task.setReporter(crowUserService.getUserEntity(request.getReporter()));\n            updateStatus = true;\n        }\n        if (request.getParent() != null) {\n            Task parent = taskRepository\n                    .findById(request.getParent())\n                    .orElseThrow(() -> new RuntimeException(\"Parent task not found\"));\n            Set<Subtask> subtasks = parent.getSubtasks();\n            if (subtasks == null) {\n                subtasks = Set.of();\n            }\n            Task finalTask = task;\n            if (subtasks.stream().anyMatch(subtask -> subtask.getTask().getId().equals(finalTask.getId()))) {\n                throw new BadRequest(\"Task already in subtasks\");\n            }\n            Optional<Subtask> max = subtasks.stream().max(Comparator.comparing(Subtask::getSequence));\n            Subtask subtask = new Subtask();\n            subtask.setTask(task);\n            subtask.setSequence(max.map(value -> value.getSequence() + 10).orElse(1));\n            subtasks.add(subtask);\n            parent.setSubtasks(subtasks);\n            taskRepository.save(parent);\n            task.setSubtask(true);\n            taskRepository.save(task);\n        }\n        if (request.getTaskType() != null) {\n            task.setTaskType(taskTypeRepository\n                    .findById(request.getTaskType())\n                    .orElseThrow(() -> new RuntimeException(\"Task type not found\")));\n            updateStatus = true;\n        }\n        if (request.getEnd() != null) {\n            task.setEndTime(request.getEnd());\n            updateStatus = true;\n        }\n        if (request.getStart() != null) {\n            task.setStart(request.getStart());\n            updateStatus = true;\n        }\n        if (updateStatus) {\n            task.setModifiedAt(new Date());\n            task.setModifier(SecurityContext.getUsernameOrElseThrow());\n            taskRepository.save(task);\n        }\n        return task;\n    }\n\n    private Task changeStatus(Long status, Task task) {\n        TaskStatus currentStatus = task.getStatus();\n        if (currentStatus == null) {\n            throw new BadRequest(\"Task status is not defined. Unable to determine next status\");\n        }\n        if (currentStatus.getId().equals(status)) {\n            return task;\n        }\n        // getting object with all fields\n        currentStatus = taskStatusRepository\n                .findById(currentStatus.getId())\n                .orElseThrow(() -> new RuntimeException(\"Task status not found\"));\n        if (currentStatus.getAvailableNextStatuses() == null\n                || currentStatus.getAvailableNextStatuses().isEmpty()) {\n            throw new BadRequest(\"Task status is not defined. Unable to determine next status\");\n        }\n        if (currentStatus.getAvailableNextStatuses().stream()\n                .noneMatch(taskStatus -> taskStatus.getId().equals(status))) {\n            throw new BadRequest(\"Unable to perform status transition\");\n        }\n        TaskStatus newStatus =\n                taskStatusRepository.findById(status).orElseThrow(() -> new RuntimeException(\"Task status not found\"));\n        task.setStatus(newStatus);\n        return task;\n    }\n\n    public Double computeTotalHoursLogged(Task task) {\n        if (task != null && task.getHoursLogged() != null) {\n            return task.getHoursLogged().stream().map(TimeLog::getAmount).reduce(0d, Double::sum);\n        }\n        return null;\n    }\n\n    public int getSubtasksCount(Task task) {\n        if (task != null && task.getSubtasks() != null) {\n            return task.getSubtasks().size();\n        }\n        return 0;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/WorkLogController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.conversion.TaskMapper;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport com.ua.crow.mes.service.WorkLogService;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"worklogs\")\npublic class WorkLogController {\n    final WorkLogService workLogService;\n    final TaskMapper taskMapper;\n\n    public WorkLogController(WorkLogService workLogService, TaskMapper taskMapper) {\n        this.workLogService = workLogService;\n        this.taskMapper = taskMapper;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PostMapping\n    public TaskDto logWork(@RequestBody TimeLogDto timeLogDto) {\n        if (timeLogDto.getTaskId() == null) {\n            throw new RuntimeException(\"Task id is required\");\n        }\n\n        Task task = workLogService.logWork(timeLogDto.getDate(), timeLogDto.getAmount(), timeLogDto.getTaskId());\n        return taskMapper.toDto(task);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @DeleteMapping(\"{timeLogId}/task/{taskId}\")\n    public TaskDto deleteWorkLog(@PathVariable Long timeLogId, @PathVariable Long taskId) {\n        if (taskId == null) {\n            throw new RuntimeException(\"Task id is required\");\n        }\n        if (timeLogId == null) {\n            throw new RuntimeException(\"Time log id is required\");\n        }\n        Task task = workLogService.deleteWorkLog(timeLogId, taskId);\n        return taskMapper.toDto(task);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/TaskController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.conversion.TaskMapper;\nimport com.ua.crow.mes.dto.CreateTaskRequest;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.UpdateTaskRequest;\nimport com.ua.crow.mes.service.TaskService;\nimport jakarta.annotation.security.RolesAllowed;\nimport java.util.Optional;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController()\n@RequestMapping(\"tasks\")\npublic class TaskController {\n\n    final TaskService taskService;\n    final TaskMapper taskMapper;\n\n    public TaskController(TaskService taskService, TaskMapper taskMapper) {\n        this.taskService = taskService;\n        this.taskMapper = taskMapper;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(value = \"{id}\", produces = \"application/json\")\n    public ResponseEntity<TaskDto> getTask(@PathVariable Long id) {\n        Optional<Task> task = taskService.getTaskById(id);\n//        FileSearchService.TaskFiles files = fileSearchService.getFilesForTask(id);\n        return task.map(value -> {\n                    TaskDto taskDto = taskMapper.toDto(value);\n//                    taskDto.setAudioUrl(files.primaryAudio());\n//                    taskDto.setAttachments(files.attachments());\n                    return ResponseEntity.ok(taskDto);\n                })\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PostMapping(produces = \"application/json\")\n    public ResponseEntity<TaskDto> createTask(@RequestBody CreateTaskRequest taskRequest) {\n        Task task = taskService.createTask(taskRequest);\n        return ResponseEntity.ok(taskMapper.toDto(task));\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PatchMapping(\"{id}\")\n    public TaskDto updateTask(@RequestBody UpdateTaskRequest request, @PathVariable Long id) {\n        return taskMapper.toDto(taskService.updateTaskProperty(request, id));\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @DeleteMapping(value = \"{id}\", produces = \"application/json\")\n    public ResponseEntity<?> deleteTask(@PathVariable Long id) {\n        taskService.deleteTask(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @ExceptionHandler({Exception.class})\n    public ResponseEntity<?> handleException(Exception exception) {\n        return ResponseEntity.badRequest().body(new Exception(exception.getMessage()));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/FileUploadController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.dto.FileTypes;\nimport com.ua.crow.mes.dto.AttachmentDto;\nimport com.ua.crow.mes.dto.Exception;\nimport com.ua.crow.mes.dto.FileUploadRequest;\nimport com.ua.crow.exceptions.FileUploadException;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.servlet.http.HttpServletRequest;\n\nimport java.io.IOException;\nimport java.security.InvalidParameterException;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"files\")\npublic class FileUploadController {\n\n    public FileUploadController( ) {\n\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PostMapping(\"/upload\")\n    public ResponseEntity<AttachmentDto> upload(@ModelAttribute FileUploadRequest request, ModelMap modelMap)\n            throws IOException, InvalidParameterException {\n        modelMap.addAttribute(request);\n\n        if (request.taskId() == null) throw new FileUploadException(\"Missing task Id\");\n        if (request.fileType().equals(FileTypes.AUDIO)\n                && request.isPrimaryAudio().equals(null))\n            throw new FileUploadException(\"Missing audioUploadSettings parameter\");\n\n//        String path = fileUploadService.uploadFile(\n//                request.taskId(), request.fileType(), request.isPrimaryAudio(), request.file());\n        return ResponseEntity.ok(new AttachmentDto(\"\"));\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/s3/**\")\n    public @ResponseBody byte[] download(HttpServletRequest request) throws IOException {\n        String filePath = request.getRequestURL().toString().split(\"s3/\")[1];\n        return null;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @DeleteMapping(\"/s3/**\")\n    public ResponseEntity<?> delete(HttpServletRequest request) {\n        String filePath = request.getRequestURL().toString().split(\"s3/\")[1];\n//        fileUploadService.deleteFile(filePath);\n        return ResponseEntity.ok().build();\n    }\n\n    @ExceptionHandler({FileUploadException.class})\n    public ResponseEntity<?> handleInvalidParameterException(FileUploadException ex) {\n        return ResponseEntity.badRequest().body(new Exception(ex.getMessage()));\n    }\n\n    @ExceptionHandler({IOException.class})\n    public ResponseEntity<?> handleIOException(IOException ex) {\n        return ResponseEntity.internalServerError().body(new Exception(ex.getMessage()));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/ReferenceController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Severity;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.mes.repo.TaskTypeRepository;\nimport com.ua.crow.mes.conversion.SeverityMapper;\nimport com.ua.crow.mes.conversion.TaskStatusMapper;\nimport com.ua.crow.mes.conversion.TaskTypeMapper;\nimport com.ua.crow.mes.dto.SeverityDto;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport jakarta.annotation.security.RolesAllowed;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@RequestMapping(\"references\")\npublic class ReferenceController {\n    final TaskStatusRepository taskStatusRepository;\n    final TaskTypeRepository taskTypeRepository;\n    final SeverityMapper severityMapper;\n    final TaskStatusMapper taskStatusMapper;\n    final TaskTypeMapper taskTypeMapper;\n\n    public ReferenceController(\n            TaskStatusRepository taskStatusRepository,\n            TaskTypeRepository taskTypeRepository,\n            SeverityMapper severityMapper,\n            TaskStatusMapper taskStatusMapper,\n            TaskTypeMapper taskTypeMapper) {\n        this.taskStatusRepository = taskStatusRepository;\n        this.taskTypeRepository = taskTypeRepository;\n        this.severityMapper = severityMapper;\n        this.taskStatusMapper = taskStatusMapper;\n        this.taskTypeMapper = taskTypeMapper;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/severityList\")\n    public List<SeverityDto> severityList() {\n        return Stream.of(Severity.values()).map(severityMapper::toDto).toList();\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/taskStatusList\")\n    public List<TaskStatusDto> taskStatusList() {\n        List<TaskStatusDto> list = new LinkedList<>();\n        taskStatusRepository.findAll().forEach(taskStatus -> list.add(taskStatusMapper.toDto(taskStatus)));\n        return list;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/nextStatusList\")\n    public List<TaskStatusDto> nextStatusList(@RequestParam Long id) {\n        List<TaskStatusDto> list = new LinkedList<>();\n        taskStatusRepository.findById(id).ifPresent(taskStatus -> taskStatus\n                .getAvailableNextStatuses()\n                .forEach(status -> list.add(taskStatusMapper.toDto(status))));\n        return list;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/task-types\")\n    public List<TaskTypeDto> getTaskTypes() {\n        return StreamSupport.stream(taskTypeRepository.findAll().spliterator(), false)\n                .filter(taskType -> !taskType.isDeleted())\n                .map(taskTypeMapper::toDto)\n                .toList();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/CurrentUserTaskController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.conversion.TaskMapper;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.mes.service.CurrentUserTaskSearchService;\nimport com.ua.crow.mes.service.TaskService;\nimport jakarta.annotation.security.RolesAllowed;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.data.web.SortDefault;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"user-tasks\")\npublic class CurrentUserTaskController {\n    final TaskService taskService;\n\n    final CurrentUserTaskSearchService currentUserTaskSearchService;\n\n    final TaskMapper taskMapper;\n\n    final CrowUserService crowUserService;\n\n    public CurrentUserTaskController(\n            TaskService taskService,\n            CurrentUserTaskSearchService currentUserTaskSearchService,\n            TaskMapper taskMapper,\n            CrowUserService crowUserService) {\n        this.taskService = taskService;\n        this.currentUserTaskSearchService = currentUserTaskSearchService;\n        this.taskMapper = taskMapper;\n        this.crowUserService = crowUserService;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/planned-for-today\")\n    public Page<TaskDto> getMyTodayTasks(\n            @PageableDefault(size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService\n                .getPlannedForTodayTasksOfUser(pageable)\n                .map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/planned\")\n    public Page<TaskDto> getMyPlannedTasks(\n            @PageableDefault(page = 0, size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService.getPlannedTasksOfUser(pageable).map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/in-progress\")\n    public Page<TaskDto> getMyInProgressTasks(\n            @PageableDefault(page = 0, size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService.getInProgressTasksOfUser(pageable).map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/backlog\")\n    public Page<TaskDto> getMyTasks(\n            @PageableDefault(page = 0, size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService.computeBacklog(pageable).map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping\n    public ResponseEntity<List<TaskDto>> getMyTasks(@RequestParam Long[] ids) {\n        List<Task> list = new ArrayList<>();\n        for (Long id : ids) {\n            Optional<Task> task = taskService.getTaskById(id);\n            if (task.isEmpty()) return ResponseEntity.notFound().build();\n            list.add(task.get());\n        }\n        return ResponseEntity.ok(list.stream().map(taskMapper::toDto).toList());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/WorklogRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.TimeLog;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WorklogRepository extends CrudRepository<TimeLog, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/SubTaskRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.Subtask;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface SubTaskRepository extends CrudRepository<Subtask, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskSearchRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.Task;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\npublic interface TaskSearchRepository extends PagingAndSortingRepository<Task, Long> {\n    @Query(\n            \"select t from Task t where (t.assignee.id = ?1  or t.assignee is null) and t.deleted = false and t.isSubtask = ?2 and t.status.id in(?3) order by t.severity desc\")\n    Page<Task> findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n            Long assigneeId, boolean isSubtask, List<Long> taskStatusId, Pageable pageable);\n\n    @Query(\n            \"select t from Task t where (t.assignee.id = ?1  or t.assignee is null) and t.deleted = false and t.isSubtask = ?2 and t.status.id in(?3) and (?4) between t.start and t.endTime order by t.severity desc\")\n    Page<Task> findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdInForToday(\n            Long assigneeId, boolean isSubtask, List<Long> taskStatusId, LocalDateTime today, Pageable pageable);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.Task;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface TaskRepository extends CrudRepository<Task, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskTypeRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.TaskType;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface TaskTypeRepository extends CrudRepository<TaskType, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskStatusRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.database.TaskType;\nimport java.util.stream.Stream;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface TaskStatusRepository extends CrudRepository<TaskStatus, Long> {\n    Stream<TaskStatus> findByTaskTypeAndInitialStatusIsTrue(TaskType taskType);\n\n    Stream<TaskStatus> findByTaskTypeAndTerminatedStatusIsFalse(TaskType taskType);\n\n    Stream<TaskStatus> findByTerminatedStatusIsFalse();\n\n    Stream<TaskStatus> findByInProgressStatusIsTrue();\n\n    Stream<TaskStatus> findByPlannedStatusIsTrue();\n\n    Stream<TaskStatus> findByBacklogStatusIsTrue();\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/AppShell.java =====\npackage com.ua.crow;\n\nimport com.vaadin.flow.component.page.AppShellConfigurator;\nimport com.vaadin.flow.component.page.Push;\nimport com.vaadin.flow.shared.communication.PushMode;\nimport com.vaadin.flow.shared.ui.Transport;\nimport com.vaadin.flow.theme.Theme;\n\n@Push(value = PushMode.AUTOMATIC, transport = Transport.WEBSOCKET)\n@Theme(value = \"crow\")\n\npublic class AppShell implements AppShellConfigurator {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/exceptions/MinioException.java =====\npackage com.ua.crow.exceptions;\n\npublic class MinioException extends RuntimeException{\n    public MinioException() {\n        super();\n    }\n\n    public MinioException(String message) {\n        super(message);\n    }\n\n    public MinioException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public MinioException(Throwable cause) {\n        super(cause);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/exceptions/FileUploadException.java =====\npackage com.ua.crow.exceptions;\n\nimport java.security.InvalidParameterException;\n\npublic class FileUploadException extends InvalidParameterException {\n    public FileUploadException(String msg) {\n        super(msg);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ItemGroup.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n// screws, nuts, grinders etc customised by customer, any catalogs defined by user\n@Getter\n@Setter\n@Entity\npublic class ItemGroup extends BasicEntityWithNumericId {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ToolType.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport jakarta.persistence.Entity;\n\n// Matherials\n// Tools managed by the system\n// Electric tools independent on system\n// Manual tools etc\n@Entity\npublic class ToolType extends NamedNumericIdEntity {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ResourceItem.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Setter\n@Getter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class ResourceItem extends NamedBasicEntityWithNumericId {\n\n    @Enumerated(EnumType.STRING)\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    private double price;\n\n    @ManyToOne\n    @JoinColumn(name = \"group_id\")\n    private ResourceGroup group;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/InventoryPurchase.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.cashbox.Cashbox;\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.Currency;\nimport com.ua.crow.inventory.database.ToolItem;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n// Add tools withdraw tools from inventory\n\n@Getter\n@Setter\n@Entity\npublic class InventoryPurchase extends BasicEntityWithNumericId {\n    @ManyToOne\n    private ToolItem tool;\n\n    private Double price;\n\n    @ManyToOne\n    private Currency currency;\n\n    @ManyToOne\n    Cashbox cashbox;\n\n    private Double amount;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/InventoryDecomissioning.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ToolItem;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class InventoryDecomissioning extends BasicEntityWithNumericId {\n\n    @ManyToOne\n    private ToolItem item;\n\n    private String reason;\n\n    private Double amount;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/Inventarisation.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport java.util.Date;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Inventarisation extends BasicEntityWithNumericId {\n    private Date inventarisationDateStart;\n    private Date inventarisationDateEnd;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/InventoryCheckIn.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ToolItem;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Date;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class InventoryCheckIn extends BasicEntityWithNumericId {\n    @ManyToOne\n    private ToolItem item;\n\n    private Date checkInDate;\n\n    @ManyToOne\n    private Inventarisation inventarisation;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ToolItem.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class ToolItem extends NamedBasicEntityWithNumericId {\n\n    private boolean participatesInventarisation;\n\n    @ManyToOne\n    private ToolType type;\n\n    private String barcode;\n\n    private String photo;\n\n    @ManyToOne\n    private ItemGroup itemGroup;\n\n    @ManyToOne\n    private Units units;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/InventoryLeftovers.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\npublic class InventoryLeftovers extends NumericIdEntity {\n    @ManyToOne\n    Stock stock;\n\n    @ManyToOne\n    ToolItem item;\n\n    Double leftover;\n\n    Date effectiveDate;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/Stock.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Stock extends BasicEntityWithNumericId {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ResourceGroup.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.AbstractResourceGroup;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.List;\n\n@Setter\n@Getter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class ResourceGroup extends AbstractResourceGroup<ResourceGroup> implements Convertable {\n\n    @Enumerated(EnumType.STRING)\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    @OneToMany(mappedBy = \"group\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    List<ResourceItem> resources;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/conversion/ResourceGroupDtoToEntity.java =====\npackage com.ua.crow.inventory.conversion;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ResourceGroupDtoToEntity implements Converter<ResourceGroupDto, ResourceGroup> {\n\n    @Override\n    public ResourceGroup convert(ResourceGroupDto source) {\n        return toEntity(source);\n    }\n\n    public ResourceGroup toEntity(ResourceGroupDto dto) {\n        if (dto == null) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n        resourceGroup.setId(dto.getId());\n        resourceGroup.setName(dto.getName());\n        resourceGroup.setCreatedAt(dto.getCreatedAt());\n        resourceGroup.setModifiedAt(dto.getModifiedAt());\n        resourceGroup.setCreator(dto.getCreator());\n        resourceGroup.setModifier(dto.getModifier());\n        resourceGroup.setDeleted(dto.isDeleted());\n        resourceGroup.setUkrName(dto.getUkrName());\n        resourceGroup.setWithdrawAlgorythm(dto.getWithdrawAlgorythm());\n        resourceGroup.setMinimalUnitToWithdraw(dto.getMinimalUnitToWithdraw());\n        resourceGroup.setResources(dto.getResources());\n        resourceGroup.setParent(dto.getParent());\n\n        // Explicitly ignore children\n        resourceGroup.setChildren(null);\n\n        return resourceGroup;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/conversion/ResourceGroupToDto.java =====\npackage com.ua.crow.inventory.conversion;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.converters.mappers.ResourceGroupMapper;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ResourceGroupToDto implements Converter<ResourceGroup, ResourceGroupDto> {\n\n    @Autowired\n    private  ResourceGroupMapper resourceGroupMapper;\n\n    @Override\n    public ResourceGroupDto convert(ResourceGroup source) {\n        return toDto(source);\n    }\n\n    public ResourceGroupDto toDto(ResourceGroup resourceGroup) {\n        if (resourceGroup == null) {\n            return null;\n        }\n\n        ResourceGroupDto dto = new ResourceGroupDto();\n        dto.setId(resourceGroup.getId());\n        dto.setName(resourceGroup.getName());\n        dto.setCreatedAt(resourceGroup.getCreatedAt());\n        dto.setModifiedAt(resourceGroup.getModifiedAt());\n        dto.setCreator(resourceGroup.getCreator());\n        dto.setModifier(resourceGroup.getModifier());\n        dto.setDeleted(resourceGroup.isDeleted());\n        dto.setUkrName(resourceGroup.getUkrName());\n        dto.setWithdrawAlgorythm(resourceGroup.getWithdrawAlgorythm());\n        dto.setMinimalUnitToWithdraw(resourceGroup.getMinimalUnitToWithdraw());\n        dto.setResources(resourceGroup.getResources());\n        dto.setParent(resourceGroup.getParent());\n\n        // Explicitly ignore children\n        dto.setChildren(null);\n\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/service/ResourceGroupService.java =====\npackage com.ua.crow.inventory.service;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.repo.ResourceGroupRepository;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.service.graph.AbstractTreeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n\n\n@Service\npublic class ResourceGroupService extends AbstractTreeService<ResourceGroup, Long> {\n\n    private final ResourceGroupRepository resourceGroupRepository;\n\n    @Autowired\n    public ResourceGroupService(ResourceGroupRepository resourceGroupRepository) {\n        this.resourceGroupRepository = resourceGroupRepository;\n\n    }\n\n\n\n    @Transactional(readOnly = true)\n    public Optional<ResourceGroupDto> findById(Long id) {\n        Optional<ResourceGroup> resourceGroup = resourceGroupRepository.findById(id);\n        return resourceGroup.map(e->e.convert(ResourceGroupDto.class));\n    }\n\n\n    @Override\n    protected CrudRepository<ResourceGroup, Long> getRepository() {\n        return resourceGroupRepository;\n    }\n\n//    @Transactional(readOnly = true)\n//    public List<ResourceGroupDto> getTree() {\n//        List<ResourceGroup> allGroups = StreamSupport.stream(resourceGroupRepository.findAll().spliterator(), false)\n//                .collect(Collectors.toList());\n//        List<ResourceGroup> tree = buildTree(allGroups);\n//        return tree.stream().map(resourceGroupMapper::toDto).collect(Collectors.toList());\n//    }\n\n\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/repo/ToolTypeRepository.java =====\npackage com.ua.crow.inventory.repo;\n\nimport com.ua.crow.inventory.database.ToolType;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ToolTypeRepository extends CrudRepository<ToolType, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/repo/ResourceGroupRepository.java =====\npackage com.ua.crow.inventory.repo;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ResourceGroupRepository extends CrudRepository<ResourceGroup, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/repo/ItemRepository.java =====\npackage com.ua.crow.inventory.repo;\n\nimport com.ua.crow.inventory.database.ToolItem;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ItemRepository extends CrudRepository<ToolItem, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/ResourceAlreadyExist.java =====\npackage com.ua.crow.service;\n\npublic class ResourceAlreadyExist extends RuntimeException{\n\n    public ResourceAlreadyExist() {\n    }\n\n    public ResourceAlreadyExist(String message) {\n        super(message);\n    }\n\n    public ResourceAlreadyExist(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public ResourceAlreadyExist(Throwable cause) {\n        super(cause);\n    }\n\n    public ResourceAlreadyExist(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/BadRequest.java =====\npackage com.ua.crow.service;\n\npublic class BadRequest extends RuntimeException {\n    public BadRequest(String message) {\n        super(message);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/graph/AbstractTreeService.java =====\npackage com.ua.crow.service.graph;\n\nimport com.ua.crow.database.models.common.AbstractResourceGroup;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\npublic abstract class AbstractTreeService<E extends AbstractResourceGroup<E>, ID> {\n\n    protected abstract CrudRepository<E, ID> getRepository();\n\n    @Transactional(readOnly = true)\n    public List<E> findAll() {\n        return StreamSupport.stream(getRepository().findAll().spliterator(), false)\n                .collect(Collectors.toList());\n    }\n\n    @Transactional(readOnly = true)\n    public List<E> getTree() {\n        List<E> allGroups = findAll();\n        return buildTree(allGroups);\n    }\n\n    protected List<E> buildTree(List<E> allGroups) {\n        List<E> roots = allGroups.stream()\n                .filter(group -> group.getParent() == null)\n                .collect(Collectors.toList());\n        roots.forEach(root -> setChildren(root, allGroups));\n        return roots;\n    }\n\n    private void setChildren(E parent, List<E> allGroups) {\n        List<E> children = allGroups.stream()\n                .filter(group -> group.getParent() != null && group.getParent().getId().equals(parent.getId()))\n                .collect(Collectors.toList());\n        parent.setChildren(children);\n        children.forEach(child -> setChildren(child, allGroups));\n    }\n\n    @Transactional\n    public E save(E entity) {\n        return getRepository().save(entity);\n    }\n\n    @Transactional\n    public void deleteById(ID id) {\n        getRepository().deleteById(id);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/minio/MinioService.java =====\npackage com.ua.crow.service.minio;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.config.Minio;\nimport com.ua.crow.exceptions.MinioException;\nimport com.ua.crow.plm.service.UriEncodingService;\nimport io.minio.*;\nimport io.minio.errors.*;\nimport io.minio.http.Method;\nimport io.minio.messages.Item;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\n@Service\npublic class MinioService {\n    @Autowired\n    Minio minio;\n    @Value(\"${tempdir.url}\")\n    private String tempBufferAddress;\n\n    @Value(\"${minio.url}\")\n    private String url;\n    @Autowired\n    UriEncodingService encodingService;\n\n    @Autowired\n    RestTemplate restTemplate;\n\n    public void createFolder(Buckets bucket, String directoryName) {\n        try {\n            minio.getClient().putObject(\n                    PutObjectArgs.builder()\n                            .bucket(bucket.name())\n                            .object(removeNonLetters(directoryName) + \"/\") // имя \"файла\" с завершающим слэшем указывает на каталог\n                            .stream(new ByteArrayInputStream(new byte[]{}), 0, -1)\n                            .build()\n            );\n        } catch (ServerException | InsufficientDataException | ErrorResponseException | IOException |\n                 NoSuchAlgorithmException | InvalidKeyException | InvalidResponseException | XmlParserException |\n                 InternalException e) {\n            throw new MinioException(e);\n        }\n    }\n\n    public static String removeNonLetters(String input) {\n        if (input == null || input.isEmpty()) {\n            return \"\";\n        }\n        // Используем регулярное выражение для удаления всех символов, кроме букв (латиница и кириллица)\n        String lettersOnly = input.replaceAll(\"[^a-zA-Zа-яА-Я_0-9/]\", \"\");\n        // Преобразуем строку в верхний регистр\n        return lettersOnly;\n    }\n\n    public void uploadFileFromUrl(Buckets bucket, String folder, String thumbnailUrl) {\n        uploadFileFromUrl(bucket, folder, thumbnailUrl, null);\n    }\n\n    public Stream<Result<Item>> list(Buckets bucket, String folder) {\n        return StreamSupport.stream(minio.getClient()\n                .listObjects(ListObjectsArgs.builder().bucket(bucket.name())\n                        .prefix(folder)\n                        .recursive(false)\n                        .build()).spliterator(), false);\n\n    }\n\n    public Optional<String> getSignedUrlForTheFirstObjectInFolder(Buckets bucket, String folder) {\n        return list(bucket, folder).map(i -> get(i)).findFirst().flatMap(i -> Optional.of(sign(bucket, i.objectName())));\n    }\n\n    private Item get(Result<Item> i) {\n        try {\n            return i.get();\n        } catch (Exception e) {\n            throw new MinioException(\"Error occurred while getting signed URL for the first object\", e);\n        }\n    }\n\n\n    public String sign(Buckets bucket, String objectName) {\n        try {\n            return minio.getClient()\n                    .getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()\n                            .method(Method.GET)\n                            .bucket(bucket.name())\n                            .object(objectName)\n                            .expiry(1, TimeUnit.HOURS)\n                            .build());\n        } catch (Exception e) {\n            throw new MinioException(e);\n        }\n    }\n\n    public byte[] getObjectAsBytes(Buckets bucket, String objectName) {\n        try (InputStream stream = minio.getClient().getObject(\n                GetObjectArgs.builder()\n                        .bucket(bucket.name())\n                        .object(objectName)\n                        .build());\n             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {\n\n            byte[] buffer = new byte[8192];\n            int bytesRead;\n            while ((bytesRead = stream.read(buffer)) != -1) {\n                byteArrayOutputStream.write(buffer, 0, bytesRead);\n            }\n            return byteArrayOutputStream.toByteArray();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error occurred while getting object from MinIO\", e);\n        }\n    }\n\n\n    public void uploadFileFromUrl(Buckets bucket, String folder, String thumbnailUrl, String filename) {\n\n        InputStream inputStream;\n        HttpResponse<InputStream> response = httpGet(thumbnailUrl);\n        // Получение InputStream из файла\n        inputStream = response.body();\n\n        if (filename == null) {\n            filename = UUID.randomUUID().toString();\n\n        }\n        // Определение имени объекта для MinIO\n        if (folder == null) {\n            throw new NullPointerException(\"Folder is empty\");\n        }\n        String objectName = folder + \"/\" + filename;\n\n        Optional<String> contentLength = response.headers().firstValue(\"Content-Length\");\n        long length = contentLength.map(Long::parseLong).orElse(-1L);\n\n        // Получение типа содержимого\n        Optional<String> contentType = response.headers().firstValue(\"Content-Type\");\n        String type = contentType.orElse(\"application/octet-stream\");\n\n        // Загрузка файла в MinIO\n        put(bucket, objectName, inputStream, length, type);\n\n\n    }\n\n    public HttpResponse<InputStream> httpGet(String url) {\n        try {\n\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(url))\n                    .GET()\n                    .build();\n\n            HttpResponse<InputStream> response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());\n\n            // Проверка ответа сервера\n            if (response.statusCode() != 200) {\n                throw new RuntimeException(\"Failed to connect to URL: \" + url);\n            }\n            return response;\n        } catch (IOException | InterruptedException e) {\n            throw new RuntimeException(\"Error occurred while downloading the file\", e);\n        }\n\n    }\n\n    public void put(Buckets bucket, String objectName, InputStream inputStream, long length, String type) {\n        try {\n            minio.getClient().putObject(\n                    PutObjectArgs.builder()\n                            .bucket(bucket.name())\n                            .object(objectName)\n                            .stream(inputStream, length, -1)\n                            .contentType(type)\n                            .build());\n        } catch (Exception e) {\n            throw new MinioException(e);\n        }\n    }\n\n    public void uploadFileTemporaryStorage(Buckets buckets, String url, String path) {\n        uploadFileFromUrl(buckets, path, tempBufferAddress + url);\n    }\n\n\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void delete(Buckets buckets, String objectName) {\n        if(exist(buckets,objectName)) {\n            String bucketName = buckets.name();\n            try {\n                minio.getClient().removeObject(\n                        io.minio.RemoveObjectArgs.builder()\n                                .bucket(bucketName)\n                                .object(objectName)\n                                .build()\n                );\n                System.out.println(\"File \" + objectName + \" successfully deleted from bucket \" + bucketName);\n            } catch (Exception e) {\n                throw new MinioException(\"Error occurred while deleting the file\", e);\n            }\n        }\n    }\n\n    public boolean exist(Buckets bucket, String objectName) {\n        try {\n            minio.getClient().statObject(\n                    StatObjectArgs.builder()\n                            .bucket(bucket.name())\n                            .object(objectName)\n                            .build()\n            );\n            return true;\n        } catch (ErrorResponseException e) {\n            if (e.errorResponse().code().equals(\"NoSuchKey\")) {\n                return false;\n            }\n            throw new MinioException(\"Error occurred while checking the file\", e);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error occurred while checking the file\", e);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/conversion/Optionalable.java =====\npackage com.ua.crow.service.conversion;\n\nimport java.util.Optional;\n\npublic interface Optionalable<T> {\n    default Optional<T> optional(){\n        return Optional.of((T)this);\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/conversion/Convertable.java =====\npackage com.ua.crow.service.conversion;\n\nimport com.ua.crow.util.SpringContext;\n\npublic interface Convertable {\n\n   default  <T> T convert(Class<T> type){\n       return SpringContext.getConversionService().convert(this,type);\n   }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/CrowUserService.java =====\npackage com.ua.crow.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.dto.appsmith.Data;\nimport com.ua.crow.util.SecurityContext;\nimport com.ua.crow.workspace.WorkspaceType;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolderStrategy;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsPasswordService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.provisioning.JdbcUserDetailsManager;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\n\nimport javax.sql.DataSource;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CrowUserService extends JdbcUserDetailsManager implements UserDetailsPasswordService {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n    private SecurityContextHolderStrategy securityContextHolderStrategy;\n    private AuthenticationManager authenticationManager;\n\n\n    @Autowired\n    public CrowUserService(DataSource dataSource, UserRepository userRepository) {\n        super(dataSource);  // Pass DataSource to JdbcUserDetailsManager\n        this.userRepository = userRepository;\n    }\n    public UserEntity getUserEntity(String username) {\n        return userRepository.findByUsername(username)\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found: \" + username));\n    }\n\n    public UserEntity getUserEntity(Long userId) {\n        return userRepository.findById(userId)\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found with ID: \" + userId));\n    }\n\n    public UserEntity updateUserDetailsIfRequired(Data userData) {\n        Optional<UserEntity> optionalUserEntity = userRepository.findByUsername(userData.getUsername());\n        UserEntity existingUser = optionalUserEntity.orElseGet(() -> userRepository.save(convertUser(userData)));\n\n        UserEntity newUserEntity = convertUser(userData);\n        newUserEntity.setId(existingUser.getId());\n\n        if (!newUserEntity.equals(existingUser)) {\n            existingUser = userRepository.save(newUserEntity);\n        }\n\n        return existingUser;\n    }\n\n    private UserEntity convertUser(Data userData) {\n        UserEntity userEntity = new UserEntity();\n        userEntity.setUsername(userData.getUsername());\n        userEntity.setName(userData.getName());\n        userEntity.setEmail(userData.getEmail());\n        userEntity.setAnonymous(userData.isAnonymous());\n        userEntity.setEnabled(userData.isEnabled());\n        userEntity.setAccountNonExpired(userData.isAccountNonExpired());\n        userEntity.setAccountNonLocked(userData.isAccountNonLocked());\n        userEntity.setCredentialsNonExpired(userData.isCredentialsNonExpired());\n        return userEntity;\n    }\n\n    public UserDetails getUserDetails(UserEntity userEntity) {\n        return User.builder()\n                .username(userEntity.getUsername())\n                .password(userEntity.getPassword())\n                .authorities(List.of(new SimpleGrantedAuthority(\"ADMIN\"))) // adjust as necessary\n                .accountExpired(!userEntity.isAccountNonExpired())\n                .accountLocked(!userEntity.isAccountNonLocked())\n                .credentialsExpired(!userEntity.isCredentialsNonExpired())\n                .disabled(!userEntity.isEnabled())\n                .build();\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        UserEntity userEntity = getUserEntity(username);\n        return getUserDetails(userEntity);\n    }\n\n    @Override\n    public boolean userExists(String username) {\n        return userRepository.findByUsername(username).isPresent();\n    }\n\n    @Override\n    public UserDetails updatePassword(UserDetails user, String newPassword) {\n        UserEntity userEntity = getUserEntity(user.getUsername());\n        userEntity.setPassword(newPassword);\n        userRepository.save(userEntity);\n        return getUserDetails(userEntity);\n    }\n\n    public void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n        Assert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n        this.securityContextHolderStrategy = securityContextHolderStrategy;\n    }\n\n    public void setAuthenticationManager(AuthenticationManager authenticationManager) {\n        this.authenticationManager = authenticationManager;\n    }\n\n    public List<UserEntity> findAll() {\n        return userRepository.findAll();\n    }\n\n    public Optional<UserEntity> findById(Long id) {\n        return userRepository.findById(id);\n    }\n\n    public UserEntity create(UserEntity user) {\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        return userRepository.save(user);\n    }\n\n    public UserEntity update(UserEntity user) {\n        return userRepository.save(user);\n    }\n\n    public void delete(Long id) {\n        userRepository.deleteById(id);\n    }\n\n    public UserEntity changePassword(Long id, String newPassword) {\n        UserEntity entity = getUserEntity(id);\n        entity.setPassword(passwordEncoder.encode(newPassword));\n        return userRepository.save(entity);\n    }\n\n    public UserEntity getCurrentUser() {\n        String username = SecurityContext.getUsernameOrElseThrow();\n        return getUserEntity(username);\n    }\n\n    public void switchWorkspace(WorkspaceType workspace) {\n        UserEntity user = getCurrentUser();\n        user.setCurrentWorkspace(workspace);\n        userRepository.save(user);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/NotFoundException.java =====\npackage com.ua.crow.service;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport lombok.Getter;\n\n@Getter\npublic class NotFoundException extends RuntimeException {\n    private  Long id;\n    private  Class entityType;\n    private  String searchCriteria;\n    private  FusionId fusionId;\n\n\n    public NotFoundException() {\n        id = null;\n        entityType = null;\n        searchCriteria = null;\n    }\n\n    public NotFoundException(Long id, Class entityType) {\n        super(\"Entity \"+entityType.getName()+\" with id: \"+id+\" not found\");\n        this.id = id;\n        this.entityType = entityType;\n        searchCriteria = null;\n    }\n\n    public NotFoundException(String searchCriteria, Class entityType) {\n        super(\"Entity \"+entityType.getName()+\" with field: \"+searchCriteria+\" not found\");\n        this.searchCriteria = searchCriteria;\n        this.entityType = entityType;\n        this.id = null;\n    }\n\n    public NotFoundException(String errorMessage) {\n        super(errorMessage);\n        this.searchCriteria = null;\n        this.entityType = null;\n        this.id = null;\n    }\n\n    public NotFoundException(FusionId searchCriteria, Class entityType) {\n        super(\"Entity \"+entityType.getName()+\" with field: \"+searchCriteria+\" not found\");\n        this.fusionId = searchCriteria;\n        this.searchCriteria = null;\n        this.entityType = null;\n        this.id = null;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/ExceptionHandlers.java =====\npackage com.ua.crow.controllers;\n\nimport static com.ua.crow.dto.ErrorInfo.createErrorInfo;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.dto.ErrorInfo;\nimport com.ua.crow.service.BadRequest;\nimport com.ua.crow.service.NotFoundException;\nimport com.ua.crow.service.ResourceAlreadyExist;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.validation.ConstraintViolationException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class ExceptionHandlers {\n    private static final Logger logger = LoggerFactory.getLogger(ExceptionHandlers.class);\n\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    @ExceptionHandler(NotFoundException.class)\n    @ResponseBody\n    ErrorInfo handle404(HttpServletRequest req, Exception e) {\n        logger.error(e.getMessage());\n        return createErrorInfo(404, e.getMessage(), req.getRequestURI());\n    }\n\n    @ResponseStatus(HttpStatus.CONFLICT)\n    @ExceptionHandler(ResourceAlreadyExist.class)\n    @ResponseBody\n    ErrorInfo handle409(HttpServletRequest req, ResourceAlreadyExist e) {\n        logger.error(e.getMessage(),e);\n        return createErrorInfo(409, e.getMessage(), req.getRequestURI());\n    }\n\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(BadRequest.class)\n    @ResponseBody\n    ErrorInfo handleBadRequest(HttpServletRequest req, Exception e) {\n        logger.error(e.getMessage(),e);\n\n        return createErrorInfo(400, e.getMessage(), req.getRequestURI());\n    }\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(ConstraintViolationException.class)\n    @ResponseBody\n    ErrorInfo handleConstraintViolation(HttpServletRequest req, ConstraintViolationException e){\n        StringBuilder stringBuilder = new StringBuilder();\n        e.getConstraintViolations().forEach(constraintViolation -> {\n            stringBuilder.append(\"Constraint violation exception:\"+constraintViolation.getMessage()).append('\\n')\n                    .append(\"Recieved:\").append(constraintViolation.getInvalidValue()).append(\"\\n\");\n            if(constraintViolation.getRootBean() instanceof NamedBasicEntityWithNumericId) {\n                NamedBasicEntityWithNumericId bean = (NamedBasicEntityWithNumericId) constraintViolation.getRootBean();\n                if (bean.getName() != null && !\"\".equals(bean.getName())) {\n                    stringBuilder.append(\"Invalid object name: \").append(bean.getName()).append(\" ;\");\n                }\n            }\n            if(constraintViolation.getRootBean() instanceof BasicEntityWithNumericId) {\n                BasicEntityWithNumericId bean = (BasicEntityWithNumericId) constraintViolation.getRootBean();\n                if(bean.getId()!=null){\n                    stringBuilder.append(\"Invalid object id: \").append(bean.getId()).append(\" ;\");\n                }\n            }\n\n            if(constraintViolation.getRootBean() instanceof NamedBasicEntityWithNumericIdDto) {\n                NamedBasicEntityWithNumericId bean = (NamedBasicEntityWithNumericId) constraintViolation.getRootBean();\n                if (bean.getName() != null && !\"\".equals(bean.getName())) {\n                    stringBuilder.append(\"Invalid object name: \").append(bean.getName()).append(\" ;\");\n                }\n            }\n            if(constraintViolation.getRootBean() instanceof NumericIdEntityDto) {\n                BasicEntityWithNumericId bean = (BasicEntityWithNumericId) constraintViolation.getRootBean();\n                if(bean.getId()!=null){\n                    stringBuilder.append(\"Invalid object id: \").append(bean.getId()).append(\" ;\");\n                }\n            }\n        });\n        logger.error(e.getMessage(),e);\n        return createErrorInfo(400, stringBuilder.toString(), req.getRequestURI());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/OptionalAspect.java =====\npackage com.ua.crow.controllers;\n\nimport com.ua.crow.service.NotFoundException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Optional;\n\n@Aspect\n@Component\npublic class OptionalAspect {\n\n    // Pointcut для всех методов в контроллерах, аннотированных @RestController\n    @Pointcut(\"within(@org.springframework.web.bind.annotation.RestController *)\")\n    public void restController() {}\n\n    // Pointcut для всех методов, возвращающих Optional, внутри контроллеров\n    @Pointcut(\"execution(java.util.Optional *(..)) && restController()\")\n    public void optionalReturnMethods() {}\n\n    @AfterReturning(pointcut = \"optionalReturnMethods()\", returning = \"result\")\n    public void checkOptionalReturnValue(JoinPoint joinPoint, Object result) {\n\n        if (result instanceof Optional) {\n            Optional<?> optionalResult = (Optional<?>) result;\n            if (optionalResult.isEmpty()) {\n                String className = joinPoint.getTarget().getClass().getName();\n                String methodName = joinPoint.getSignature().getName();\n                Object[] methodArgs = joinPoint.getArgs();\n\n                // Получаем метод\n                Method method = null;\n                for (Method m : joinPoint.getTarget().getClass().getMethods()) {\n                    if (m.getName().equals(methodName) && m.getParameterCount() == methodArgs.length) {\n                        method = m;\n                        break;\n                    }\n                }\n\n                // Получаем значение из @RequestMapping\n                String requestMappingValue = \"\";\n                if (method != null) {\n                    RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);\n                    if (requestMapping != null) {\n                        requestMappingValue = String.join(\", \", requestMapping.value());\n                    }\n                }\n\n                // Конструируем сообщение об ошибке\n                String errorMessage = String.format(\"Class: %s, Method: %s, Params: %s, RequestMapping: %s\",\n                        className, methodName, Arrays.toString(methodArgs), requestMappingValue);\n\n                throw new NotFoundException(errorMessage);\n\n            }\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/TestController.java =====\npackage com.ua.crow.controllers;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\n\n@RestController\n@RequestMapping(\"/test\")\npublic class TestController {\n\n    @GetMapping(\"/example.step\")\n    public ResponseEntity<Resource> getExampleStep() throws IOException {\n        ClassPathResource resource = new ClassPathResource(\"example.step\");\n        return ResponseEntity.ok()\n                .contentType(MediaType.APPLICATION_OCTET_STREAM)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=example.step\")\n                .contentLength(resource.contentLength())\n                .body(resource);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/UserController.java =====\npackage com.ua.crow.controllers;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.conversion.UserEntityMapper;\nimport com.ua.crow.mes.dto.CreateUserDto;\nimport com.ua.crow.mes.dto.PasswordChangeDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport com.ua.crow.service.CrowUserService;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    private final CrowUserService userService;\n    private final UserEntityMapper mapper;\n\n    public UserController(CrowUserService userService, UserEntityMapper mapper) {\n        this.userService = userService;\n        this.mapper = mapper;\n    }\n\n    @GetMapping\n    @RolesAllowed(\"ADMIN\")\n    public List<UserDto> getAll() {\n        return userService.findAll().stream().map(mapper::toDto).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    @RolesAllowed(\"ADMIN\")\n    public Optional<UserDto> getById(@PathVariable Long id) {\n        return userService.findById(id).map(mapper::toDto);\n    }\n\n    @PostMapping\n    @RolesAllowed(\"ADMIN\")\n    public UserDto create(@RequestBody CreateUserDto dto) {\n        UserEntity user = new UserEntity();\n        user.setUsername(dto.getUsername());\n        user.setName(dto.getName());\n        user.setEnabled(dto.isEnabled());\n        user.setAccountNonExpired(true);\n        user.setAccountNonLocked(true);\n        user.setCredentialsNonExpired(true);\n        user.setPassword(dto.getPassword());\n        return mapper.toDto(userService.create(user));\n    }\n\n    @PutMapping(\"/{id}\")\n    @RolesAllowed(\"ADMIN\")\n    public UserDto update(@PathVariable Long id, @RequestBody UserDto dto) {\n        UserEntity user = userService.getUserEntity(id);\n        user.setUsername(dto.getUsername());\n        user.setName(dto.getName());\n        user.setEnabled(dto.isEnabled());\n        return mapper.toDto(userService.update(user));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @RolesAllowed(\"ADMIN\")\n    public void delete(@PathVariable Long id) {\n        userService.delete(id);\n    }\n\n    @PostMapping(\"/{id}/password\")\n    @RolesAllowed(\"ADMIN\")\n    public void changePassword(@PathVariable Long id, @RequestBody PasswordChangeDto dto) {\n        userService.changePassword(id, dto.password());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/BreadcrumbBar.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class BreadcrumbBar extends HorizontalLayout {\n\n    private final NavigationHistoryService historyService;\n\n    public BreadcrumbBar(NavigationHistoryService historyService) {\n        this.historyService = historyService;\n\n        setSpacing(true);\n        refresh();\n    }\n\n    public void refresh() {\n        removeAll();\n\n        // 1. Получаем текущую точку входа\n        Optional<HistoryEntry<?>> current = historyService.getLast();\n        if (current.isEmpty()) return;\n\n        // 3. Добавляем кнопки\n        for (HistoryEntry<?> entry : historyService.context) {\n            Button crumb = new Button(entry.getLabel(), click -> UI.getCurrent().navigate(entry.getPath()));\n            add(crumb);\n        }\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationMenuBuilder.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.components.product.views.ProductPage;\nimport com.ua.crow.views.components.product.views.ProductsListView;\nimport com.ua.crow.views.pages.NotFoundView;\nimport com.ua.crow.views.components.settings.MasterDataView;\nimport com.vaadin.flow.component.sidenav.SideNav;\nimport com.vaadin.flow.component.sidenav.SideNavItem;\n\n/**\n * Utility class for building and updating the application side navigation\n * menu based on the current navigation context.\n */\npublic final class NavigationMenuBuilder {\n\n    private NavigationMenuBuilder() {\n        // Utility class\n    }\n\n    /**\n     * Creates a new {@link SideNav} configured according to the given\n     * {@link NavigationHistoryService}.\n     */\n    public static SideNav createSideNav(NavigationHistoryService historyService) {\n        SideNav nav = new SideNav();\n        updateSideNav(nav, historyService);\n        return nav;\n    }\n\n    /**\n     * Updates the given navigation menu to reflect the latest state of the\n     * navigation history.\n     */\n    public static void updateSideNav(SideNav nav, NavigationHistoryService historyService) {\n        java.util.Map<String, Boolean> expanded = captureExpanded(nav.getItems());\n\n        nav.removeAll();\n        nav.addItem(new SideNavItem(\"All products\", ProductsListView.class));\n\n        historyService.getContext(ProductPage.class)\n                .map(entry -> (ProductDto) entry.getContextObject())\n                .ifPresent(product -> addProductNavigation(nav, product));\n\n        SideNavItem settings = new SideNavItem(\"Settings\");\n        settings.addItem(new SideNavItem(\"Mastering data\",\n                com.ua.crow.views.components.settings.MasterDataView.class));\n        settings.addItem(new SideNavItem(\"Users\",\n                com.ua.crow.views.components.settings.UsersView.class));\n        nav.addItem(settings);\n\n        nav.addItem(new SideNavItem(\"CNC\", com.ua.crow.views.pages.CncRndInterfaceView.class));\n        applyExpanded(nav.getItems(), expanded);\n    }\n\n    private static java.util.Map<String, Boolean> captureExpanded(java.util.List<SideNavItem> items) {\n        java.util.Map<String, Boolean> map = new java.util.HashMap<>();\n        for (SideNavItem item : items) {\n            map.put(item.getLabel(), item.isExpanded());\n            map.putAll(captureExpanded(item.getItems()));\n        }\n        return map;\n    }\n\n    private static void applyExpanded(java.util.List<SideNavItem> items, java.util.Map<String, Boolean> state) {\n        for (SideNavItem item : items) {\n            Boolean expanded = state.get(item.getLabel());\n            if (expanded != null) {\n                item.setExpanded(expanded);\n            }\n            applyExpanded(item.getItems(), state);\n        }\n    }\n\n    private static void addProductNavigation(SideNav nav, ProductDto product) {\n        String id = String.valueOf(product.getId());\n\n        SideNavItem productGroup = new SideNavItem(\"Product: \" + product.getName());\n        productGroup.setExpanded(true);\n        productGroup.addItem(new SideNavItem(\"Overview\", \"/product/\" + id));\n        productGroup.addItem(new SideNavItem(\"CAD BOMs\", \"/product/\" + id + \"/newcadboms\"));\n        productGroup.addItem(new SideNavItem(\"Fusion components\", NotFoundView.class));\n        productGroup.addItem(new SideNavItem(\"Engineering Boms\", \"/product/\" + id + \"/engineeringboms\"));\n        productGroup.addItem(new SideNavItem(\"Components\", NotFoundView.class));\n        nav.addItem(productGroup);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationContextAware.java =====\npackage com.ua.crow.views.navigation;\n\n\nimport com.ua.crow.views.service.HistoryEntry;\n\nimport java.util.LinkedList;\nimport java.util.Optional;\n\npublic interface NavigationContextAware {\n\n    NavigationHistoryService getHistoryService();\n\n    HistoryEntry<?> getCurrentContext();\n\n    default HistoryEntry<?> addToHistory() {\n\n        NavigationHistoryService historyService = getHistoryService();\n        HistoryEntry<?> currentContext = getCurrentContext();\n\n        LinkedList<HistoryEntry<?>> history = historyService.context;\n\n        Optional<HistoryEntry<?>> existingEntryOpt = history.stream()\n                .filter(entry -> entry.getPath().equals(currentContext.getPath()))\n                .findFirst();\n\n        if (existingEntryOpt.isPresent()) {\n            // If the entry already exists, remove everything after it\n            int index = history.indexOf(existingEntryOpt.get());\n            history.subList(index + 1, history.size()).clear();\n            history.getLast().setChildContext(null);\n        } else {\n            // If the entry is new, append it\n            Optional<HistoryEntry<?>> parentContextOp = historyService.getLast();\n            currentContext.setParentContext(parentContextOp.orElse(null));\n            history.add(currentContext);\n            if (parentContextOp.isPresent()) {\n                parentContextOp.get().setChildContext(currentContext);\n            }\n        }\n\n        return currentContext;\n    }\n    default void clearHistory() {\n        getHistoryService().clear();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationHistoryService.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.components.product.views.ProductPage;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.spring.annotation.UIScope;\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n@Component\n@UIScope\npublic class NavigationHistoryService {\n    LinkedList<HistoryEntry<?>> context = new LinkedList<>();\n    public Optional<HistoryEntry<?>> getRoot() {\n        if (context.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.of(context.getFirst());\n    }\n    public void clear() {\n        context.clear();\n    }\n    public Optional<HistoryEntry<?>> getLast() {\n        if(context.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.of(context.getLast());\n    }\n\n    public  Optional<HistoryEntry<?>> getContext(Class contextClass) {\n        return context.stream()\n                .filter(entry -> contextClass.equals(entry.getContext()))\n                .findFirst();\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationPathUtil.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.views.components.engineeringbom.list.BomActiveReleaseListView;\nimport com.ua.crow.views.components.engineeringbom.tree.BomActiveReleaseTreeView;\nimport com.ua.crow.views.components.fusionbom.edit.CADBomView;\nimport com.ua.crow.views.components.fusionbom.list.CADBomListView;\nimport com.ua.crow.views.components.product.views.ProductPage;\nimport com.ua.crow.views.pages.NotFoundView;\nimport com.vaadin.flow.router.RouteParameters;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * Helper methods for resolving view classes and route parameters\n * from navigation paths.\n */\npublic final class NavigationPathUtil {\n\n    private NavigationPathUtil() {\n        // Utility class\n    }\n\n    /** Normalizes the given path to always start with a forward slash. */\n    public static String normalizePath(String path) {\n        if (path == null || path.isBlank()) {\n            return \"/\";\n        }\n        return path.startsWith(\"/\") ? path : \"/\" + path;\n    }\n\n    /**\n     * Determines the Vaadin view class that corresponds to the given navigation path.\n     */\n    public static Class<?> resolveViewClass(String path) {\n        if (path.startsWith(\"product/\") && (path.contains(\"/newboms\") || path.contains(\"/fusionboms\"))) {\n            return CADBomListView.class;\n        } else if (path.startsWith(\"product/\") && path.contains(\"/eboms\")) {\n            return BomActiveReleaseListView.class;\n        } else if (path.startsWith(\"product/\") && path.contains(\"/ebom/\")) {\n            return BomActiveReleaseTreeView.class;\n        } else if (path.startsWith(\"product/\")) {\n            return ProductPage.class;\n        } else if (path.startsWith(\"fusionbom/\")) {\n            return CADBomView.class;\n        }\n        return NotFoundView.class;\n    }\n\n    /**\n     * Extracts {@link RouteParameters} from the given navigation path.\n     */\n    public static RouteParameters buildRouteParameters(String path) {\n        Map<String, String> map = new LinkedHashMap<>();\n\n        if (path.matches(\"product/\\\\d+\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n        } else if (path.matches(\"product/\\\\d+/(fusionboms|newboms)\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n        } else if (path.matches(\"product/\\\\d+/eboms\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n        } else if (path.matches(\"product/\\\\d+/ebom/\\\\d+\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n            map.put(\"bomId\", parts[3]);\n        } else if (path.matches(\"product/\\\\d+/fusionbom/[^?]+.*\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n            map.put(\"fusionId\", parts[3]);\n\n            if (path.contains(\"?revisionId=\")) {\n                String revId = path.substring(path.indexOf(\"?revisionId=\") + 12);\n                map.put(\"revisionId\", revId);\n            }\n        }\n\n        return new RouteParameters(map);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/assembly/AssemblyInstructionsView.java =====\npackage com.ua.crow.views.workspaces.assembly;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"assembly/instructions\", layout = MainLayout.class)\n@PageTitle(\"Assembly Instructions\")\n@PermitAll\npublic class AssemblyInstructionsView extends WorkspaceRestrictedView {\n\n    public AssemblyInstructionsView() {\n        add(new Span(\"Assembly Instructions\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.ASSEMBLY;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/assembly/AssemblyChecklistView.java =====\npackage com.ua.crow.views.workspaces.assembly;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"assembly/checklist\", layout = MainLayout.class)\n@PageTitle(\"Checklist\")\n@PermitAll\npublic class AssemblyChecklistView extends WorkspaceRestrictedView {\n\n    public AssemblyChecklistView() {\n        add(new Span(\"Assembly Checklist\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.ASSEMBLY;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/WorkspaceRestrictedView.java =====\npackage com.ua.crow.views.workspaces;\n\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.Set;\n\npublic abstract class WorkspaceRestrictedView extends VerticalLayout implements BeforeEnterObserver {\n\n    @Autowired\n    private CrowUserService userService;\n\n    protected abstract WorkspaceType requiredWorkspace();\n\n    /**\n     * Workspaces allowed to access this view. By default only the\n     * {@link #requiredWorkspace()} is permitted.\n     */\n    protected Set<WorkspaceType> allowedWorkspaces() {\n        WorkspaceType required = requiredWorkspace();\n        return required == null ? Collections.emptySet() : EnumSet.of(required);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        WorkspaceType current = userService.getCurrentUser().getCurrentWorkspace();\n        if (!allowedWorkspaces().contains(current)) {\n            event.rerouteTo(com.ua.crow.views.pages.NotFoundView.class);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/rnd/RndBomView.java =====\npackage com.ua.crow.views.workspaces.rnd;\n\nimport com.ua.crow.views.MainLayout;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"rnd/bom\", layout = MainLayout.class)\n@PageTitle(\"BOM Viewer\")\n@PermitAll\npublic class RndBomView extends RndWorkspaceRestrictedView {\n\n    public RndBomView() {\n        add(new Span(\"BOM Viewer\"));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/rnd/RndWorkspaceRestrictedView.java =====\npackage com.ua.crow.views.workspaces.rnd;\n\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.Set;\n\n/**\n * Base view restricting access to R&D workspace.\n */\npublic abstract class RndWorkspaceRestrictedView extends WorkspaceRestrictedView {\n\n    private final Set<WorkspaceType> allowed;\n\n    protected RndWorkspaceRestrictedView() {\n        this(EnumSet.of(WorkspaceType.RND));\n    }\n\n    protected RndWorkspaceRestrictedView(Set<WorkspaceType> allowed) {\n        this.allowed = allowed == null ? Collections.emptySet() : EnumSet.copyOf(allowed);\n    }\n\n    @Override\n    protected WorkspaceType requiredWorkspace() {\n        return WorkspaceType.RND;\n    }\n\n    @Override\n    protected Set<WorkspaceType> allowedWorkspaces() {\n        return allowed.isEmpty() ? EnumSet.of(WorkspaceType.RND) : allowed;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/rnd/RndCadView.java =====\npackage com.ua.crow.views.workspaces.rnd;\n\nimport com.ua.crow.views.MainLayout;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"rnd/cad\", layout = MainLayout.class)\n@PageTitle(\"CAD Editor\")\n@PermitAll\npublic class RndCadView extends RndWorkspaceRestrictedView {\n\n    public RndCadView() {\n        add(new Span(\"CAD Editor\"));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/logistics/LogisticsOutgoingView.java =====\npackage com.ua.crow.views.workspaces.logistics;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"logistics/outgoing\", layout = MainLayout.class)\n@PageTitle(\"Outgoing\")\n@PermitAll\npublic class LogisticsOutgoingView extends WorkspaceRestrictedView {\n\n    public LogisticsOutgoingView() {\n        add(new Span(\"Outgoing\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.LOGISTICS;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/logistics/LogisticsIncomingView.java =====\npackage com.ua.crow.views.workspaces.logistics;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"logistics/incoming\", layout = MainLayout.class)\n@PageTitle(\"Incoming\")\n@PermitAll\npublic class LogisticsIncomingView extends WorkspaceRestrictedView {\n\n    public LogisticsIncomingView() {\n        add(new Span(\"Incoming\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.LOGISTICS;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/dashboard/TestService.java =====\npackage com.ua.crow.views.dashboard;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TestService {\n    public String getHello() {\n        return \"Hello from injected service!\";\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/UsersView.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.ua.crow.controllers.UserController;\nimport com.ua.crow.mes.dto.CreateUserDto;\nimport com.ua.crow.mes.dto.PasswordChangeDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\n\n@Route(value = UsersView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Users\")\n@PermitAll\npublic class UsersView extends VerticalLayout {\n    public static final String ROUTE = \"settings/users\";\n\n    private final UserController controller;\n    private final Grid<UserDto> grid;\n    private final GridToolbar toolbar;\n\n    public UsersView(UserController controller) {\n        this.controller = controller;\n        this.grid = new Grid<>(UserDto.class, false);\n        grid.addColumn(UserDto::getId).setHeader(\"ID\");\n        grid.addColumn(UserDto::getUsername).setHeader(\"Username\");\n        grid.addColumn(UserDto::getName).setHeader(\"Name\");\n        grid.addColumn(UserDto::isEnabled).setHeader(\"Enabled\");\n        grid.setItems(controller.getAll());\n        this.toolbar = createToolbar();\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        add(toolbar, grid);\n        setSizeFull();\n        setFlexGrow(1, grid);\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar tb = new GridToolbar(true, true, true, false);\n        tb.setAddHandler(b -> openDialog(null));\n        tb.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(this::openDialog));\n        tb.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); refresh();}));\n        tb.addButtonStateHandler(EDIT, b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        tb.addButtonStateHandler(DELETE, b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        return tb;\n    }\n\n    private void openDialog(UserDto dto) {\n        UserForm form = new UserForm();\n        Dialog dialog = createDialog(form, () -> {\n            if (dto == null) {\n                CreateUserDto toCreate = new CreateUserDto();\n                toCreate.setUsername(form.username.getValue());\n                toCreate.setName(form.name.getValue());\n                toCreate.setEnabled(form.enabled.getValue());\n                toCreate.setPassword(form.password.getValue());\n                controller.create(toCreate);\n            } else {\n                UserDto upd = new UserDto();\n                upd.setId(dto.getId());\n                upd.setUsername(form.username.getValue());\n                upd.setName(form.name.getValue());\n                upd.setEnabled(form.enabled.getValue());\n                controller.update(dto.getId(), upd);\n                if (!form.password.getValue().isBlank()) {\n                    controller.changePassword(dto.getId(), new PasswordChangeDto(form.password.getValue()));\n                }\n            }\n            refresh();\n        });\n        if (dto != null) {\n            form.username.setValue(dto.getUsername());\n            form.name.setValue(dto.getName() != null ? dto.getName() : \"\");\n            form.enabled.setValue(dto.isEnabled());\n        }\n        dialog.open();\n    }\n\n    private Dialog createDialog(UserForm form, Runnable saveHandler) {\n        Dialog dialog = new Dialog();\n        Button save = new Button(\"Save\", e -> {saveHandler.run(); dialog.close();});\n        Button cancel = new Button(\"Cancel\", e -> dialog.close());\n        dialog.add(form, new com.vaadin.flow.component.orderedlayout.HorizontalLayout(save, cancel));\n        return dialog;\n    }\n\n    private void refresh() {\n        grid.setItems(controller.getAll());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/MasterDataView.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.ua.crow.plm.controller.settings.BomItemPropertyTypeController;\nimport com.ua.crow.plm.controller.settings.BomItemPropertyTypeGroupController;\nimport com.ua.crow.plm.controller.settings.ComponentGroupController;\nimport com.ua.crow.plm.controller.settings.ItemTypeNameMappingController;\nimport com.ua.crow.plm.dto.base.*;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.vaadin.flow.component.Component;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.tabs.TabSheet;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = MasterDataView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Mastering data\")\n@PermitAll\npublic class MasterDataView extends VerticalLayout {\n    public static final String ROUTE = \"settings/masterdata\";\n\n    public MasterDataView(BomItemPropertyTypeController typeController,\n                          BomItemPropertyTypeGroupController groupController,\n                          ComponentGroupController componentGroupController,\n                          ItemTypeNameMappingController mappingController) {\n        TabSheet tabs = new TabSheet();\n        tabs.add(\"Property Types\", createPropertyTypeTab(typeController));\n        tabs.add(\"Property Type Groups\", createPropertyTypeGroupTab(groupController));\n        tabs.add(\"Component Groups\", createComponentGroupTab(componentGroupController));\n        tabs.add(\"Item Type Mapping\", createItemTypeMappingTab(mappingController));\n        add(tabs);\n        tabs.setSizeFull();\n        setSizeFull();\n    }\n\n    private Component createPropertyTypeTab(BomItemPropertyTypeController controller) {\n        Grid<BomItemPropertyTypeDto> grid = new Grid<>(BomItemPropertyTypeDto.class, false);\n        grid.addColumn(BomItemPropertyTypeDto::getId).setHeader(\"ID\");\n        grid.addColumn(BomItemPropertyTypeDto::getName).setHeader(\"Name\");\n        grid.addColumn(BomItemPropertyTypeDto::getUkrName).setHeader(\"Ukr Name\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openPropertyTypeDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openPropertyTypeDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n        return layout;\n    }\n\n    private void openPropertyTypeDialog(BomItemPropertyTypeController controller, Grid<BomItemPropertyTypeDto> grid, BomItemPropertyTypeDto dto) {\n        BomItemPropertyTypeForm form = new BomItemPropertyTypeForm();\n        Dialog dialog = createDialog(form, () -> {\n            BomItemPropertyTypeDto toSave = new BomItemPropertyTypeDto();\n            toSave.setName(form.name.getValue());\n            toSave.setUkrName(form.ukrName.getValue());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.ukrName.setValue(dto.getUkrName());\n        }\n        dialog.open();\n    }\n\n    private Component createPropertyTypeGroupTab(BomItemPropertyTypeGroupController controller) {\n        Grid<BomItemPropertyTypeGroupDto> grid = new Grid<>(BomItemPropertyTypeGroupDto.class, false);\n        grid.addColumn(BomItemPropertyTypeGroupDto::getId).setHeader(\"ID\");\n        grid.addColumn(BomItemPropertyTypeGroupDto::getName).setHeader(\"Name\");\n        grid.addColumn(BomItemPropertyTypeGroupDto::getUkrName).setHeader(\"Ukr Name\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openPropertyTypeGroupDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openPropertyTypeGroupDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n        return layout;\n    }\n\n    private void openPropertyTypeGroupDialog(BomItemPropertyTypeGroupController controller, Grid<BomItemPropertyTypeGroupDto> grid, BomItemPropertyTypeGroupDto dto) {\n        BomItemPropertyTypeGroupForm form = new BomItemPropertyTypeGroupForm();\n        Dialog dialog = createDialog(form, () -> {\n            BomItemPropertyTypeGroupDto toSave = new BomItemPropertyTypeGroupDto();\n            toSave.setName(form.name.getValue());\n            toSave.setUkrName(form.ukrName.getValue());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.ukrName.setValue(dto.getUkrName());\n        }\n        dialog.open();\n    }\n\n    private Component createComponentGroupTab(ComponentGroupController controller) {\n        Grid<ComponentGroupDto> grid = new Grid<>(ComponentGroupDto.class, false);\n        grid.addColumn(ComponentGroupDto::getId).setHeader(\"ID\");\n        grid.addColumn(ComponentGroupDto::getName).setHeader(\"Name\");\n        grid.addColumn(ComponentGroupDto::getUkrName).setHeader(\"Ukr Name\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openComponentGroupDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openComponentGroupDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n        return layout;\n    }\n\n    private void openComponentGroupDialog(ComponentGroupController controller, Grid<ComponentGroupDto> grid, ComponentGroupDto dto) {\n        ComponentGroupForm form = new ComponentGroupForm();\n        Dialog dialog = createDialog(form, () -> {\n            ComponentGroupDto toSave = new ComponentGroupDto();\n            toSave.setName(form.name.getValue());\n            toSave.setUkrName(form.ukrName.getValue());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.ukrName.setValue(dto.getUkrName());\n        }\n        dialog.open();\n    }\n\n    private Component createItemTypeMappingTab(ItemTypeNameMappingController controller) {\n        Grid<ItemTypeNameMappingDto> grid = new Grid<>(ItemTypeNameMappingDto.class, false);\n        grid.addColumn(ItemTypeNameMappingDto::getId).setHeader(\"ID\");\n        grid.addColumn(ItemTypeNameMappingDto::getName).setHeader(\"Name\");\n        grid.addColumn(ItemTypeNameMappingDto::getType).setHeader(\"Type\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openItemTypeMappingDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openItemTypeMappingDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n\n        return layout;\n    }\n\n    private void openItemTypeMappingDialog(ItemTypeNameMappingController controller, Grid<ItemTypeNameMappingDto> grid, ItemTypeNameMappingDto dto) {\n        ItemTypeNameMappingForm form = new ItemTypeNameMappingForm();\n        Dialog dialog = createDialog(form, () -> {\n            ItemTypeNameMappingDto toSave = new ItemTypeNameMappingDto();\n            toSave.setName(form.name.getValue());\n            toSave.setType(form.getType());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.setType(dto.getType());\n        }\n        dialog.open();\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar toolbar = new GridToolbar(true, true, true, false);\n        toolbar.addButtonStateHandler(\"EDIT\", b -> b.setEnabled(false));\n        toolbar.addButtonStateHandler(\"DELETE\", b -> b.setEnabled(false));\n        return toolbar;\n    }\n\n    private Dialog createDialog(NamedEntityForm form, Runnable saveHandler) {\n        Dialog dialog = new Dialog();\n        Button save = new Button(\"Save\", e -> { saveHandler.run(); dialog.close(); });\n        Button cancel = new Button(\"Cancel\", e -> dialog.close());\n        dialog.add(form, new com.vaadin.flow.component.orderedlayout.HorizontalLayout(save, cancel));\n        return dialog;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/ItemTypeNameMappingForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.vaadin.flow.component.combobox.ComboBox;\n\npublic class ItemTypeNameMappingForm extends NamedEntityForm {\n    private final ComboBox<ItemTypes> type = new ComboBox<>(\"Type\");\n\n    public ItemTypeNameMappingForm() {\n        super();\n        type.setItems(ItemTypes.values());\n        add(type);\n    }\n\n    public ItemTypes getType() {\n        return type.getValue();\n    }\n\n    public void setType(ItemTypes t) {\n        type.setValue(t);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/ComponentGroupForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.NumberField;\n\npublic class ComponentGroupForm extends NamedEntityForm {\n    private final NumberField parentId = new NumberField(\"Parent ID\");\n\n    public ComponentGroupForm() {\n        super();\n        add(parentId);\n        parentId.setStep(1);\n    }\n\n    public Long getParentId() {\n        return parentId.getValue() != null ? parentId.getValue().longValue() : null;\n    }\n\n    public void setParentId(Long val) {\n        if (val == null) {\n            parentId.clear();\n        } else {\n            parentId.setValue(val.doubleValue());\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/BomItemPropertyTypeForm.java =====\npackage com.ua.crow.views.components.settings;\n\npublic class BomItemPropertyTypeForm extends NamedEntityForm {\n    public BomItemPropertyTypeForm() {\n        super();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/NamedEntityForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.TextField;\n\npublic class NamedEntityForm extends FormLayout {\n    protected final TextField name = new TextField(\"Name\");\n    protected final TextField ukrName = new TextField(\"Ukrainian Name\");\n\n    public NamedEntityForm() {\n        add(name, ukrName);\n    }\n\n    public void clear() {\n        name.clear();\n        ukrName.clear();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/UserForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.vaadin.flow.component.checkbox.Checkbox;\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.PasswordField;\nimport com.vaadin.flow.component.textfield.TextField;\n\npublic class UserForm extends FormLayout {\n    TextField username = new TextField(\"Username\");\n    TextField name = new TextField(\"Name\");\n    PasswordField password = new PasswordField(\"Password\");\n    Checkbox enabled = new Checkbox(\"Enabled\");\n\n    public UserForm() {\n        add(username, name, password, enabled);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/BomItemPropertyTypeGroupForm.java =====\npackage com.ua.crow.views.components.settings;\n\npublic class BomItemPropertyTypeGroupForm extends NamedEntityForm {\n    public BomItemPropertyTypeGroupForm() {\n        super();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/Badge.java =====\npackage com.ua.crow.views.components;\n\nimport com.vaadin.flow.component.icon.Icon;\nimport com.vaadin.flow.component.icon.VaadinIcon;\nimport com.vaadin.flow.component.html.Span;\npublic class Badge extends Span {\n\n    public enum BadgeTypeEnum {\n        PRIMARY, SUCCESS, ERROR, CONTRAST, NORMAL\n    }\n\n    public Badge(String text, BadgeTypeEnum type, VaadinIcon vaadinIcon) {\n        getElement().getThemeList().add(\"badge \" + type.name().toLowerCase());\n        getStyle().set(\"padding\", \"var(--lumo-space-xs)\");\n\n        if (vaadinIcon != null) {\n            Icon icon = createIcon(vaadinIcon, text != null ? text : \"\");\n            add(icon);\n        }\n\n        if (text != null && !text.isEmpty()) {\n            Span label = new Span(text);\n            label.getStyle().set(\"padding-left\", \"var(--lumo-space-xs)\");\n            add(label);\n        }\n    }\n\n    private Icon createIcon(VaadinIcon vaadinIcon, String label) {\n        Icon icon = vaadinIcon.create();\n        icon.getStyle().set(\"padding\", \"var(--lumo-space-xs)\");\n        icon.getElement().setAttribute(\"aria-label\", label);\n        icon.getElement().setAttribute(\"title\", label);\n        return icon;\n    }\n\n    public Badge(String text, BadgeTypeEnum type) {\n        this(text, type, null);\n    }\n\n    public static Badge confirmedBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.SUCCESS, VaadinIcon.CHECK);\n    }\n\n    public static Badge cancelledBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.ERROR, VaadinIcon.CLOSE_SMALL);\n    }\n\n    public static Badge pendingBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.PRIMARY, null);\n    }\n\n    public static Badge contrastBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.CONTRAST, null);\n    }\n\n    public static Badge normalBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.NORMAL, null);\n    }\n\n    public static Badge addedItemsBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.SUCCESS, VaadinIcon.PLUS);\n    }\n\n    public static Badge removedItemsBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.ERROR, VaadinIcon.MINUS);\n    }\n\n    public static Badge modifiedItemsBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.CONTRAST, VaadinIcon.EDIT);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/toolbar/ButtonKeys.java =====\npackage com.ua.crow.views.components.toolbar;\n\n/**\n * String constants identifying common toolbar buttons.\n */\npublic final class ButtonKeys {\n    private ButtonKeys() {}\n\n    public static final String ADD = \"add\";\n    public static final String EDIT = \"edit\";\n    public static final String DELETE = \"delete\";\n    public static final String REFRESH = \"refresh\";\n\n    public static final String EXPAND_ALL = \"expandAll\";\n    public static final String COLLAPSE_ALL = \"collapseAll\";\n    public static final String COMPONENT = \"component\";\n    public static final String CONVERT = \"convert\";\n    public static final String SAVE = \"save\";\n    public static final String CANCEL = \"cancel\";\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/toolbar/GridToolbar.java =====\npackage com.ua.crow.views.components.toolbar;\n\nimport com.vaadin.flow.component.contextmenu.MenuItem;\nimport com.vaadin.flow.component.icon.Icon;\nimport com.vaadin.flow.component.menubar.MenuBar;\nimport com.vaadin.flow.theme.lumo.LumoIcon;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.function.Consumer;\n\npublic class GridToolbar extends MenuBar {\n    private MenuItem addButton;\n    private MenuItem editButton;\n    private MenuItem deleteButton;\n    private MenuItem refreshButton;\n    private final Map<String, MenuItem> customButtons = new HashMap<>();\n    private final Map<String, List<Consumer<MenuItem>>> buttonStateHandlers = new HashMap<>();\n\n\n    public GridToolbar(boolean add, boolean edit, boolean delete, boolean refresh) {\n        setWidthFull();\n        setHeight(\"50px\");\n        addClassName(\"grid-toolbar\");\n\n        if (add) {\n            addButton = createItem(\"Add\", LumoIcon.PLUS.create());\n        }\n        if (edit) {\n            editButton = createItem(\"Edit\", LumoIcon.EDIT.create());\n        }\n        if (delete) {\n            deleteButton = createItem(\"Delete\", LumoIcon.CROSS.create());\n        }\n        if (refresh) {\n            refreshButton = createItem(\"Refresh\", LumoIcon.REDO.create());\n        }\n    }\n\n    private MenuItem createItem(String label, Icon icon) {\n        MenuItem item = addItem(shortenLabel(label));\n        item.addComponentAsFirst(icon);\n        return item;\n    }\n\n    private String shortenLabel(String label) {\n        int spaceIdx = label.indexOf(' ');\n        return spaceIdx > 0 ? label.substring(0, spaceIdx) : label;\n    }\n\n    public void setAddHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(addButton, handler);\n    }\n\n    public void setEditHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(editButton, handler);\n    }\n\n    public void setDeleteHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(deleteButton, handler);\n    }\n\n    public void setRefreshHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(refreshButton, handler);\n    }\n\n    private void setButtonHandler(MenuItem button, Consumer<MenuItem> handler) {\n        if (button != null) {\n            button.addClickListener(event -> handler.accept(button));\n        }\n    }\n\n    public MenuItem addCustomButton(String key, String label, Icon icon, Consumer<MenuItem> handler) {\n        MenuItem button = createItem(label, icon);\n        button.addClickListener(e -> handler.accept(button));\n        customButtons.put(key, button);\n        return button;\n    }\n\n    public void setButtonVisibility(String key, boolean visible) {\n        MenuItem button = customButtons.get(key);\n        if (button != null) {\n            button.setVisible(visible);\n        }\n    }\n\n    public void setButtonEnabled(String key, boolean enabled) {\n        MenuItem button = customButtons.get(key);\n        if (button != null) {\n            button.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Enables or disables one of the default toolbar buttons by key.\n     * Supported keys are defined in {@link ButtonKeys}.\n     */\n    public void setDefaultButtonEnabled(String key, boolean enabled) {\n        MenuItem target = getButtonByKey(key);\n        if (target != null) {\n            target.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Registers a handler that will be invoked when {@link #refreshButtonsStates()} is called.\n     * The handler receives a reference to the button identified by {@code key}.\n     *\n     * @param key      identifier of the button (use constants from {@link ButtonKeys} or custom key)\n     * @param handler  handler to invoke for the button\n     */\n    public void addButtonStateHandler(String key, Consumer<MenuItem> handler) {\n        buttonStateHandlers.computeIfAbsent(key, k -> new ArrayList<>()).add(handler);\n    }\n\n    /**\n     * Invokes all registered state handlers for their respective buttons.\n     * Missing buttons are ignored.\n     */\n    public void refreshButtonsStates() {\n        buttonStateHandlers.forEach((key, handlers) -> {\n            MenuItem btn = getButtonByKey(key);\n            if (btn != null) {\n                handlers.forEach(h -> h.accept(btn));\n            }\n        });\n    }\n\n    private MenuItem getButtonByKey(String key) {\n        return switch (key) {\n            case ADD -> addButton;\n            case EDIT -> editButton;\n            case DELETE -> deleteButton;\n            case REFRESH -> refreshButton;\n            default -> customButtons.get(key);\n        };\n    }\n\n    public void addSpacer() {\n        MenuItem spacer = addItem(\"\");\n        spacer.getElement().getStyle().set(\"flexGrow\", \"1\");\n        spacer.setEnabled(false);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/toolbar/TreeGridToolbar.java =====\npackage com.ua.crow.views.components.toolbar;\n\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.theme.lumo.LumoIcon;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\n\n/**\n * Toolbar for {@link TreeGrid} components. Provides expand and collapse buttons\n * in addition to the standard toolbar functionality.\n */\npublic class TreeGridToolbar extends GridToolbar {\n\n    public TreeGridToolbar(boolean add, boolean edit, boolean delete, boolean refresh) {\n        super(add, edit, delete, refresh);\n    }\n\n    /**\n     * Adds expand/collapse management for the provided {@link TreeGrid}. Two\n     * additional buttons \"Expand All\" and \"Collapse All\" are appended and will\n     * operate on the currently selected node. The buttons are disabled when no\n     * selection exists.\n     *\n     * @param grid the {@link TreeGrid} instance to manage\n     * @param <T>  grid item type\n     */\n    public <T> void manageTreeGrid(TreeGrid<T> grid) {\n        addCustomButton(EXPAND_ALL, \"Expand All\", LumoIcon.ANGLE_DOWN.create(),\n                btn -> adjustTreeGrid(grid, true));\n        addCustomButton(COLLAPSE_ALL, \"Collapse All\", LumoIcon.ANGLE_RIGHT.create(),\n                btn -> adjustTreeGrid(grid, false));\n\n        addButtonStateHandler(EXPAND_ALL,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        addButtonStateHandler(COLLAPSE_ALL,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        grid.addSelectionListener(e -> refreshButtonsStates());\n        refreshButtonsStates();\n    }\n\n    private static <T> void adjustTreeGrid(TreeGrid<T> grid, boolean expand) {\n        T selected = grid.asSingleSelect().getValue();\n        Collection<T> targets = selected != null\n                ? List.of(selected)\n                : grid.getTreeData().getRootItems();\n\n        if (expand) {\n            grid.expandRecursively(targets, Integer.MAX_VALUE);\n        } else {\n            grid.collapseRecursively(targets, Integer.MAX_VALUE);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/Online3DViewer.java =====\npackage com.ua.crow.views.components;\n\nimport com.vaadin.flow.component.AttachEvent;\nimport com.vaadin.flow.component.Tag;\nimport com.vaadin.flow.component.dependency.JsModule;\nimport com.vaadin.flow.component.dependency.NpmPackage;\nimport com.vaadin.flow.component.html.Div;\n\n@Tag(\"div\")\n@JsModule(\"./online-viewer.ts\")\n@NpmPackage(value = \"online-3d-viewer\", version = \"^0.16.0\")\npublic class Online3DViewer extends Div {\n\n    private String modelUrl;\n\n    public Online3DViewer() {\n        setId(\"online_3d_viewer\");\n        setSizeFull();\n    }\n\n    @Override\n    protected void onAttach(AttachEvent attachEvent) {\n        super.onAttach(attachEvent);\n        getElement().executeJs(\"window.initViewer($0)\", getElement());\n        if (modelUrl != null) {\n            getElement().executeJs(\"window.updateViewer($0)\", modelUrl);\n        }\n    }\n\n    public void loadModel(String url) {\n        if (url == null) {\n            return;\n        }\n        this.modelUrl = url;\n        if (isAttached()) {\n            getElement().executeJs(\"window.updateViewer($0)\", url);\n        }\n    }\n\n    public void highlightComponent(String path) {\n        if (isAttached()) {\n            getElement().executeJs(\"window.highlightComponent($0)\", path);\n        }\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/itemtype/ItemTypeComponent.java =====\npackage com.ua.crow.views.components.itemtype;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.html.Image;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\n\nimport java.util.EnumMap;\nimport java.util.Map;\n\npublic class ItemTypeComponent extends HorizontalLayout {\n\n    private static final Map<ItemTypes, String> ICONS = new EnumMap<>(ItemTypes.class);\n    static {\n        ICONS.put(ItemTypes.COMPONENT, \"Component icon.jpg\");\n        ICONS.put(ItemTypes.PART, \"Part icon.jpg\");\n        ICONS.put(ItemTypes.BOM, \"BomIcon copy.jpg\");\n        ICONS.put(ItemTypes.FASTENER, \"Nut icon copy.jpg\");\n        ICONS.put(ItemTypes.THRDPARTY, \"3rd-partyicon.jpg\");\n        ICONS.put(ItemTypes.NONE, \"nonetype icon.jpg\");\n    }\n\n    public ItemTypeComponent(ItemTypes type) {\n        setSpacing(true);\n        setPadding(false);\n        if (type == null) {\n            return;\n        }\n        String path = \"images/componenttypes/\" + ICONS.getOrDefault(type, \"nonetype icon.jpg\");\n        Image icon = new Image(path, type.name());\n        icon.setWidth(\"20px\");\n        icon.setHeight(\"20px\");\n        Span label = new Span(UI.getCurrent().getTranslation(\"itemType.\" + type.name().toLowerCase()));\n        add(icon, label);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/itemtype/ItemTypeSelect.java =====\npackage com.ua.crow.views.components.itemtype;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.combobox.ComboBox;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\n\npublic class ItemTypeSelect extends ComboBox<ItemTypes> {\n\n    public ItemTypeSelect() {\n        setItems(ItemTypes.values());\n        setItemLabelGenerator(type -> UI.getCurrent().getTranslation(\"itemType.\" + type.name().toLowerCase()));\n        setRenderer(new ComponentRenderer<>(ItemTypeComponent::new));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/grids/ProjectListGrid.java =====\npackage com.ua.crow.views.components.product.grids;\n\nimport com.flowingcode.vaadin.addons.gridhelpers.GridHelper;\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.data.provider.CallbackDataProvider;\n\npublic class ProjectListGrid extends Grid<ProductActiveReleaseDto> {\n    private final ProductController controller;\n    public ProjectListGrid(ProductController controller) {\n        super(ProductActiveReleaseDto.class);\n        this.controller = controller;\n        removeAllColumns();\n        addColumn(ProductActiveReleaseDto::getId).setHeader(\"ID\");\n        addColumn(ProductActiveReleaseDto::getName).setHeader(\"Name\");\n        addColumn(ProductActiveReleaseDto::getUkrName).setHeader(\"Ukrainian Name\");\n        addColumn(ProductActiveReleaseDto::getCreator).setHeader(\"Creator\");\n        addColumn(ProductActiveReleaseDto::getModifier).setHeader(\"Modifier\");\n        addColumn(ProductActiveReleaseDto::getCreatedAt).setHeader(\"Created At\");\n        addColumn(ProductActiveReleaseDto::getModifiedAt).setHeader(\"Modified At\");\n        GridHelper.setSelectOnClick(this, true);\n        setSelectionMode(SelectionMode.SINGLE);\n        GridHelper.setSelectionColumnHidden(this, true);\n        setDataProvider(new CallbackDataProvider<>(\n                query -> controller.getAllProducts().stream()\n                        .skip(query.getOffset())\n                        .limit(query.getLimit()),\n                query -> controller.getAllProducts().size()\n        ));\n    }\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/items/ProductForm.java =====\npackage com.ua.crow.views.components.product.items;\n\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.TextField;\n\npublic class ProductForm extends FormLayout {\n\n    private final TextField name = new TextField(\"Name\");\n    private final TextField ukrName = new TextField(\"Ukrainian Name\");\n    private final TextField thumbnailUrl = new TextField(\"Thumbnail URL\");\n\n    public ProductForm() {\n        add(name, ukrName, thumbnailUrl);\n    }\n\n    public void setProduct(ProductActiveReleaseDto productDto) {\n        name.setValue(productDto.getName() != null ? productDto.getName() : \"\");\n        ukrName.setValue(productDto.getUkrName() != null ? productDto.getUkrName() : \"\");\n        thumbnailUrl.setValue(productDto.getThumbnailUrl() != null ? productDto.getThumbnailUrl() : \"\");\n    }\n\n    public ProductActiveReleaseDto getProductDto() {\n        ProductActiveReleaseDto p = new ProductActiveReleaseDto();\n        p.setName(name.getValue().trim());\n        p.setUkrName(ukrName.getValue().trim());\n        p.setThumbnailUrl(\"\".equals(thumbnailUrl.getValue().trim())?null:thumbnailUrl.getValue().trim());\n        return p;\n\n    }\n\n    public void clear() {\n        name.clear();\n        ukrName.clear();\n        thumbnailUrl.clear();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/items/ProductCreatePopup.java =====\npackage com.ua.crow.views.components.product.items;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.vaadin.componentfactory.EnhancedDialog;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.button.ButtonVariant;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.orderedlayout.FlexComponent;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.notification.Notification;\n\n\npublic class ProductCreatePopup extends Dialog {\n\n    private final ProductForm productForm;\n    private final ProductController productController;\n\n    public ProductCreatePopup(ProductController productController) {\n        super();\n        this.productController = productController;\n        this.productForm = new ProductForm();\n        initLayout();\n    }\n\n    private void initLayout() {\n        setWidth(\"400px\");\n        setHeight(\"auto\");\n        setCloseOnEsc(true);\n        setCloseOnOutsideClick(true);\n        setModal(true);\n        setDraggable(true);\n        Button saveButton = new Button(\"Save\", e -> save());\n        saveButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);\n\n        Button cancelButton = new Button(\"Cancel\", e -> close());\n\n        HorizontalLayout footer = new HorizontalLayout(saveButton, cancelButton);\n        footer.setJustifyContentMode(FlexComponent.JustifyContentMode.END);\n\n        getHeader().add(new Span(\"Create New Product\"));\n\n        add(productForm);\n        getFooter().add(footer);\n    }\n\n    @Override\n    public void open() {\n        productForm.clear();\n        super.open();\n    }\n\n    private void save() {\n        ProductActiveReleaseDto productDto = productForm.getProductDto();\n\n        if (productDto.getName().isEmpty()) {\n            Notification.show(\"Name is required!\", 3000, Notification.Position.TOP_CENTER);\n            return;\n        }\n\n        productController.createProduct(productDto);\n        Notification.show(\"Product saved successfully.\", 2000, Notification.Position.TOP_CENTER);\n        close();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/views/ProductsListView.java =====\npackage com.ua.crow.views.components.product.views;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.product.grids.ProjectListGrid;\nimport com.ua.crow.views.components.product.items.ProductCreatePopup;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\n\n@Route(value = \"\", layout = MainLayout.class)\n@PageTitle(\"Products\")\n@PermitAll\npublic class ProductsListView extends RndWorkspaceRestrictedView implements BeforeEnterObserver , NavigationContextAware {\n    private final ProductController productController;\n    private final ProjectListGrid grid;\n    private final GridToolbar toolbar;\n    private final ProductCreatePopup productCreatePopup;\n\n    private final NavigationHistoryService historyService;\n\n    public ProductsListView(ProductController productController, NavigationHistoryService historyService) {\n        this.productController = productController;\n        productCreatePopup = new ProductCreatePopup(productController);\n        grid = new ProjectListGrid(productController);\n        this.historyService = historyService;\n        toolbar = createToolbar();\n        grid.addItemDoubleClickListener(event -> {\n            Long id = event.getItem().getId(); // Предполагаем, что ProductDto имеет getId()\n            UI.getCurrent().navigate(\"product/\" + id);\n        });\n        setSizeFull();\n        add(toolbar, grid);\n        setFlexGrow(1, grid);\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar toolbar = new GridToolbar(true,true,true,true);\n        toolbar.setRefreshHandler(b->grid.refresh());\n        toolbar.setAddHandler(b->productCreatePopup.open());\n        toolbar.setEditHandler((b) -> {/* Implement edit logic */});\n        toolbar.setDeleteHandler((b) -> {/* Implement delete logic */});\n        toolbar.addButtonStateHandler(EDIT,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n\n        return toolbar;\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        // Очищаем старую структуру и создаём новый корень контекста\n        historyService.clear();\n        addToHistory();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(ProductsListView.class,\n                \"Products\",\n                \"\",\n                null,\n                () -> null);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/views/ProductPage.java =====\npackage com.ua.crow.views.components.product.views;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.*;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = ProductPage.ROUTE, layout = MainLayout.class)\n@PermitAll\npublic class ProductPage extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId\";\n    public static final String PRODUCT_ROUTE_PREFIX = \"product/\";\n\n    private final ProductController productController;\n    private final BreadcrumbBar breadcrumbBar;\n    private final NavigationHistoryService historyService;\n    private Long productId;\n    private ProductDto product;\n\n    public ProductPage(ProductController productController, NavigationHistoryService historyService) {\n        this.productController = productController;\n        this.historyService = historyService;\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n        add(breadcrumbBar);\n        setSizeFull();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<ProductDto> getCurrentContext() {\n        return new HistoryEntry<>(ProductPage.class,\n                product.getName(),\n                PRODUCT_ROUTE_PREFIX + product.getId(),\n                product, ()-> productController.getProductById(product.getId()).orElseThrow());\n    }\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n\n        if (productId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        try {\n            product = productController.getProductById(productId).orElseThrow();\n            addToHistory();\n        } catch (Exception e) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        breadcrumbBar.refresh();\n        add(new H2(\"Product: \" + product.getName()));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/bomitem/FusionComponentPanel.java =====\npackage com.ua.crow.views.components.fusionbom.bomitem;\n\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.grid.editor.Editor;\nimport com.vaadin.flow.component.orderedlayout.FlexLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.textfield.TextArea;\nimport com.vaadin.flow.component.textfield.TextField;\nimport com.vaadin.flow.data.binder.Binder;\nimport com.vaadin.flow.data.provider.ListDataProvider;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic class FusionComponentPanel extends VerticalLayout {\n\n    private final boolean enableCrud;\n    private GridToolbar toolbar;\n    private final Binder<Body> binder = new Binder<>(Body.class);\n    private final Editor<Body> editor;\n    private ListDataProvider<Body> dataProvider;\n\n    private final TextField partName = new TextField(\"Part Name\");\n    private final TextField partNumber = new TextField(\"Part Number\");\n    private final TextArea description = new TextArea(\"Description\");\n    private final TextField sourceFile = new TextField(\"Source File\");\n    private final TextField path = new TextField(\"Path\");\n\n    private final Grid<Body> bodyGrid = new Grid<>();\n\n    public FusionComponentPanel() {\n        this(false);\n    }\n\n    public FusionComponentPanel(boolean enableCrud) {\n        this.enableCrud = enableCrud;\n        this.editor = bodyGrid.getEditor();\n\n        setWidthFull();\n        partNumber.setReadOnly(true);\n        sourceFile.setReadOnly(true);\n        path.setReadOnly(true);\n\n        FlexLayout fieldsLayout = new FlexLayout();\n        fieldsLayout.setFlexWrap(FlexLayout.FlexWrap.WRAP);\n        fieldsLayout.setWidthFull();\n        fieldsLayout.setAlignItems(Alignment.END);\n        fieldsLayout.setJustifyContentMode(JustifyContentMode.START);\n        fieldsLayout.getStyle().set(\"gap\", \"10px\");\n        fieldsLayout.add(partName, partNumber, description, sourceFile, path);\n\n        add(fieldsLayout);\n\n        if (enableCrud) {\n            toolbar = new GridToolbar(true, true, true, false);\n            add(toolbar);\n            configureToolbar();\n        }\n\n        add(bodyGrid);\n        setupBodyGrid();\n    }\n\n    private void setupBodyGrid() {\n        bodyGrid.setWidthFull();\n        // Use a mutable collection as ListDataProvider modifies the backing list\n        dataProvider = new ListDataProvider<>(new java.util.ArrayList<>());\n        bodyGrid.setDataProvider(dataProvider);\n\n        var nameCol = bodyGrid.addColumn(Body::getBodyName).setHeader(\"Body Name\");\n        var descCol = bodyGrid.addColumn(Body::getDescription).setHeader(\"Description\");\n        bodyGrid.addColumn(Body::getWidthMm).setHeader(\"Width (mm)\");\n        bodyGrid.addColumn(Body::getLengthMm).setHeader(\"Length (mm)\");\n        bodyGrid.addColumn(Body::getHeightMm).setHeader(\"Height (mm)\");\n        bodyGrid.addColumn(Body::getVolumeCm3).setHeader(\"Volume (cm³)\");\n        bodyGrid.addColumn(Body::getAreaCm2).setHeader(\"Area (cm²)\");\n        bodyGrid.addColumn(Body::getMassKg).setHeader(\"Mass (kg)\");\n        bodyGrid.addColumn(b -> b.getMaterial() != null ? b.getMaterial().getName() : \"\").setHeader(\"Material\");\n\n        if (enableCrud) {\n            editor.setBinder(binder);\n            editor.setBuffered(true);\n\n            TextField nameField = new TextField();\n            binder.forField(nameField).bind(Body::getBodyName, Body::setBodyName);\n            nameCol.setEditorComponent(nameField);\n\n            TextField descField = new TextField();\n            binder.forField(descField).bind(Body::getDescription, Body::setDescription);\n            descCol.setEditorComponent(descField);\n\n            bodyGrid.addItemDoubleClickListener(e -> {\n                if (editor.isOpen()) {\n                    editor.cancel();\n                }\n                editor.editItem(e.getItem());\n            });\n        }\n    }\n\n    private void configureToolbar() {\n        toolbar.setAddHandler(b -> {\n            Body body = new Body();\n            dataProvider.getItems().add(body);\n            dataProvider.refreshAll();\n            bodyGrid.select(body);\n            editor.editItem(body);\n        });\n\n        toolbar.setEditHandler(b -> {\n            Body selected = bodyGrid.asSingleSelect().getValue();\n            if (selected != null) {\n                editor.editItem(selected);\n            }\n        });\n\n        toolbar.setDeleteHandler(b -> {\n            Body selected = bodyGrid.asSingleSelect().getValue();\n            if (selected != null) {\n                editor.cancel();\n                dataProvider.getItems().remove(selected);\n                dataProvider.refreshAll();\n            }\n        });\n\n        toolbar.addButtonStateHandler(EDIT,\n                btn -> btn.setEnabled(!bodyGrid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                btn -> btn.setEnabled(!bodyGrid.getSelectedItems().isEmpty()));\n        bodyGrid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n    }\n\n    public void setComponent(FusionComponentDto componentDto) {\n        partName.setValue(componentDto.getPartName() != null ? componentDto.getPartName() : \"\");\n        partNumber.setValue(componentDto.getPartNumber() != null ? componentDto.getPartNumber() : \"\");\n        description.setValue(componentDto.getDescription() != null ? componentDto.getDescription() : \"\");\n        sourceFile.setValue(componentDto.getSourceFile() != null ? componentDto.getSourceFile() : \"\");\n        path.setValue(componentDto.getPath() != null ? componentDto.getPath() : \"\");\n        List<Body> bodies = componentDto.getBodies() == null ? List.of() : List.copyOf(componentDto.getBodies());\n        dataProvider.getItems().clear();\n        dataProvider.getItems().addAll(bodies);\n        dataProvider.refreshAll();\n    }\n\n    public FusionComponentDto getUpdatedComponent(FusionComponentDto original) {\n        original.setPartName(partName.getValue());\n        original.setDescription(description.getValue());\n        if (enableCrud) {\n            original.setBodies(Set.copyOf(dataProvider.getItems()));\n        }\n        // partNumber, sourceFile, and path remain unchanged due to readonly.\n        return original;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/bomitem/ComponentView.java =====\npackage com.ua.crow.views.components.fusionbom.bomitem;\n\nimport com.ua.crow.plm.controller.fusion.FusionBomItemController;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.views.MainLayout;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"comp/:id/compver/:compver\", layout = MainLayout.class)\n@PageTitle(\"Component View\")\n@PermitAll\npublic class ComponentView extends RndWorkspaceRestrictedView implements BeforeEnterObserver {\n\n    private final FusionBomItemController itemController;\n\n    private String componentId;\n    private String componentVersion;\n\n    public ComponentView(FusionBomItemController itemController) {\n        this.itemController = itemController;\n        setSizeFull();\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        componentId = event.getRouteParameters().get(\"id\").orElse(null);\n        componentVersion = event.getRouteParameters().get(\"compver\").orElse(null);\n        if (componentId == null || componentVersion == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        FusionComponentDto component = itemController.readById(componentId, componentVersion,false);\n        if (component == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        removeAll();\n        add(new H2(\"Component: \" + component.getPartName()));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/util/FusionComponentUtils.java =====\npackage com.ua.crow.views.components.fusionbom.util;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\n\nimport java.lang.reflect.Type;\n\n/**\n * Utility methods for processing Fusion BOM components.\n */\npublic final class FusionComponentUtils {\n\n    private FusionComponentUtils() {\n        // Utility class\n    }\n\n    /**\n     * Checks if the given component has multiple bodies and the type is either\n     * COMPONENT or BOM. Only such components are considered problematic.\n     */\n    public static boolean hasMultipleBodiesIssue(FusionComponentDto component) {\n        if (component == null) {\n            return false;\n        }\n        ItemTypes type = component.getType();\n        boolean problematicType = type == ItemTypes.COMPONENT || type == ItemTypes.BOM|| type == ItemTypes.PART;\n        return problematicType && component.getBodies() != null && component.getBodies().size() > 1;\n    }\n\n    /**\n     * Recursively checks if the given component or any of its children have the\n     * multiple bodies issue.\n     */\n    public static boolean containsMultipleBodiesIssue(FusionComponentDto component) {\n        if (component == null) {\n            return false;\n        }\n        if (hasMultipleBodiesIssue(component)) {\n            return true;\n        }\n        for (FusionComponentDto child : component.getChildren()) {\n            if (containsMultipleBodiesIssue(child)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/MergeGridItem.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Row item combining CAD and Engineering BOM data for merge grid.\n */\n@Getter\n@Setter\npublic class MergeGridItem {\n    private String cadName;\n    private String cadPartNumber;\n    private ItemTypes cadType;\n    private Double cadQty;\n\n    private String engName;\n    private String engPartNumber;\n    private ItemTypes engType;\n    private Double engQty;\n    private int engLevel;\n\n    private boolean toAdd;\n    private boolean toDelete;\n\n    private List<MergeGridItem> children = new ArrayList<>();\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/FusionBomMergeView.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.ua.crow.views.components.fusionbom.merge.UiMergeService;\nimport com.ua.crow.views.components.fusionbom.merge.MergeGridItem;\nimport com.vaadin.flow.router.*;\nimport jakarta.annotation.security.PermitAll;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n\n/**\n * View for comparing and merging Fusion and Engineering BOMs using a single TreeGrid.\n */\n@Route(value = FusionBomMergeView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Merge BOMs\")\n@PermitAll\npublic class FusionBomMergeView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/fusionbom/:fusionId/rev/:revId/merge/:engineeringBomId\";\n\n    private final FusionBomController fusionBomController;\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final UiMergeService uiMergeService;\n\n    private final MergeTreeGrid treeGrid;\n    private final TreeGridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n\n    private Long productId;\n    private String fusionId;\n    private String revisionId;\n    private Long engineeringBomId;\n\n    @Autowired\n    public FusionBomMergeView(FusionBomController fusionBomController,\n                              EngineeringBomController engineeringBomController,\n                              NavigationHistoryService historyService,\n                              UiMergeService uiMergeService) {\n        this.fusionBomController = fusionBomController;\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.uiMergeService = uiMergeService;\n        this.treeGrid = new MergeTreeGrid();\n        this.toolbar = new TreeGridToolbar(false, false, false, true);\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n\n        toolbar.manageTreeGrid(treeGrid);\n        toolbar.setRefreshHandler(b -> loadData());\n\n        setSizeFull();\n        add(breadcrumbBar, toolbar, treeGrid);\n        setFlexGrow(1, treeGrid);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters().get(\"productId\").map(Long::parseLong).orElse(null);\n        fusionId = event.getRouteParameters().get(\"fusionId\").orElse(null);\n        revisionId = event.getRouteParameters().get(\"revId\").orElse(null);\n        engineeringBomId = event.getRouteParameters().get(\"engineeringBomId\").map(Long::parseLong).orElse(null);\n        if (fusionId == null || revisionId == null || engineeringBomId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        addToHistory();\n        loadData();\n    }\n\n    private void loadData() {\n        FusionBomDto fusion = fusionBomController.getFusionBomTree(fusionId, revisionId, false).orElse(null);\n        BomActiveReleaseDto engBom = engineeringBomController.byIdTree(engineeringBomId, 0L).orElse(null);\n        if (fusion != null && fusion.getRootPart() != null) {\n            MergeGridItem root = uiMergeService.buildGridData(fusion.getRootPart(), engBom);\n            treeGrid.setData(root);\n        }\n        breadcrumbBar.refresh();\n        toolbar.refreshButtonsStates();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(\n                FusionBomMergeView.class,\n                \"Merge BOMs\",\n                \"product/\" + productId + \"/fusionbom/\" + fusionId + \"/rev/\" + revisionId + \"/merge/\" + engineeringBomId,\n                null,\n                null\n        );\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/UiMergeService.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * Service preparing data for {@link MergeTreeGrid}.\n */\n@Service\npublic class UiMergeService {\n\n    private static class EngInfo {\n        ComponentActiveReleaseDto dto;\n        int level;\n    }\n\n    public MergeGridItem buildGridData(FusionComponentDto fusionRoot, BomActiveReleaseDto engBom) {\n        if (engBom == null) {\n            return buildGridData(fusionRoot, Collections.emptyList());\n        }\n        ComponentActiveReleaseDto root = convertBomToComponent(engBom);\n        return buildGridData(fusionRoot, List.of(root));\n    }\n\n    public MergeGridItem buildGridData(FusionComponentDto fusionRoot, Collection<ComponentActiveReleaseDto> engRoots) {\n        Map<String, EngInfo> engIndex = indexEngineering(engRoots);\n        FusionComponentDto rootCopy = fusionRoot.convert(FusionComponentDto.class);\n        insertDeletionItems(rootCopy, engRoots);\n        return convert(rootCopy, engIndex);\n    }\n\n    private MergeGridItem convert(FusionComponentDto cad, Map<String, EngInfo> engIndex) {\n        MergeGridItem item = new MergeGridItem();\n\n        boolean cadExists = cad.getFusionId() != null;\n        EngInfo info = cad.getPartNumber() == null ? null : engIndex.get(cad.getPartNumber());\n        boolean engExists = info != null;\n\n        if (cadExists) {\n            item.setCadName(cad.getPartName());\n            item.setCadPartNumber(cad.getPartNumber());\n            item.setCadType(cad.getType());\n            item.setCadQty(cad.getQuantity());\n        }\n\n        if (engExists) {\n            item.setEngName(info.dto.getName());\n            item.setEngPartNumber(info.dto.getPartNumber());\n            if (info.dto.getItemType() != null) {\n                item.setEngType(ItemTypes.valueOf(info.dto.getItemType()));\n            }\n            item.setEngQty(info.dto.getQuantity());\n            item.setEngLevel(info.level);\n        }\n\n        item.setToDelete(!cadExists && engExists);\n        item.setToAdd(cadExists && !engExists);\n\n        if (cad.getChildren() != null) {\n            for (FusionComponentDto child : cad.getChildren()) {\n                item.getChildren().add(convert(child, engIndex));\n            }\n        }\n        return item;\n    }\n\n    private ComponentActiveReleaseDto convertBomToComponent(BomActiveReleaseDto bom) {\n        ComponentActiveReleaseDto dto = new ComponentActiveReleaseDto();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        dto.setItemType(ItemTypes.BOM.name());\n        if (bom.getChildren() != null) {\n            dto.setParts(new ArrayList<>(bom.getChildren()));\n        }\n        return dto;\n    }\n\n    private Map<String, EngInfo> indexEngineering(Collection<ComponentActiveReleaseDto> roots) {\n        Map<String, EngInfo> map = new HashMap<>();\n        if (roots == null) return map;\n        Deque<Map.Entry<ComponentActiveReleaseDto, Integer>> stack = new ArrayDeque<>();\n        for (ComponentActiveReleaseDto r : roots) {\n            stack.push(new AbstractMap.SimpleEntry<>(r, 0));\n        }\n        while (!stack.isEmpty()) {\n            Map.Entry<ComponentActiveReleaseDto, Integer> entry = stack.pop();\n            ComponentActiveReleaseDto item = entry.getKey();\n            int level = entry.getValue();\n            if (item.getPartNumber() != null) {\n                EngInfo info = new EngInfo();\n                info.dto = item;\n                info.level = level;\n                map.put(item.getPartNumber(), info);\n            }\n            if (item.getParts() != null) {\n                for (ComponentActiveReleaseDto child : item.getParts()) {\n                    stack.push(new AbstractMap.SimpleEntry<>(child, level + 1));\n                }\n            }\n        }\n        return map;\n    }\n\n    private void insertDeletionItems(FusionComponentDto fusionRoot, Collection<ComponentActiveReleaseDto> engRoots) {\n        for (ComponentActiveReleaseDto engRoot : engRoots) {\n            processChildren(fusionRoot, engRoot.getParts());\n        }\n    }\n\n    private void processChildren(FusionComponentDto fusionParent, Collection<ComponentActiveReleaseDto> engChildren) {\n        if (engChildren == null) return;\n        Map<String, FusionComponentDto> childMap = fusionParent.getChildren().stream()\n                .filter(f -> f.getPartNumber() != null)\n                .collect(Collectors.toMap(FusionComponentDto::getPartNumber, f -> f, (a, b) -> a));\n        for (ComponentActiveReleaseDto child : engChildren) {\n            if (child.getPartNumber() == null) continue;\n            FusionComponentDto match = childMap.get(child.getPartNumber());\n            if (match != null) {\n                processChildren(match, child.getParts());\n            } else {\n                FusionComponentDto group = ensureDeleteGroup(fusionParent);\n                group.addChild(child.convert(FusionComponentDto.class));\n            }\n        }\n    }\n\n    private FusionComponentDto ensureDeleteGroup(FusionComponentDto parent) {\n        for (FusionComponentDto c : parent.getChildren()) {\n            if (\"items to delete\".equalsIgnoreCase(c.getPartName())) {\n                return c;\n            }\n        }\n        FusionComponentDto group = new FusionComponentDto();\n        group.setPartName(\"items to delete\");\n        parent.addChild(group);\n        return group;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/MergeTreeGrid.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.views.components.Badge;\nimport com.vaadin.flow.component.dependency.CssImport;\nimport com.vaadin.flow.component.dependency.StyleSheet;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.icon.Icon;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport com.ua.crow.views.components.itemtype.ItemTypeComponent;\n\nimport java.util.Collections;\n\n/**\n * TreeGrid displaying merged CAD and Engineering BOM data.\n */\n\n\n\n@StyleSheet(\"themes/crow/theme-editor.css\")\n@CssImport(\"themes/crow/theme-editor.css\")\npublic class MergeTreeGrid extends TreeGrid<MergeGridItem> {\n\n    private static final int NAME_MAX_LENGTH = 20;\n\n    public MergeTreeGrid() {\n        super(MergeGridItem.class);\n        removeAllColumns();\n        setSizeFull();\n\n        addComponentHierarchyColumn(item -> {\n            String name = item.getCadName();\n            Span span = new Span(trim(name, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        })\n                .setHeader(\"CAD Name\")\n                .setFlexGrow(1)\n                .setAutoWidth(true);\n\n        Column<MergeGridItem> column = addColumn(MergeGridItem::getCadPartNumber)\n                .setHeader(\"CAD Part Number\")\n                .setAutoWidth(true);\n        column.setRenderer(new ComponentRenderer<>(c -> {\n            if (c.isToDelete()) {\n                return Badge.removedItemsBadge(c.getEngPartNumber());\n            }\n            if (c.isToAdd()) {\n                return Badge.addedItemsBadge(c.getCadPartNumber());\n            }\n            return Badge.confirmedBadge(c.getCadPartNumber());\n        }));\n        addColumn(new ComponentRenderer<>(comp -> new ItemTypeComponent(comp.getCadType())))\n                .setHeader(\"CAD Type\")\n                .setAutoWidth(true);\n\n        addColumn(c -> formatQuantity(c.getCadQty()))\n                .setHeader(\"CAD Qty\")\n                .setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(c -> {\n            String full = indent(c.getEngName(), c.getEngLevel());\n            Span span = new Span(trim(full, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", c.getEngName() == null ? \"\" : c.getEngName());\n            return span;\n        })).setHeader(\"Eng Name\").setAutoWidth(true);\n\n        addColumn(c -> indent(c.getEngPartNumber(), c.getEngLevel()))\n                .setHeader(\"Eng Part Number\").setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(c -> new ItemTypeComponent(c.getEngType())))\n                .setHeader(\"Eng Type\").setAutoWidth(true);\n\n        addColumn(c -> formatQuantity(c.getEngQty()))\n                .setHeader(\"Eng Qty\").setAutoWidth(true);\n    }\n\n\n    public void setData(MergeGridItem root) {\n        setItems(Collections.singletonList(root), MergeGridItem::getChildren);\n        expandRecursively(Collections.singletonList(root), 2);\n    }\n\n    private String formatQuantity(Double qty) {\n        if (qty == null) return \"\";\n        return String.valueOf(qty);\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private String indent(String text, int level) {\n        if (text == null) {\n            return \"\";\n        }\n        String indent = \"\\u00A0\".repeat(Math.max(0, level) * 2);\n        return indent + text;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/edit/FusionComponentTreeGrid.java =====\npackage com.ua.crow.views.components.fusionbom.edit;\n\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.views.components.fusionbom.util.FusionComponentUtils;\nimport com.ua.crow.views.components.itemtype.ItemTypeComponent;\nimport com.ua.crow.views.components.itemtype.ItemTypeSelect;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.confirmdialog.ConfirmDialog;\nimport com.vaadin.flow.component.dependency.CssImport;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.grid.dnd.GridDropMode;\nimport com.vaadin.flow.component.grid.dnd.GridDragStartEvent;\nimport com.vaadin.flow.component.grid.editor.Editor;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.textfield.TextField;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.data.binder.Binder;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport java.util.function.BiConsumer;\n\nimport java.text.DecimalFormat;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Optional;\npublic class FusionComponentTreeGrid extends TreeGrid<FusionComponentDto> {\n\n    private final FusionBomController controller;\n    private final Binder<FusionComponentDto> binder;\n    private final Editor<FusionComponentDto> editor;\n    private FusionComponentDto draggedItem;\n    private BiConsumer<FusionComponentDto, FusionComponentDto> mergeHandler;\n\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public FusionComponentTreeGrid(FusionBomController controller) {\n        super(FusionComponentDto.class);\n        this.controller = controller;\n        this.binder = new Binder<>(FusionComponentDto.class);\n        this.editor = getEditor();\n\n        initializeGrid();\n        configureEditor();\n        configureColumns();\n        configureEditComponents();\n        configureListeners();\n        configureDragAndDrop();\n        configureRowStyles();\n    }\n\n    private void initializeGrid() {\n        removeAllColumns();\n        setSizeFull();\n    }\n\n    private void configureColumns() {\n        addComponentHierarchyColumn(item -> {\n            String name = item.getPartName();\n            Span span = new Span(trim(name, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        })\n                .setHeader(\"Part Name\")\n                .setFlexGrow(1)\n                .setAutoWidth(true);\n\n        addColumn(FusionComponentDto::getPartNumber)\n                .setHeader(\"Part Number\")\n                .setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(comp -> new ItemTypeComponent(comp.getType())))\n                .setHeader(\"Type\")\n                .setAutoWidth(true);\n\n        addColumn(c -> formatQuantity(c.getQuantity()))\n                .setHeader(\"Quantity\")\n                .setAutoWidth(true);\n\n        createBodiesColumn();\n\n        addColumn(FusionComponentDto::getDescription)\n                .setHeader(\"Description\")\n                .setFlexGrow(2)\n                .setAutoWidth(true);\n\n\n    }\n\n    private void configureEditor() {\n        editor.setBinder(binder);\n        editor.setBuffered(true);\n    }\n\n    private void configureEditComponents() {\n        var partNameColumn = getColumns().get(0);\n        var typeColumn = getColumns().get(2);\n        var quantityColumn = getColumns().get(3);\n        var descriptionColumn = getColumns().get(5);\n\n        TextField partNameField = new TextField();\n        binder.forField(partNameField).bind(FusionComponentDto::getPartName, FusionComponentDto::setPartName);\n        partNameColumn.setEditorComponent(partNameField);\n\n        ItemTypeSelect typeSelect = new ItemTypeSelect();\n        binder.forField(typeSelect).bind(FusionComponentDto::getType, FusionComponentDto::setType);\n        typeColumn.setEditorComponent(typeSelect);\n\n        TextField quantityField = new TextField();\n        binder.forField(quantityField)\n                .withConverter(Double::valueOf, String::valueOf)\n                .bind(FusionComponentDto::getQuantity, FusionComponentDto::setQuantity);\n        quantityColumn.setEditorComponent(quantityField);\n\n        TextField descriptionField = new TextField();\n        binder.forField(descriptionField).bind(FusionComponentDto::getDescription, FusionComponentDto::setDescription);\n        descriptionColumn.setEditorComponent(descriptionField);\n    }\n\n    private void configureListeners() {\n        addItemDoubleClickListener(event -> {\n            if (editor.isOpen()) {\n                editor.cancel();\n            }\n            editor.editItem(event.getItem());\n        });\n\n        editor.addOpenListener(e -> {\n            var partNameField = (TextField) getColumns().get(0).getEditorComponent();\n            partNameField.focus();\n        });\n    }\n\n    private void configureDragAndDrop() {\n        setRowsDraggable(true);\n        setDropMode(GridDropMode.ON_TOP);\n\n        addDragStartListener(this::onDragStart);\n\n        addDropListener(event -> event.getDropTargetItem().ifPresent(targetItem -> {\n            if (draggedItem != null && !draggedItem.equals(targetItem)) {\n                ConfirmDialog confirmDialog = new ConfirmDialog(\"Merge Items\",\n                        \"Do you want to merge '\" + draggedItem.getPartName() + \"' into '\" + targetItem.getPartName() + \"'?\",\n                        \"Merge\", e -> mergeItems(draggedItem, targetItem),\n                        \"Cancel\", e -> {});\n                confirmDialog.open();\n            }\n        }));\n\n        addDragEndListener(event -> draggedItem = null);\n    }\n\n    private void configureRowStyles() {\n        setClassNameGenerator(item -> {\n            if (FusionComponentUtils.hasMultipleBodiesIssue(item)) {\n                System.out.println(\"Multiple bodies: \" + item.getPartName());\n                return \"multiple-bodies\";\n            }\n            return null;\n        });\n    }\n\n    private void onDragStart(GridDragStartEvent<FusionComponentDto> event) {\n        draggedItem = event.getDraggedItems().stream().findFirst().orElse(null);\n    }\n\n    private void mergeItems(FusionComponentDto source, FusionComponentDto target) {\n        if (mergeHandler != null) {\n            mergeHandler.accept(source, target);\n        }\n    }\n    public void setMergeHandler(BiConsumer<FusionComponentDto, FusionComponentDto> handler) {\n        this.mergeHandler = handler;\n    }\n\n\n\n\n    public void setRoot(FusionComponentDto root) {\n        setItems(List.of(root), FusionComponentDto::getChildren);\n        expandRecursively(List.of(root), Integer.MAX_VALUE);\n    }\n\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n\n    private String formatQuantity(Double quantity) {\n        if (quantity == null) return \"\";\n        return new DecimalFormat(\"#.###\").format(quantity);\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private int getBodiesCount(FusionComponentDto component) {\n        Collection<?> bodies = component.getBodies();\n        return bodies == null ? 0 : bodies.size();\n    }\n\n    private void createBodiesColumn() {\n        Column<FusionComponentDto> column = addColumn(this::getBodiesCount)\n                .setHeader(\"Bodies\")\n                .setAutoWidth(true);\n        column.setClassNameGenerator(item ->\n                FusionComponentUtils.hasMultipleBodiesIssue(item) ? \"highlight-cell\" : null);\n\n        column.setRenderer(new ComponentRenderer<>(this::createBodiesCell));\n    }\n\n    private Span createBodiesCell(FusionComponentDto item) {\n        Span cell = new Span(String.valueOf(getBodiesCount(item)));\n        if (FusionComponentUtils.hasMultipleBodiesIssue(item)) {\n            cell.getStyle().setColor(\"var(--lumo-error-text-color)\");\n        }\n        return cell;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/edit/CADBomView.java =====\npackage com.ua.crow.views.components.fusionbom.edit;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.controller.fusion.FusionBomItemController;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.NotFoundException;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.Online3DViewer;\nimport com.ua.crow.plm.controller.cad.CadController;\nimport com.ua.crow.views.components.fusionbom.bomitem.FusionComponentPanel;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\n\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.contextmenu.MenuItem;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.notification.Notification;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.component.splitlayout.SplitLayout;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.combobox.ComboBox;\nimport com.vaadin.flow.component.UI;\nimport com.ua.crow.plm.dto.fusion.FusionRevisionDto;\nimport org.springframework.data.domain.Pageable;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.views.components.fusionbom.merge.FusionBomMergeView;\nimport com.vaadin.flow.router.*;\nimport com.vaadin.flow.theme.lumo.LumoIcon;\nimport com.ua.crow.views.components.fusionbom.util.FusionComponentUtils;\n\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"product/:productId/fusionbom/:fusionId/rev/:revId\", layout = MainLayout.class)\n\n@PageTitle(\"Fusion BOM\")\n@PermitAll\npublic class CADBomView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    private final FusionBomController fusionBomController;\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final FusionBomItemController itemController;\n    private final CadController cadController;\n    private final FusionComponentTreeGrid treeGrid;\n    private final BreadcrumbBar breadcrumbBar;\n    private final Online3DViewer viewerComponent;\n    private final VerticalLayout viewerLayout;\n    private final SplitLayout splitLayout;\n\n    private Long productId;\n    private String fusionId;\n    private String revisionId;\n    private FusionBomDto bom;\n\n    private TreeGridToolbar toolbar;\n    private MenuItem convertButton;\n    private ComboBox<FusionRevisionDto> versionSwitcher;\n\n    public CADBomView(FusionBomController fusionBomController,\n                      EngineeringBomController engineeringBomController,\n                      NavigationHistoryService historyService,\n                      FusionBomItemController itemController,\n                      CadController cadController) {\n        this.fusionBomController = fusionBomController;\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.itemController = itemController;\n        this.cadController = cadController;\n        this.treeGrid = new FusionComponentTreeGrid(fusionBomController);\n        this.treeGrid.setMergeHandler(this::mergeComponents);\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n        this.viewerComponent = new Online3DViewer();\n        //<theme-editor-local-classname>\n        addClassName(\"fusion-bom-view-div-1\");\n\n        toolbar = new TreeGridToolbar(false, false, true, true);\n        versionSwitcher = new ComboBox<>();\n        versionSwitcher.setItemLabelGenerator(v -> \"Revision \" + v.getNumber());\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!treeGrid.getSelectedItems().isEmpty()));\n        toolbar.setDeleteHandler(b -> treeGrid.getSelectedItems().stream()\n                .findFirst()\n                .ifPresent(this::handleDelete));\n        treeGrid.addSelectionListener(e -> {\n            toolbar.refreshButtonsStates();\n            e.getFirstSelectedItem().ifPresentOrElse(\n                    comp -> viewerComponent.highlightComponent(createPathfromPartNumbers()),\n                    () -> viewerComponent.highlightComponent(null)\n            );\n        });\n        toolbar.addCustomButton(COMPONENT, \"View component\", LumoIcon.PLUS.create(), btn -> {\n            FusionComponentDto selected = treeGrid.asSingleSelect().getValue();\n            if (selected != null) {\n                openComponentModal(selected.getFusionId(), selected.getRevisionId());\n            } else {\n                Notification.show(\"Please select a component first.\", 2000, Notification.Position.MIDDLE);\n            }\n        });\n\n        convertButton = toolbar.addCustomButton(CONVERT, \"Convert\", LumoIcon.DOWNLOAD.create(), btn -> {\n        });\n        var convertMenu = convertButton.getSubMenu();\n        convertMenu.addItem(\"Convert to New Engineering BOM\", e -> convertBom());\n        convertMenu.addItem(\"Merge into Existing Engineering BOM\", e -> openMergeDialog());\n        toolbar.addButtonStateHandler(CONVERT, b ->\n                b.setEnabled(bom != null && !FusionComponentUtils.containsMultipleBodiesIssue(bom.getRootPart())));\n        toolbar.addSpacer();\n\n        versionSwitcher.addValueChangeListener(e -> {\n            if (e.getValue() != null && !e.getValue().getRevisionId().equals(revisionId)) {\n                UI.getCurrent().navigate(CADBomView.class,\n                        new RouteParameters(\n                                java.util.Map.of(\n                                        \"productId\", String.valueOf(productId),\n                                        \"fusionId\", fusionId,\n                                        \"revId\", e.getValue().getRevisionId()\n                                )));\n            }\n        });\n        toolbar.addItem(versionSwitcher);\n\n        toolbar.manageTreeGrid(treeGrid);\n        toolbar.setRefreshHandler(b -> refresh());\n\n        toolbar.addCustomButton(SAVE, \"Save\", LumoIcon.CHECKMARK.create(), btn -> treeGrid.getEditor().save()).setVisible(false);\n        toolbar.addCustomButton(CANCEL, \"Cancel\", LumoIcon.CROSS.create(), btn -> treeGrid.getEditor().cancel()).setVisible(false);\n\n        treeGrid.getEditor().addOpenListener(e -> {\n            toolbar.setButtonVisibility(SAVE, true);\n            toolbar.setButtonVisibility(CANCEL, true);\n        });\n\n        treeGrid.getEditor().addCloseListener(e -> {\n            toolbar.setButtonVisibility(SAVE, false);\n            toolbar.setButtonVisibility(CANCEL, false);\n        });\n\n        treeGrid.getEditor().addSaveListener(e -> {\n            itemController.update(e.getItem(), false);\n            Notification.show(\"Changes saved successfully\", 3000, Notification.Position.TOP_END);\n            treeGrid.refresh();\n            toolbar.refreshButtonsStates();\n        });\n\n        this.splitLayout = new SplitLayout();\n\n        VerticalLayout bomLayout = new VerticalLayout(toolbar, treeGrid);\n        bomLayout.setSizeFull();\n        bomLayout.setFlexGrow(1, treeGrid);\n\n\n        this.viewerLayout = new VerticalLayout(viewerComponent);\n        this.viewerLayout.setSizeFull();\n        this.viewerLayout.setPadding(false);\n\n        splitLayout.addToPrimary(bomLayout);\n        splitLayout.addToSecondary(viewerLayout);\n        splitLayout.setSizeFull();\n        splitLayout.setSplitterPosition(50);\n\n        setSizeFull();\n        add(breadcrumbBar, splitLayout);\n        setFlexGrow(1, splitLayout);\n    }\n\n    private String createPathfromPartNumbers() {\n        return null;\n    }\n\n    private void openComponentModal(String compId, String compVer) {\n        Dialog dialog = new Dialog();\n        dialog.setWidth(\"90%\");\n        dialog.setHeight(\"90%\");\n        dialog.setModal(true);\n        dialog.setDraggable(true);\n        dialog.setResizable(true);\n\n        FusionComponentDto selectedComponent = itemController.readById(compId, compVer, true);\n\n        if (selectedComponent == null) {\n            Notification.show(\"Please select a component first.\", 2000, Notification.Position.MIDDLE);\n            return;\n        }\n\n        FusionComponentPanel componentPanel = new FusionComponentPanel(true);\n        componentPanel.setComponent(selectedComponent);\n\n        Button save = new Button(\"Save\", e -> {\n            itemController.update(componentPanel.getUpdatedComponent(selectedComponent), false);\n            treeGrid.refresh();\n            dialog.close();\n        });\n        Button cancel = new Button(\"Cancel\", e -> dialog.close());\n\n        dialog.add(componentPanel,\n                new com.vaadin.flow.component.orderedlayout.HorizontalLayout(save, cancel));\n        dialog.open();\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        try {\n            productId = event.getRouteParameters()\n                    .get(\"productId\")\n                    .map(Long::parseLong)\n                    .orElse(null);\n            fusionId = event.getRouteParameters().get(\"fusionId\").orElse(null);\n            revisionId = event.getRouteParameters().get(\"revId\").orElse(null);\n\n            if (productId == null || fusionId == null) {\n                event.rerouteTo(\"not-found\");\n                return;\n            }\n\n            if (!loadBom()) {\n                event.rerouteTo(\"not-found\");\n                return;\n            }\n\n            addToHistory();\n            loadAvailableRevisions();\n            updateView();\n            loadModel(bom.getRootPart());\n\n        } catch (NotFoundException e) {\n            event.rerouteTo(\"not-found\");\n        }\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(\n                CADBomView.class,\n                bom.getName(),\n                \"product/\" + productId + \"/fusionbom/\" + fusionId + \"/rev/\" + revisionId,\n                bom, () -> fusionBomController.getFusionBom(fusionId, revisionId)\n        );\n    }\n\n    private void mergeComponents(FusionComponentDto source, FusionComponentDto target) {\n        try {\n            var request = new com.ua.crow.plm.dto.requests.MergeBomItemsRequest();\n            request.setSourceFusionId(source.getFusionId());\n            request.setSourceRevisionId(source.getRevisionId());\n            request.setTargetFusionId(target.getFusionId());\n            request.setTargetRevisionId(target.getRevisionId());\n            itemController.merge(request);\n            Notification.show(\"Items merged\", 3000, Notification.Position.TOP_END);\n            refresh();\n        } catch (Exception e) {\n            Notification.show(\"Merge failed: \" + e.getMessage(), 5000, Notification.Position.MIDDLE);\n        }\n    }\n\n\n    private void convertBom() {\n        try {\n            var response = engineeringBomController.convertToEngineeringBom(fusionId, revisionId);\n            if (response.getStatusCode().is2xxSuccessful()) {\n                Notification.show(\"BOM converted successfully\", 3000, Notification.Position.TOP_END);\n            } else {\n                Notification.show(\"Conversion failed\", 3000, Notification.Position.TOP_END);\n            }\n        } catch (Exception e) {\n            Notification.show(\"Conversion failed\", 3000, Notification.Position.TOP_END);\n        }\n    }\n\n    private void handleDelete(FusionComponentDto dto) {\n        com.vaadin.flow.component.dialog.Dialog dialog = new com.vaadin.flow.component.dialog.Dialog();\n        dialog.add(\"Delete or remove the selected component from the BOM?\");\n        com.vaadin.flow.component.button.Button removeBtn =\n                new com.vaadin.flow.component.button.Button(\"Delete from BOM\", e -> {\n                    unlinkComponent(dto);\n                    dialog.close();\n                });\n        com.vaadin.flow.component.button.Button deleteBtn =\n                new com.vaadin.flow.component.button.Button(\"Delete\", e -> {\n                    deleteComponent(dto);\n                    dialog.close();\n                });\n        com.vaadin.flow.component.button.Button cancelBtn =\n                new com.vaadin.flow.component.button.Button(\"Cancel\", e -> dialog.close());\n        com.vaadin.flow.component.orderedlayout.HorizontalLayout hl =\n                new com.vaadin.flow.component.orderedlayout.HorizontalLayout(removeBtn, deleteBtn, cancelBtn);\n        dialog.add(hl);\n        dialog.open();\n    }\n\n    private void unlinkComponent(FusionComponentDto dto) {\n        fusionBomController.unlink(new com.ua.crow.plm.database.fusion.FusionId(dto.getFusionId(), dto.getRevisionId()));\n        refresh();\n    }\n\n    private void deleteComponent(FusionComponentDto dto) {\n        fusionBomController.deleteComponent(dto.getFusionId(), dto.getRevisionId());\n        refresh();\n    }\n\n    private void openMergeDialog() {\n        Dialog dialog = new Dialog();\n        dialog.setWidth(\"400px\");\n        dialog.setHeight(\"250px\");\n\n        ComboBox<EngineeringBomWoChildren> bomSelect = new ComboBox<>(\"Engineering BOM\");\n        bomSelect.setItemLabelGenerator(EngineeringBomWoChildren::getName);\n        List<EngineeringBomWoChildren> boms = engineeringBomController\n                .listByProductId(productId, 0L, Pageable.unpaged(), true);\n        bomSelect.setItems(boms);\n        var mergeableResponse = fusionBomController.mergeableEngineeringBom(fusionId, revisionId);\n        if (mergeableResponse.getStatusCode().is2xxSuccessful() && mergeableResponse.getBody() != null) {\n            bomSelect.setValue(mergeableResponse.getBody());\n        }\n\n        Button mergeBtn = new Button(\"Open Merge\", e -> {\n            EngineeringBomWoChildren selected = bomSelect.getValue();\n            if (selected != null) {\n                dialog.close();\n                UI.getCurrent().navigate(FusionBomMergeView.class, new RouteParameters(\n                        Map.of(\n                                \"productId\", String.valueOf(productId),\n                                \"fusionId\", String.valueOf(fusionId),\n                                \"revId\", String.valueOf(revisionId),\n                                \"engineeringBomId\", String.valueOf(selected.getId())\n                        )\n                ));\n            }\n        });\n\n        dialog.add(bomSelect, mergeBtn);\n        dialog.open();\n    }\n\n    private void showModelNotFound() {\n        viewerLayout.removeAll();\n        viewerLayout.add(new H2(\"Model not found\"));\n        splitLayout.setSplitterPosition(100);\n    }\n\n    private void loadModel(FusionComponentDto component) {\n        try {\n            String url = cadController.getStepFileUrl(component.getFusionId(), component.getRevisionId())\n                    .orElse(null);\n            if (url != null) {\n                viewerLayout.removeAll();\n                viewerLayout.add(viewerComponent);\n                splitLayout.setSplitterPosition(50);\n                viewerComponent.loadModel(url);\n            } else {\n                showModelNotFound();\n            }\n        } catch (NotFoundException e) {\n            showModelNotFound();\n        }\n    }\n\n    /**\n     * Fetches BOM data from the controller.\n     *\n     * @return true if BOM was successfully loaded\n     */\n    private boolean loadBom() {\n        bom = fusionBomController.getFusionBomTree(fusionId, revisionId, true).orElse(null);\n        return bom != null && bom.getRootPart() != null;\n    }\n\n    /**\n     * Applies loaded BOM data to UI components.\n     */\n    private void updateView() {\n        breadcrumbBar.refresh();\n        treeGrid.setRoot(bom.getRootPart());\n        toolbar.refreshButtonsStates();\n        if (bom.getRootPart() != null) {\n            loadModel(bom.getRootPart());\n        }\n    }\n\n    /**\n     * Refreshes data and updates UI. Toolbar buttons are disabled while data is being loaded.\n     */\n    private void refresh() {\n        setButtonsEnabled(false);\n        if (loadBom()) {\n            updateView();\n        }\n        setButtonsEnabled(true);\n        toolbar.refreshButtonsStates();\n    }\n\n    /**\n     * Enables or disables toolbar and custom buttons.\n     */\n    private void setButtonsEnabled(boolean enabled) {\n        toolbar.setDefaultButtonEnabled(REFRESH, enabled);\n        toolbar.setButtonEnabled(EXPAND_ALL, enabled);\n        toolbar.setButtonEnabled(COLLAPSE_ALL, enabled);\n        toolbar.setButtonEnabled(COMPONENT, enabled);\n        toolbar.setButtonEnabled(SAVE, enabled);\n        toolbar.setButtonEnabled(CANCEL, enabled);\n        convertButton.setEnabled(enabled);\n        toolbar.refreshButtonsStates();\n    }\n\n    private void loadAvailableRevisions() {\n        java.util.List<FusionRevisionDto> revs = fusionBomController.revisions(\n                fusionId, productId, 0L);\n        versionSwitcher.setItems(revs);\n        revs.stream()\n                .filter(r -> r.getRevisionId().equals(revisionId))\n                .findFirst()\n                .ifPresent(versionSwitcher::setValue);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/list/CADBomGrid.java =====\npackage com.ua.crow.views.components.fusionbom.list;\n\nimport com.flowingcode.vaadin.addons.gridhelpers.GridHelper;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.requests.FusionBomsListRequest;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class CADBomGrid extends TreeGrid<FusionBomDto>  {\n\n    private final FusionBomController controller;\n    private Long productId = null;\n    private Long release = 0L;\n    private boolean unprocessed = true;\n    private String partNumber;\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public CADBomGrid(FusionBomController controller) {\n        super(FusionBomDto.class);\n        this.controller = controller;\n\n        // ✅ Setup columns\n        removeAllColumns();\n        addColumn(FusionBomDto::getVersion).setHeader(\"Version\");\n        addColumn(FusionBomDto::getPartNumber).setHeader(\"Part Number\");\n        addComponentHierarchyColumn(item -> {\n            String name = item.getName();\n            Span span = new Span(trim(name, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        }).setHeader(\"Name\");\n        addColumn(f -> f.getProduct() != null ? f.getProduct().getName() : \"\").setHeader(\"Product\");\n        addColumn(FusionBomDto::getCreatedAt).setHeader(\"Created At\");\n        addColumn(FusionBomDto::getModifiedAt).setHeader(\"Modified At\");\n\n        // Grid behavior\n        GridHelper.setSelectOnClick(this, true);\n        setSelectionMode(SelectionMode.SINGLE);\n        GridHelper.setSelectionColumnHidden(this, true);\n\n        refresh();\n\n        // ✅ Navigation on double click\n        addItemDoubleClickListener(event -> {\n            FusionBomDto item = event.getItem();\n            UI.getCurrent().navigate(\"product/\" + productId + \"/fusionbom/\" + item.getFusionId()+\"/rev/\" + item.getRevisionId());\n        });\n    }\n\n    private List<FusionBomDto> fetchItems() {\n        FusionBomsListRequest request = new FusionBomsListRequest();\n        if (productId != null) {\n            request.setProductId(Optional.of(productId));\n            request.setRelease(Optional.ofNullable(release));\n            // When filtering by \"Unprocessed\" only send the flag when the\n            // checkbox is checked. Unchecked means show both processed and\n            // unprocessed BOMs, so the flag must be absent.\n            if (unprocessed) {\n                request.setUnprocessed(Optional.of(true));\n            }\n        }\n        if (partNumber != null && !partNumber.isBlank()) {\n            request.setPartNumber(Optional.of(partNumber));\n        }\n        return controller.fusionBoms(request, Pageable.unpaged());\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public void setRelease(Long release) {\n        this.release = release == null ? 0L : release;\n    }\n\n    public void setUnprocessed(boolean unprocessed) {\n        this.unprocessed = unprocessed;\n    }\n\n    public void setPartNumber(String partNumber) {\n        this.partNumber = partNumber;\n    }\n\n    public void refresh() {\n        List<FusionBomDto> items = fetchItems();\n        if (items == null) {\n            items = java.util.Collections.emptyList();\n        }\n        items = filterLastVersions(items);\n        setItems(items, FusionBomDto::getChildren);\n        if (!items.isEmpty()) {\n            expandRecursively(items, 1);\n        }\n    }\n\n    private List<FusionBomDto> filterLastVersions(List<FusionBomDto> items) {\n        java.util.Map<String, FusionBomDto> map = new java.util.HashMap<>();\n        for (FusionBomDto dto : items) {\n            FusionBomDto existing = map.get(dto.getFusionId());\n            if (existing == null || dto.getRevisionId().compareTo(existing.getRevisionId()) > 0) {\n                map.put(dto.getFusionId(), dto);\n            }\n        }\n        return new java.util.ArrayList<>(map.values());\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/list/CADBomListView.java =====\npackage com.ua.crow.views.components.fusionbom.list;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.*;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\n\n@Route(value = CADBomListView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Fusion BOMs\")\n@PermitAll\npublic class CADBomListView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/newcadboms\";\n\n    private final FusionBomController fusionBomController;\n    private final NavigationHistoryService historyService;\n    private final CADBomGrid grid;\n    private final TreeGridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n    private final com.ua.crow.plm.service.product.ProductService productService;\n\n    private Long productId;\n    private Long release = 0L;\n    private ProductDto product;\n\n    private final com.vaadin.flow.component.textfield.TextField partNumberField;\n    private final com.vaadin.flow.component.checkbox.Checkbox unprocessedBox;\n\n    public CADBomListView(FusionBomController fusionBomController,\n                                     NavigationHistoryService historyService,\n                                     ProductController productController,\n                                     com.ua.crow.plm.service.product.ProductService productService) {\n        this.fusionBomController = fusionBomController;\n        this.historyService = historyService;\n        this.productService = productService;\n        this.grid = new CADBomGrid(fusionBomController);\n        this.partNumberField = new com.vaadin.flow.component.textfield.TextField();\n        this.unprocessedBox = new com.vaadin.flow.component.checkbox.Checkbox(\"Unprocessed\");\n        this.toolbar = createToolbar();\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n\n        setSizeFull();\n        add(breadcrumbBar, toolbar, grid);\n        setFlexGrow(1, grid);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n        String relParam = event.getLocation().getQueryParameters().getParameters().getOrDefault(\"release\", java.util.List.of(\"0\")).get(0);\n        release = Long.parseLong(relParam);\n        if (productId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        product = new ProductDto();\n        product.setId(productId);\n        addToHistory();\n        grid.setProductId(productId);\n        grid.setRelease(release);\n        grid.setUnprocessed(unprocessedBox.getValue());\n        grid.setPartNumber(partNumberField.getValue());\n        grid.refresh();\n        breadcrumbBar.refresh();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<ProductDto> getCurrentContext() {\n        return new HistoryEntry<>(CADBomListView.class,\"Fusion BOMs\", \"product/\" + productId + \"/newcadboms\", product,()->null);\n    }\n\n    private void handleDelete(com.ua.crow.plm.dto.fusion.FusionBomDto dto) {\n        boolean isRoot = grid.getTreeData().getParent(dto) == null;\n        if (isRoot) {\n            com.vaadin.flow.component.confirmdialog.ConfirmDialog dialog = new com.vaadin.flow.component.confirmdialog.ConfirmDialog(\n                    \"Delete CAD BOM\",\n                    \"Delete selected BOM?\",\n                    \"Delete\",\n                    e -> { deleteBom(dto); },\n                    \"Cancel\",\n                    e -> {});\n            dialog.open();\n        } else {\n            com.vaadin.flow.component.dialog.Dialog d = new com.vaadin.flow.component.dialog.Dialog();\n            d.add(\"Detach or delete the selected BOM?\");\n            com.vaadin.flow.component.button.Button detach = new com.vaadin.flow.component.button.Button(\"Detach\", ev -> { unlinkBom(dto); d.close(); });\n            com.vaadin.flow.component.button.Button del = new com.vaadin.flow.component.button.Button(\"Delete\", ev -> { unlinkBom(dto); deleteBom(dto); d.close(); });\n            com.vaadin.flow.component.button.Button cancel = new com.vaadin.flow.component.button.Button(\"Cancel\", ev -> d.close());\n            com.vaadin.flow.component.orderedlayout.HorizontalLayout hl = new com.vaadin.flow.component.orderedlayout.HorizontalLayout(detach, del, cancel);\n            d.add(hl);\n            d.open();\n        }\n    }\n\n    private void deleteBom(com.ua.crow.plm.dto.fusion.FusionBomDto dto) {\n        fusionBomController.delete(new com.ua.crow.plm.database.fusion.FusionId(dto.getFusionId(), dto.getRevisionId()));\n        grid.refresh();\n    }\n\n    private void unlinkBom(com.ua.crow.plm.dto.fusion.FusionBomDto dto) {\n        fusionBomController.unlink(new com.ua.crow.plm.database.fusion.FusionId(dto.getFusionId(), dto.getRevisionId()));\n        grid.refresh();\n    }\n\n\n    private TreeGridToolbar createToolbar() {\n        TreeGridToolbar toolbar = new TreeGridToolbar(true,true,true,true);\n        toolbar.manageTreeGrid(grid);\n        toolbar.setRefreshHandler(b->grid.refresh());\n        toolbar.setAddHandler((b) -> {/* Implement creation */});\n        toolbar.setEditHandler((b) -> {/* Implement edit */});\n        toolbar.setDeleteHandler((b) -> grid.getSelectedItems().stream().findFirst().ifPresent(this::handleDelete));\n        toolbar.addButtonStateHandler(EDIT,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addSpacer();\n        partNumberField.setPlaceholder(\"Part Number\");\n        partNumberField.setClearButtonVisible(true);\n        partNumberField.addValueChangeListener(e -> {\n            grid.setPartNumber(e.getValue());\n            grid.refresh();\n        });\n        toolbar.addItem(partNumberField);\n        unprocessedBox.setValue(true);\n        unprocessedBox.addValueChangeListener(e -> {\n            grid.setUnprocessed(e.getValue());\n            grid.refresh();\n        });\n        toolbar.addItem(unprocessedBox);\n        return toolbar;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/tree/BomActiveReleaseTreeView.java =====\npackage com.ua.crow.views.components.engineeringbom.tree;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.ua.crow.views.components.engineeringbom.tree.ComponentDetailTabs;\nimport com.vaadin.flow.component.splitlayout.SplitLayout;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\n@Route(value = BomActiveReleaseTreeView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Engineering BOM\")\n@PermitAll\npublic class BomActiveReleaseTreeView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/engineeringbom/:bomId\";\n\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final BomActiveReleaseTreeGrid treeGrid;\n    private final TreeGridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n    private final ComponentDetailTabs detailTabs;\n    private final com.ua.crow.plm.service.engbom.BomService bomService;\n    private final com.vaadin.flow.component.combobox.ComboBox<com.ua.crow.plm.database.ReleaseVersion> versionBox;\n\n    private Long productId;\n    private Long bomId;\n    private Long release = 0L;\n    private EngineeringBomWoChildren bom;\n\n    public BomActiveReleaseTreeView(EngineeringBomController engineeringBomController,\n                                    NavigationHistoryService historyService,\n                                    com.ua.crow.plm.service.engbom.BomService bomService) {\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.bomService = bomService;\n        this.treeGrid = new BomActiveReleaseTreeGrid();\n        this.toolbar = new TreeGridToolbar(false, true, true, true);\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n        this.versionBox = new com.vaadin.flow.component.combobox.ComboBox<>();\n\n        toolbar.manageTreeGrid(treeGrid);\n        toolbar.setRefreshHandler(b -> refresh());\n        versionBox.setItemLabelGenerator(v -> v.getName());\n        versionBox.addValueChangeListener(e -> {\n            if (e.getValue() != null) {\n                release = e.getValue().getId();\n                refresh();\n            }\n        });\n        toolbar.addItem(versionBox);\n        treeGrid.addSelectionListener(e -> {\n            toolbar.refreshButtonsStates();\n            showProperties(e.getFirstSelectedItem().orElse(null));\n        });\n\n        setSizeFull();\n\n        VerticalLayout bomLayout = new VerticalLayout(toolbar, treeGrid);\n        bomLayout.setSizeFull();\n        bomLayout.setFlexGrow(1, treeGrid);\n\n        detailTabs = new ComponentDetailTabs();\n        detailTabs.setSizeFull();\n\n        VerticalLayout propertiesLayout = new VerticalLayout(detailTabs);\n        propertiesLayout.setSizeFull();\n\n        SplitLayout content = new SplitLayout();\n        content.addToPrimary(bomLayout);\n        content.addToSecondary(propertiesLayout);\n        content.setSizeFull();\n        content.setSplitterPosition(50);\n\n        add(breadcrumbBar, content);\n        setFlexGrow(1, content);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n        String relParam = event.getLocation().getQueryParameters().getParameters().getOrDefault(\"release\", java.util.List.of(\"0\")).get(0);\n        release = Long.parseLong(relParam);\n        bomId = event.getRouteParameters()\n                .get(\"bomId\")\n                .map(Long::parseLong)\n                .orElse(null);\n\n        if (bomId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        if (!loadBom()) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        addToHistory();\n        versionBox.setItems(bomService.getAllVersions(bomId));\n        versionBox.setValue(versionBox.getDataProvider().fetch(new com.vaadin.flow.data.provider.Query<>()).findFirst().orElse(null));\n        updateView();\n        breadcrumbBar.refresh();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(BomActiveReleaseTreeView.class,\n                bom.getName(),\n                \"product/\" + productId + \"/engineeringbom/\" + bomId,\n                bom, () -> engineeringBomController.byId(bomId, release).orElse(null));\n    }\n\n    private boolean loadBom() {\n        bom = engineeringBomController.byId(bomId, release).orElse(null);\n        return bom != null;\n    }\n\n    private void updateView() {\n        List<ComponentActiveReleaseDto> roots = engineeringBomController.fullbyId(bomId, release);\n        treeGrid.setRoots(roots);\n        toolbar.refreshButtonsStates();\n    }\n\n    private void refresh() {\n        if (loadBom()) {\n            updateView();\n        }\n    }\n\n    private void showProperties(ComponentActiveReleaseDto component) {\n        detailTabs.showComponent(component);\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/tree/ComponentDetailTabs.java =====\npackage com.ua.crow.views.components.engineeringbom.tree;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\nimport com.vaadin.flow.component.Component;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.html.H3;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.tabs.TabSheet;\nimport com.vaadin.flow.component.textfield.NumberField;\nimport com.vaadin.flow.component.textfield.TextArea;\nimport com.vaadin.flow.component.textfield.TextField;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ComponentDetailTabs extends TabSheet {\n\n    private final VerticalLayout propertiesLayout = new VerticalLayout();\n    private final VerticalLayout tasksLayout = new VerticalLayout();\n    private final VerticalLayout assetsLayout = new VerticalLayout();\n    private final VerticalLayout instrumentsLayout = new VerticalLayout();\n    private final VerticalLayout camArtefactsLayout = new VerticalLayout();\n\n    private final VerticalLayout propertyGroupsLayout = new VerticalLayout();\n    private final FormLayout componentForm = new FormLayout();\n\n    private final TextField nameField = new TextField(\"Name\");\n    private final TextField ukrNameField = new TextField(\"Ukrainian Name\");\n    private final TextField partNumberField = new TextField(\"Part Number\");\n    private final NumberField quantityField = new NumberField(\"Quantity\");\n    private final TextArea descriptionField = new TextArea(\"Description\");\n    private final TextField creatorField = new TextField(\"Creator\");\n    private final TextField createdAtField = new TextField(\"Created At\");\n    private final TextField modifierField = new TextField(\"Modifier\");\n    private final TextField modifiedAtField = new TextField(\"Modified At\");\n\n    private final Button saveButton = new Button(\"Save\");\n    private final Button cancelButton = new Button(\"Cancel\");\n\n    public ComponentDetailTabs() {\n        setSizeFull();\n\n        propertiesLayout.setSizeFull();\n        tasksLayout.setSizeFull();\n        assetsLayout.setSizeFull();\n        instrumentsLayout.setSizeFull();\n        camArtefactsLayout.setSizeFull();\n\n        creatorField.setReadOnly(true);\n        createdAtField.setReadOnly(true);\n        modifierField.setReadOnly(true);\n        modifiedAtField.setReadOnly(true);\n\n        HorizontalLayout buttons = new HorizontalLayout(saveButton, cancelButton);\n\n        componentForm.add(nameField, ukrNameField, partNumberField,\n                quantityField, descriptionField, creatorField,\n                createdAtField, modifierField, modifiedAtField);\n\n        propertiesLayout.add(buttons, componentForm, propertyGroupsLayout);\n        propertiesLayout.setFlexGrow(1, propertyGroupsLayout);\n\n        add(\"Properties\", propertiesLayout);\n        add(\"Tasks\", tasksLayout);\n        add(\"Assets\", assetsLayout);\n        add(\"Instruments\", instrumentsLayout);\n        add(\"CAM Artefacts\", camArtefactsLayout);\n    }\n\n    public void showComponent(ComponentActiveReleaseDto component) {\n        propertyGroupsLayout.removeAll();\n\n        if (component == null) {\n            clearFields();\n            return;\n        }\n\n        nameField.setValue(component.getName() != null ? component.getName() : \"\");\n        ukrNameField.setValue(component.getUkrName() != null ? component.getUkrName() : \"\");\n        partNumberField.setValue(component.getPartNumber() != null ? component.getPartNumber() : \"\");\n        quantityField.setValue(component.getQuantity());\n        descriptionField.setValue(component.getDescription() != null ? component.getDescription() : \"\");\n        creatorField.setValue(component.getCreator() != null ? component.getCreator() : \"\");\n        createdAtField.setValue(component.getCreatedAt() != null ? component.getCreatedAt().toString() : \"\");\n        modifierField.setValue(component.getModifier() != null ? component.getModifier() : \"\");\n        modifiedAtField.setValue(component.getModifiedAt() != null ? component.getModifiedAt().toString() : \"\");\n\n        if (component.getProperties() != null) {\n            component.getProperties().stream()\n                    .collect(Collectors.groupingBy(p -> {\n                        var group = p.getPropertyType().getGroup();\n                        return group != null ? group.getName() : \"Ungrouped\";\n                    }))\n                    .forEach((groupName, props) -> {\n                        H3 title = new H3(groupName);\n                        Grid<CompPropertiesActiveReleaseDto> grid = createPropertyGrid(props);\n                        propertyGroupsLayout.add(title, grid);\n                    });\n        }\n    }\n\n    private void clearFields() {\n        nameField.clear();\n        ukrNameField.clear();\n        partNumberField.clear();\n        quantityField.clear();\n        descriptionField.clear();\n        creatorField.clear();\n        createdAtField.clear();\n        modifierField.clear();\n        modifiedAtField.clear();\n    }\n\n    private Grid<CompPropertiesActiveReleaseDto> createPropertyGrid(List<CompPropertiesActiveReleaseDto> props) {\n        Grid<CompPropertiesActiveReleaseDto> grid = new Grid<>();\n        grid.addColumn(p -> p.getPropertyType().getName()).setHeader(\"Property\");\n        grid.addComponentColumn(this::createValueField).setHeader(\"Value\");\n        grid.setItems(props);\n        grid.setWidthFull();\n        return grid;\n    }\n\n    private Component createValueField(ComponentPropertiesDTO property) {\n        if (property.getPropertyType().getDataType() == DataTypes.NUMBER) {\n            NumberField field = new NumberField();\n            if (property.getNumericValue() != null) {\n                field.setValue(property.getNumericValue());\n            }\n            field.addValueChangeListener(e -> property.setNumericValue(e.getValue()));\n            return field;\n        }\n        TextField field = new TextField();\n        field.setValue(property.getStringValue() != null ? property.getStringValue() : \"\");\n        field.addValueChangeListener(e -> property.setStringValue(e.getValue()));\n        return field;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/tree/BomActiveReleaseTreeGrid.java =====\npackage com.ua.crow.views.components.engineeringbom.tree;\n\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.views.components.itemtype.ItemTypeComponent;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\n\nimport java.util.Collection;\nimport java.util.List;\n\npublic class BomActiveReleaseTreeGrid extends TreeGrid<ComponentActiveReleaseDto> {\n\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public BomActiveReleaseTreeGrid() {\n        super(ComponentActiveReleaseDto.class);\n        removeAllColumns();\n        setSizeFull();\n\n        addComponentHierarchyColumn(item -> {\n            String formatted = formatName(item);\n            Span span = new Span(formatted);\n            span.getElement().setProperty(\"title\", item.getName() == null ? \"\" : item.getName());\n            return span;\n        })\n                .setHeader(\"Name\")\n                .setFlexGrow(1)\n                .setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(dto -> {\n            ItemTypes type = dto.getItemType() == null ? ItemTypes.NONE : ItemTypes.valueOf(dto.getItemType());\n            return new ItemTypeComponent(type);\n        }))\n                .setHeader(\"Type\")\n                .setAutoWidth(true);\n\n        addColumn(dto -> formatQuantity(dto.getQuantity()))\n                .setHeader(\"Quantity\")\n                .setAutoWidth(true);\n\n    }\n\n    public void setRoots(Collection<ComponentActiveReleaseDto> roots) {\n        setItems(roots, ComponentActiveReleaseDto::getParts);\n        expandRecursively(roots, 2);\n    }\n\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private String formatQuantity(Double quantity) {\n        if (quantity == null) return \"\";\n        return String.valueOf(quantity);\n    }\n\n    private String formatName(ComponentActiveReleaseDto dto) {\n        String name = trim(dto.getName(), NAME_MAX_LENGTH);\n        String partNumber = dto.getPartNumber();\n        String quantity = formatQuantity(dto.getQuantity());\n        boolean hasPartNumber = partNumber != null && !partNumber.isBlank();\n        boolean hasQuantity = quantity != null && !quantity.isBlank();\n        if (!hasPartNumber && !hasQuantity) {\n            return name;\n        }\n        StringBuilder sb = new StringBuilder(name).append(\" (\");\n        if (hasPartNumber) {\n            sb.append(\"Part Number: \").append(partNumber);\n        }\n        if (hasQuantity) {\n            if (hasPartNumber) {\n                sb.append(\", \");\n            }\n            sb.append(\"Quantity: \").append(quantity);\n        }\n        sb.append(\")\");\n        return sb.toString();\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/list/BomActiveReleaseGrid.java =====\npackage com.ua.crow.views.components.engineeringbom.list;\n\nimport com.flowingcode.vaadin.addons.gridhelpers.GridHelper;\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.data.provider.CallbackDataProvider;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\npublic class BomActiveReleaseGrid extends Grid<EngineeringBomWoChildren> {\n\n    private final EngineeringBomController controller;\n    private Long productId;\n    private Long release = 0L;\n\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public BomActiveReleaseGrid(EngineeringBomController controller) {\n        super(EngineeringBomWoChildren.class);\n        this.controller = controller;\n\n        removeAllColumns();\n        addColumn(EngineeringBomWoChildren::getPartNumber).setHeader(\"Part Number\");\n        addColumn(new ComponentRenderer<>(item -> {\n            String name = item.getName();\n            String shortName = trim(name, NAME_MAX_LENGTH);\n            Span span = new Span(shortName);\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        })).setHeader(\"Name\");\n        addColumn(b -> b.getProduct() != null ? b.getProduct().getName() : \"\")\n                .setHeader(\"Product\");\n        addColumn(EngineeringBomWoChildren::getCreatedAt).setHeader(\"Created At\");\n        addColumn(EngineeringBomWoChildren::getModifiedAt).setHeader(\"Modified At\");\n\n        GridHelper.setSelectOnClick(this, true);\n        setSelectionMode(SelectionMode.SINGLE);\n        GridHelper.setSelectionColumnHidden(this, true);\n\n        setDataProvider(new CallbackDataProvider<>(\n                query -> fetchItems(query.getOffset(), query.getLimit()).stream(),\n                query -> fetchItems(0, Integer.MAX_VALUE).size()\n        ));\n\n        addItemDoubleClickListener(event -> {\n            EngineeringBomWoChildren item = event.getItem();\n            UI.getCurrent().navigate(\"product/\" + productId + \"/engineeringbom/\" + item.getId());\n        });\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private List<EngineeringBomWoChildren> fetchItems(int offset, int limit) {\n        if (productId == null) {\n            return List.of();\n        }\n        List<EngineeringBomWoChildren> items = controller\n                .listByProductId(productId, release, Pageable.unpaged(), true);\n        items = filterLastVersions(items);\n        return items.stream().skip(offset).limit(limit).toList();\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public void setRelease(Long release) {\n        this.release = release == null ? 0L : release;\n    }\n\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n\n    private List<EngineeringBomWoChildren> filterLastVersions(List<EngineeringBomWoChildren> items) {\n        java.util.Map<String, EngineeringBomWoChildren> map = new java.util.HashMap<>();\n        for (EngineeringBomWoChildren b : items) {\n            EngineeringBomWoChildren existing = map.get(b.getPartNumber());\n            if (existing == null || b.getId() > existing.getId()) {\n                map.put(b.getPartNumber(), b);\n            }\n        }\n        return new java.util.ArrayList<>(map.values());\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/list/BomActiveReleaseListView.java =====\npackage com.ua.crow.views.components.engineeringbom.list;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.ADD;\n\n@Route(value = BomActiveReleaseListView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Engineering BOMs\")\n@PermitAll\npublic class BomActiveReleaseListView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/engineeringboms\";\n\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final BomActiveReleaseGrid grid;\n    private final GridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n    private final com.ua.crow.plm.service.product.ProductService productService;\n\n    private Long productId;\n    private Long release = 0L;\n    private ProductDto product;\n\n    public BomActiveReleaseListView(EngineeringBomController engineeringBomController,\n                                    NavigationHistoryService historyService,\n                                    ProductController productController,\n                                    com.ua.crow.plm.service.product.ProductService productService) {\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.productService = productService;\n        this.grid = new BomActiveReleaseGrid(engineeringBomController);\n        this.toolbar = createToolbar();\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n\n        setSizeFull();\n        add(breadcrumbBar, toolbar, grid);\n        setFlexGrow(1, grid);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n        String relParam = event.getLocation().getQueryParameters().getParameters().getOrDefault(\"release\", java.util.List.of(\"0\")).get(0);\n        release = Long.parseLong(relParam);\n        if (productId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        product = new ProductDto();\n        product.setId(productId);\n        addToHistory();\n         grid.setProductId(productId);\n        grid.setRelease(release);\n        grid.refresh();\n        breadcrumbBar.refresh();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<ProductDto> getCurrentContext() {\n        return new HistoryEntry<>(BomActiveReleaseListView.class,\n                \"Engineering BOMs\",\n                \"product/\" + productId + \"/engineeringboms\",\n                product, () -> null);\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar toolbar = new GridToolbar(true, true, true, true);\n        toolbar.setRefreshHandler(b -> grid.refresh());\n        toolbar.setAddHandler(b -> {/* Implement creation */});\n        toolbar.setEditHandler(b -> {/* Implement edit */});\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(this::handleDelete));\n        toolbar.addButtonStateHandler(EDIT,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        return toolbar;\n    }\n\n    private void handleDelete(com.ua.crow.plm.dto.active.EngineeringBomWoChildren dto) {\n        com.vaadin.flow.component.dialog.Dialog dialog = new com.vaadin.flow.component.dialog.Dialog();\n        dialog.add(\"Delete selected BOM only or delete with components?\");\n        com.vaadin.flow.component.button.Button bomOnly = new com.vaadin.flow.component.button.Button(\"Delete BOM\", e -> {\n            engineeringBomController.delete(dto.getId(), false);\n            dialog.close();\n            grid.refresh();\n        });\n        com.vaadin.flow.component.button.Button fullDelete = new com.vaadin.flow.component.button.Button(\"Delete with Components\", e -> {\n            engineeringBomController.delete(dto.getId(), true);\n            dialog.close();\n            grid.refresh();\n        });\n        com.vaadin.flow.component.button.Button cancel = new com.vaadin.flow.component.button.Button(\"Cancel\", e -> dialog.close());\n        com.vaadin.flow.component.orderedlayout.HorizontalLayout hl = new com.vaadin.flow.component.orderedlayout.HorizontalLayout(bomOnly, fullDelete, cancel);\n        dialog.add(hl);\n        dialog.open();\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/MainLayout.java =====\npackage com.ua.crow.views;\n\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.config.SecurityService;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.navigation.NavigationMenuBuilder;\nimport com.ua.crow.views.service.WorkspaceUIService;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.Unit;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.applayout.AppLayout;\nimport com.vaadin.flow.component.applayout.DrawerToggle;\nimport com.vaadin.flow.component.combobox.ComboBox;\nimport com.vaadin.flow.component.avatar.Avatar;\nimport com.vaadin.flow.component.menubar.MenuBar;\nimport com.vaadin.flow.component.contextmenu.MenuItem;\nimport com.vaadin.flow.component.contextmenu.SubMenu;\nimport com.vaadin.flow.component.html.*;\nimport com.vaadin.flow.component.orderedlayout.Scroller;\nimport com.vaadin.flow.component.sidenav.SideNav;\nimport com.vaadin.flow.theme.lumo.LumoUtility;\n\npublic class MainLayout extends AppLayout {\n\n    private H1 viewTitle;\n    private final Image logo = new Image(\"images/logo2.svg\", \"Logo\");\n    private final SideNav nav;\n\n\n    private final NavigationHistoryService historyService;\n    private final WorkspaceUIService workspaceUIService;\n    private final CrowUserService userService;\n    private final SecurityService securityService;\n\n    public MainLayout(NavigationHistoryService historyService,\n                      WorkspaceUIService workspaceUIService,\n                      CrowUserService userService,\n                      SecurityService securityService) {\n        this.historyService = historyService;\n        this.workspaceUIService = workspaceUIService;\n        this.userService = userService;\n        this.securityService = securityService;\n        WorkspaceType workspace = userService.getCurrentUser().getCurrentWorkspace();\n        if (workspace == null) {\n            workspace = WorkspaceType.RND;\n            userService.switchWorkspace(workspace);\n        }\n        this.nav = workspaceUIService.createSideNav(workspace);\n        setPrimarySection(Section.DRAWER);\n        addDrawerContent();\n        addHeaderContent();\n    }\n\n    private void addHeaderContent() {\n        DrawerToggle toggle = new DrawerToggle();\n        toggle.setAriaLabel(\"Menu toggle\");\n        viewTitle = new H1(\"Crow\");\n        viewTitle.addClassNames(LumoUtility.FontSize.LARGE, LumoUtility.Margin.NONE);\n\n        ComboBox<WorkspaceType> workspaceSelector = new ComboBox<>();\n        workspaceSelector.setItems(WorkspaceType.values());\n        WorkspaceType current = userService.getCurrentUser().getCurrentWorkspace();\n        workspaceSelector.setValue(current != null ? current : WorkspaceType.RND);\n        workspaceSelector.addValueChangeListener(e -> {\n            if (e.getValue() != null) {\n                userService.switchWorkspace(e.getValue());\n                workspaceUIService.populateSideNav(nav, e.getValue());\n                UI.getCurrent().navigate(\"\");\n            }\n        });\n\n        MenuBar userMenu = new MenuBar();\n        Avatar avatar = new Avatar(userService.getCurrentUser().getName());\n        MenuItem rootItem = userMenu.addItem(avatar);\n        SubMenu sub = rootItem.getSubMenu();\n        sub.addItem(userService.getCurrentUser().getUsername()).setEnabled(false);\n        sub.addItem(workspaceSelector).setEnabled(false);\n        sub.addItem(\"Logout\", e -> securityService.logout());\n\n        Div spacer = new Div();\n        spacer.getStyle().set(\"flex-grow\", \"1\");\n\n        addToNavbar(true, toggle, logo, spacer, userMenu);\n    }\n\n    private void addDrawerContent() {\n        Span appName = new Span(logo);\n        appName.addClassNames(LumoUtility.FontWeight.SEMIBOLD, LumoUtility.FontSize.LARGE);\n        logo.setHeight(50, Unit.PIXELS);\n        Header header = new Header(appName);\n        Scroller scroller = new Scroller(nav);\n        addToDrawer(header, scroller, createFooter());\n    }\n\n    private void updateNavigation() {\n        java.util.Map<String, Boolean> expanded = captureExpanded(nav.getItems());\n\n        WorkspaceType workspace = userService.getCurrentUser().getCurrentWorkspace();\n        workspaceUIService.populateSideNav(nav, workspace);\n        if (workspace == WorkspaceType.RND) {\n\n            NavigationMenuBuilder.updateSideNav(nav, historyService);\n        }\n\n        applyExpanded(nav.getItems(), expanded);\n    }\n\n    private java.util.Map<String, Boolean> captureExpanded(java.util.List<com.vaadin.flow.component.sidenav.SideNavItem> items) {\n        java.util.Map<String, Boolean> map = new java.util.HashMap<>();\n        for (com.vaadin.flow.component.sidenav.SideNavItem item : items) {\n            map.put(item.getLabel(), item.isExpanded());\n            map.putAll(captureExpanded(item.getItems()));\n        }\n        return map;\n    }\n\n    private void applyExpanded(java.util.List<com.vaadin.flow.component.sidenav.SideNavItem> items, java.util.Map<String, Boolean> state) {\n        for (com.vaadin.flow.component.sidenav.SideNavItem item : items) {\n            Boolean expanded = state.get(item.getLabel());\n            if (expanded != null) {\n                item.setExpanded(expanded);\n            }\n            applyExpanded(item.getItems(), state);\n        }\n    }\n\n\n\n    private Footer createFooter() {\n        return new Footer();\n    }\n\n    @Override\n    protected void afterNavigation() {\n        super.afterNavigation();\n        viewTitle.setText(getCurrentPageTitle());\n        updateNavigation();\n    }\n\n    private String getCurrentPageTitle() {\n        return getContent() != null ? getContent().getClass().getSimpleName() : \"\";\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/service/WorkspaceUIService.java =====\npackage com.ua.crow.views.service;\n\nimport com.ua.crow.views.pages.CncRndInterfaceView;\nimport com.ua.crow.views.pages.NotFoundView;\nimport com.ua.crow.views.workspaces.assembly.AssemblyChecklistView;\nimport com.ua.crow.views.workspaces.assembly.AssemblyInstructionsView;\nimport com.ua.crow.views.workspaces.logistics.LogisticsIncomingView;\nimport com.ua.crow.views.workspaces.logistics.LogisticsOutgoingView;\nimport com.ua.crow.views.workspaces.rnd.RndBomView;\nimport com.ua.crow.views.workspaces.rnd.RndCadView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.sidenav.SideNav;\nimport com.vaadin.flow.component.sidenav.SideNavItem;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class WorkspaceUIService {\n\n    public SideNav createSideNav(WorkspaceType workspace) {\n        SideNav nav = new SideNav();\n        populateSideNav(nav, workspace);\n        return nav;\n    }\n\n    public void populateSideNav(SideNav nav, WorkspaceType workspace) {\n        nav.addItem(new SideNavItem(\"CNC\", CncRndInterfaceView.class));\n        switch (workspace) {\n            case RND -> {\n                nav.addItem(new SideNavItem(\"CAD Editor\", RndCadView.class));\n                nav.addItem(new SideNavItem(\"BOM Viewer\", RndBomView.class));\n            }\n            case ASSEMBLY -> {\n                nav.addItem(new SideNavItem(\"Assembly Instructions\", AssemblyInstructionsView.class));\n                nav.addItem(new SideNavItem(\"Checklist\", AssemblyChecklistView.class));\n            }\n            case LOGISTICS -> {\n                nav.addItem(new SideNavItem(\"Incoming\", LogisticsIncomingView.class));\n                nav.addItem(new SideNavItem(\"Outgoing\", LogisticsOutgoingView.class));\n            }\n            default -> nav.addItem(new SideNavItem(\"Home\", NotFoundView.class));\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/service/HistoryEntry.java =====\npackage com.ua.crow.views.service;\n\nimport com.ua.crow.views.navigation.NavigationHistoryService;\n\nimport java.util.Objects;\nimport java.util.function.Supplier;\n\npublic class HistoryEntry<T> {\n    private final Class context;\n    private final String label;\n    private final String path;\n    private T contextObject;\n    private Supplier<T> fallbackSupplier;\n    private HistoryEntry<?> parentContext;\n    private HistoryEntry<?> childContext;\n\n    public HistoryEntry(Class context, String label, String path, T contextObject, Supplier<T> fallbackSupplier) {\n        this.context = context;\n        this.label = label;\n        this.path = path;\n        this.contextObject = contextObject;\n        this.fallbackSupplier = fallbackSupplier;\n    }\n\n    public T getContextObject() {\n        if (contextObject == null && fallbackSupplier != null) {\n            contextObject = fallbackSupplier.get();\n        }\n        return contextObject;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public Class<T> getContext() {\n        return context;\n    }\n\n    public HistoryEntry<?> getParentContext() {\n        return parentContext;\n    }\n\n    public void setParentContext(HistoryEntry<?> parentContext) {\n        this.parentContext = parentContext;\n    }\n\n    public HistoryEntry<?> getChildContext() {\n        return childContext;\n    }\n\n    public void setChildContext(HistoryEntry<?> childContext) {\n        this.childContext = childContext;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (!(obj instanceof HistoryEntry<?> other)) return false;\n        return Objects.equals(path, other.path);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(path);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/pages/LoginView.java =====\npackage com.ua.crow.views.pages;\n\nimport com.vaadin.flow.component.html.Image;\nimport com.vaadin.flow.component.checkbox.Checkbox;\nimport com.vaadin.flow.component.login.LoginForm;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport com.vaadin.flow.server.auth.AnonymousAllowed;\n\n@Route(\"login\")\n@PageTitle(\"Login | Corvus Forge\")\n@AnonymousAllowed\npublic class LoginView extends VerticalLayout implements BeforeEnterObserver {\n\n    private final LoginForm loginForm = new LoginForm();\n    private final Checkbox rememberMe = new Checkbox(\"Remember me\");\n    private final Image logo = new Image(\"images/logo1.svg\", \"Logo\");\n\n    public LoginView() {\n        addClassName(\"login-view\");\n        setSizeFull();\n        setAlignItems(Alignment.CENTER);\n        setJustifyContentMode(JustifyContentMode.CENTER);\n        setSpacing(false);\n\n        loginForm.setAction(\"login\");\n        logo.setWidth(\"200px\");\n\n        // Correct way: create a custom form layout explicitly\n        VerticalLayout customArea = new VerticalLayout();\n        customArea.setPadding(false);\n        customArea.setSpacing(false);\n        customArea.setAlignItems(Alignment.START);\n\n        // Add the checkbox to custom area\n        rememberMe.getElement().setAttribute(\"name\", \"remember-me\");\n        customArea.add(rememberMe);\n\n        // Attach custom area to login form slot\n        customArea.getElement().setAttribute(\"slot\", \"custom-form-area\");\n        loginForm.getElement().appendChild(customArea.getElement());\n\n        VerticalLayout wrapper = new VerticalLayout();\n        wrapper.setSpacing(true);\n        wrapper.setAlignItems(Alignment.CENTER);\n        wrapper.addClassName(\"login-wrapper\");\n        wrapper.add(logo, loginForm);\n\n        add(wrapper);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        if (event.getLocation().getQueryParameters().getParameters().containsKey(\"error\")) {\n            loginForm.setError(true);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/pages/NotFoundView.java =====\npackage com.ua.crow.views.pages;\n\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.html.H1;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.Route;\nimport com.vaadin.flow.server.auth.AnonymousAllowed;\n\n@Route(\"not-found\")\n@AnonymousAllowed\npublic class NotFoundView extends VerticalLayout {\n    public NotFoundView() {\n\n        setSizeFull();\n        setJustifyContentMode(JustifyContentMode.CENTER);\n        setAlignItems(Alignment.CENTER);\n        add(new H1(getTranslation(\"notfound.title\")));\n        Button backButton = new Button(getTranslation(\"notfound.back\"), event -> {\n            UI.getCurrent().getPage().executeJs(\"window.history.back()\");\n        });\n\n        add(backButton);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/pages/CncRndInterfaceView.java =====\npackage com.ua.crow.views.pages;\n\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.html.Div;\nimport com.vaadin.flow.component.html.H3;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport java.util.List;\n\n@Route(\"cnc-interface\")\n@PageTitle(\"CNC RnD Interface\")\n@PermitAll\npublic class CncRndInterfaceView extends HorizontalLayout {\n\n    public CncRndInterfaceView() {\n        setSizeFull();\n        setPadding(true);\n        \n        // Product Tree\n        VerticalLayout productTreeLayout = new VerticalLayout();\n        productTreeLayout.add(new H3(\"Product Tree\"));\n\n        TreeGrid<String> productTree = new TreeGrid<>();\n        productTree.addHierarchyColumn(String::toString).setHeader(\"Products\");\n        productTree.setItems(List.of(\"Product A\", \"Product B\"), item -> {\n            if (item.equals(\"Product A\")) return List.of(\"Component 1\", \"Component 2\");\n            if (item.equals(\"Product B\")) return List.of(\"Component 3\", \"Component 4\");\n            return List.of();\n        });\n        productTreeLayout.add(productTree);\n\n        // Component Tree\n        VerticalLayout componentTreeLayout = new VerticalLayout();\n        componentTreeLayout.add(new H3(\"Component Tree\"));\n\n        TreeGrid<String> componentTree = new TreeGrid<>();\n        componentTree.addHierarchyColumn(String::toString).setHeader(\"Components\");\n        componentTree.setItems(List.of(\"Root\"), item -> {\n            if (item.equals(\"Root\")) return List.of(\"Child Component2\", \"Selected component3\");\n            if (item.equals(\"Selected component5\")) return List.of(\"Child Component4\");\n            return List.of();\n        });\n\n        componentTree.addItemClickListener(event -> {\n            if (\"Selected component\".equals(event.getItem())) {\n                showProgramDetails(componentTreeLayout);\n            }\n        });\n\n        componentTreeLayout.add(componentTree);\n\n        // Git Repository Status\n        VerticalLayout gitStatusLayout = new VerticalLayout();\n        gitStatusLayout.add(new H3(\"Git Repository Status\"));\n\n        gitStatusLayout.add(new Div(new H3(\"Current Branch: main\"),\n            new Div(\"Uncommitted Changes: 5\"),\n            new Div(\"Staged Changes: 3\")));\n\n        HorizontalLayout gitButtons = new HorizontalLayout(\n                new Button(\"Commit\"), new Button(\"Push\")\n        );\n        gitStatusLayout.add(gitButtons);\n\n        TreeGrid<String> fileExplorer = new TreeGrid<>();\n        fileExplorer.addHierarchyColumn(String::toString).setHeader(\"File Explorer\");\n        fileExplorer.setItems(List.of(\"Documents\", \"Pictures\", \"Music\"), folder -> {\n            switch (folder) {\n                case \"Documents\": return List.of(\"Resume.pdf\", \"CoverLetter.docx\");\n                case \"Pictures\": return List.of(\"Vacation.jpg\", \"Birthday.png\");\n                case \"Music\": return List.of(\"Song.mp3\", \"Album.flac\");\n                default: return List.of();\n            }\n        });\n\n        gitStatusLayout.add(fileExplorer);\n\n        add(productTreeLayout, componentTreeLayout, gitStatusLayout);\n        expand(productTreeLayout, componentTreeLayout, gitStatusLayout);\n    }\n\n    private void showProgramDetails(VerticalLayout layout) {\n        Div details = new Div();\n        details.getStyle().set(\"border\", \"1px solid #ddd\").set(\"padding\", \"15px\").set(\"margin-top\", \"10px\");\n        details.add(new H3(\"CNC Program Details of the selected component\"));\n\n        HorizontalLayout programA = new HorizontalLayout();\n        programA.add(new Span(\"Program A\"), new Button(\"Execute\"), new Button(\"Setup Sheet\"));\n\n        HorizontalLayout programB = new HorizontalLayout();\n        programB.add(new Span(\"Program B\"), new Button(\"Execute\"), new Button(\"Setup Sheet\"));\n\n        details.add(programA, programB);\n\n        layout.add(details);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/validation/FusionBomConvert.java =====\npackage com.ua.crow.validation;\n\npublic interface FusionBomConvert {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/validation/annotations/IpAddressValidator.java =====\npackage com.ua.crow.validation.annotations;\n\nimport jakarta.validation.ConstraintValidator;\nimport jakarta.validation.ConstraintValidatorContext;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass IpAddressValidator implements ConstraintValidator<IpAddress, String> {\n\n  @Override\n  public boolean isValid(String value, ConstraintValidatorContext context) {\n    Pattern pattern =\n      Pattern.compile(\"^([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})$\");\n    Matcher matcher = pattern.matcher(value);\n    try {\n      if (!matcher.matches()) {\n        return false;\n      } else {\n        for (int i = 1; i <= 4; i++) {\n          int octet = Integer.valueOf(matcher.group(i));\n          if (octet > 255) {\n            return false;\n          }\n        }\n        return true;\n      }\n    } catch (Exception e) {\n      return false;\n    }\n  }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/validation/annotations/IpAddress.java =====\npackage com.ua.crow.validation.annotations;\n\nimport jakarta.validation.Constraint;\nimport jakarta.validation.Payload;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\n@Target({ FIELD })\n@Retention(RUNTIME)\n@Constraint(validatedBy = IpAddressValidator.class)\n@Documented\npublic @interface IpAddress {\n\n  String message() default \"{IpAddress.invalid}\";\n\n  Class<?>[] groups() default { };\n\n  Class<? extends Payload>[] payload() default { };\n\n}\n\n\n\n</context_primary>\n</context>"},{"type":"text","text":"learn provided code of the PLM system projectCreate prompt for codex based on provided code and this input\"Add entity \"software package\" to the project entityImplement git integration in GithubService and GitlabServiceImplement GitService interface in order to be able abstract particular git implementationImplement methods for commit, push, pull, create branches, showing historyCreate separate vaadin \"view\" for the \"software package\" and implement ui controls for working with git and pointed functionality above. Also describe an ability to navigate by source tree. Describe this components for codexIn the view of the product add an ability to list repositories, add existing repositoriesRepository can be created on the github and gitlab. Investigate api and point methods could be used and point it in the prompt for codexProvide an ability to attach separate component to the \"software package\" fileAlso user could have an ability to attach specific components or BOMs to the files in the repository with respect to branches.Investigate code in details and describe tasks in details with references to the provided code\""}]}]},"responses":[{"timestamp":1753807228714,"id":"2025-07-29T16:37:04.183897Z","object":"chat.completion","created":1753807228714,"model":"llama3:70b","choices":[{"index":0,"message":{"role":"assistant","content":"Here is a prompt for Codex based on the provided code and requirements:\n\n**Task 1: Add entity \"software package\" to the project entity**\n\n* Create a new Java class `SoftwarePackage` that extends the `Project` entity\n* Add necessary fields and annotations to the `SoftwarePackage` class, such as `id`, `name`, `description`, etc.\n* Update the `Project` class to include a list of `SoftwarePackage` entities\n\n**Task 2: Implement Git integration in GithubService and GitlabService**\n\n* Create interfaces `GithubService` and `GitlabService` that extend the `GitService` interface\n* Implement the `commit`, `push`, `pull`, `createBranch`, and `showHistory` methods in both services using the respective APIs (e.g. GitHub API, GitLab API)\n* Use dependency injection to inject the correct implementation of the `GitService` interface based on the chosen git provider\n\n**Task 3: Implement GitService interface**\n\n* Create a Java interface `GitService` that defines the common methods for working with Git repositories\n* Methods should include:\n\t+ `commit(String message)`: commit changes to the repository\n\t+ `push()`: push committed changes to the remote repository\n\t+ `pull()`: pull changes from the remote repository\n\t+ `createBranch(String branchName)`: create a new branch in the repository\n\t+ `showHistory()`: display the commit history of the repository\n\n**Task 4: Create separate Vaadin \"view\" for the \"software package\"**\n\n* Create a new Java class `SoftwarePackageView` that extends the `VerticalLayout` class\n* Add UI controls to the view for working with Git and implementing the functionality described above\n* Implement navigation by source tree using a TreeGrid component\n\n**Task 5: List repositories, add existing repositories, and create new repositories**\n\n* Create a Java class `RepositoryService` that provides methods for listing, adding, and creating repositories on GitHub and GitLab\n* Use the respective APIs (e.g. GitHub API, GitLab API) to implement these methods\n* Update the `SoftwarePackageView` to include UI controls for listing, adding, and creating repositories\n\n**Task 6: Attach separate component to the \"software package\" file**\n\n* Create a Java class `ComponentService` that provides methods for attaching components to files in the repository\n* Implement the ability to attach specific components or BOMs to files in the repository with respect to branches\n* Update the `SoftwarePackageView` to include UI controls for attaching components\n\n**References:**\n\n* Provided code:\n\t+ `CncRndInterfaceView.java`\n\t+ `GitlabService.java` (not provided, but assumed to exist)\n\t+ `GithubService.java` (not provided, but assumed to exist)\n* APIs:\n\t+ GitHub API (e.g. `https://api.github.com/`)\n\t+ GitLab API (e.g. `https://gitlab.com/api/v4/`)"}}],"usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}],"chat_model":{"model_key":"llama3:70b","platform_key":"ollama"}},"key":"Untitled Chat 2025-07-29 14-15-17-1753787717631","thread_key":"Untitled Chat 2025-07-29 14-15-17","stream":true,"context_key":"1753803341934","class_name":"SmartCompletion","user_message":"learn provided code of the PLM system projectCreate prompt for codex based on provided code and this input\"Add entity \"software package\" to the project entityImplement git integration in GithubService and GitlabServiceImplement GitService interface in order to be able abstract particular git implementationImplement methods for commit, push, pull, create branches, showing historyCreate separate vaadin \"view\" for the \"software package\" and implement ui controls for working with git and pointed functionality above. Also describe an ability to navigate by source tree. Describe this components for codexIn the view of the product add an ability to list repositories, add existing repositoriesRepository can be created on the github and gitlab. Investigate api and point methods could be used and point it in the prompt for codexProvide an ability to attach separate component to the \"software package\" fileAlso user could have an ability to attach specific components or BOMs to the files in the repository with respect to branches.Investigate code in details and describe tasks in details with references to the provided code\"","new_user_message":true},
"smart_completions:Untitled Chat 2025-07-29 14-15-17-1753808384562": {"completion":{"request":{"messages":[{"role":"user","content":[{"type":"text","text":"learn provided code of the PLM system projectCreate prompt for codex based on provided code and this input\"Add entity \"software package\" to the project entityImplement git integration in GithubService and GitlabServiceImplement GitService interface in order to be able abstract particular git implementationImplement methods for commit, push, pull, create branches, showing historyCreate separate vaadin \"view\" for the \"software package\" and implement ui controls for working with git and pointed functionality above. Also describe an ability to navigate by source tree. Describe this components for codexIn the view of the product add an ability to list repositories, add existing repositoriesRepository can be created on the github and gitlab. Investigate api and point methods could be used and point it in the prompt for codexProvide an ability to attach separate component to the \"software package\" fileAlso user could have an ability to attach specific components or BOMs to the files in the repository with respect to branches.Investigate code in details and describe tasks in details with references to the provided code\""},{"type":"text","text":"<context>\n<file_tree>\n└── all_java_combined.md\n</file_tree>\n<context_primary path=\"all_java_combined.md\" mtime=\"13 hours ago\">\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/dto/mappers/UnitsMapperImpl.java =====\npackage com.ua.crow.dto.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class UnitsMapperImpl extends UnitsMapper {\n\n    @Override\n    public UnitsDto toDto(Units units) {\n        if ( units == null ) {\n            return null;\n        }\n\n        UnitsDto unitsDto = new UnitsDto();\n\n        unitsDto.setId( units.getId() );\n        unitsDto.setDeleted( units.isDeleted() );\n        unitsDto.setName( units.getName() );\n        unitsDto.setUkrName( units.getUkrName() );\n        unitsDto.setType( units.getType() );\n        unitsDto.setShortName( units.getShortName() );\n\n        return unitsDto;\n    }\n\n    @Override\n    public Units toPojo(UnitsDto unitsDto) {\n        if ( unitsDto == null ) {\n            return null;\n        }\n\n        Units units = new Units();\n\n        units.setId( unitsDto.getId() );\n        units.setDeleted( unitsDto.isDeleted() );\n        units.setName( unitsDto.getName() );\n        units.setUkrName( unitsDto.getUkrName() );\n        units.setType( unitsDto.getType() );\n        units.setShortName( unitsDto.getShortName() );\n\n        return units;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ResourceGroupMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ResourceGroupMapperImpl extends ResourceGroupMapper {\n\n    @Override\n    public ResourceGroupDto toDto(ResourceGroup task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ResourceGroupDto resourceGroupDto = new ResourceGroupDto();\n\n        resourceGroupDto.setId( task.getId() );\n        resourceGroupDto.setTenantId( task.getTenantId() );\n        resourceGroupDto.setDeleted( task.isDeleted() );\n        resourceGroupDto.setName( task.getName() );\n        resourceGroupDto.setUkrName( task.getUkrName() );\n        resourceGroupDto.setCreator( task.getCreator() );\n        resourceGroupDto.setModifier( task.getModifier() );\n        resourceGroupDto.setCreatedAt( task.getCreatedAt() );\n        resourceGroupDto.setModifiedAt( task.getModifiedAt() );\n        resourceGroupDto.setWithdrawAlgorythm( task.getWithdrawAlgorythm() );\n        resourceGroupDto.setMinimalUnitToWithdraw( task.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = task.getResources();\n        if ( list != null ) {\n            resourceGroupDto.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n        resourceGroupDto.setParent( task.getParent() );\n\n        return resourceGroupDto;\n    }\n\n    @Override\n    public ResourceGroup toResourceGroup(ResourceGroupDto task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n\n        resourceGroup.setId( task.getId() );\n        resourceGroup.setTenantId( task.getTenantId() );\n        resourceGroup.setDeleted( task.isDeleted() );\n        resourceGroup.setName( task.getName() );\n        resourceGroup.setUkrName( task.getUkrName() );\n        resourceGroup.setCreator( task.getCreator() );\n        resourceGroup.setModifier( task.getModifier() );\n        resourceGroup.setCreatedAt( task.getCreatedAt() );\n        resourceGroup.setModifiedAt( task.getModifiedAt() );\n        resourceGroup.setParent( task.getParent() );\n        resourceGroup.setWithdrawAlgorythm( task.getWithdrawAlgorythm() );\n        resourceGroup.setMinimalUnitToWithdraw( task.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = task.getResources();\n        if ( list != null ) {\n            resourceGroup.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n\n        return resourceGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ShortFusionBomMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ShortFusionBomMapperImpl extends ShortFusionBomMapper {\n\n    @Override\n    public FusionComponentDto toShortDto(FusionComponent bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionComponentDto fusionComponentDto = new FusionComponentDto();\n\n        fusionComponentDto.setPartName( bom.getPartName() );\n        fusionComponentDto.setPartNumber( bom.getPartNumber() );\n        fusionComponentDto.setType( bom.getType() );\n\n        return fusionComponentDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/BomShortMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class BomShortMapperImpl extends BomShortMapper {\n\n    @Override\n    public BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveReleaseDto bomActiveReleaseDto = new BomActiveReleaseDto();\n\n        bomActiveReleaseDto.setId( bomActiveRelease.getId() );\n        bomActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveReleaseDto.setName( bomActiveRelease.getName() );\n        bomActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        bomActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        bomActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        bomActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveReleaseDto.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveReleaseDto.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveReleaseDto.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveReleaseDto.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveReleaseDto.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveReleaseDto.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveReleaseDto.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveReleaseDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ResourceItemMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ResourceItemMapperImpl extends ResourceItemMapper {\n\n    @Override\n    public ResourceItemDTO toDto(ResourceItem comment) {\n        if ( comment == null ) {\n            return null;\n        }\n\n        ResourceItemDTO resourceItemDTO = new ResourceItemDTO();\n\n        resourceItemDTO.setId( comment.getId() );\n        resourceItemDTO.setDeleted( comment.isDeleted() );\n        resourceItemDTO.setName( comment.getName() );\n        resourceItemDTO.setUkrName( comment.getUkrName() );\n        resourceItemDTO.setCreator( comment.getCreator() );\n        resourceItemDTO.setModifier( comment.getModifier() );\n        resourceItemDTO.setCreatedAt( comment.getCreatedAt() );\n        resourceItemDTO.setModifiedAt( comment.getModifiedAt() );\n        resourceItemDTO.setWithdrawAlgorythm( comment.getWithdrawAlgorythm() );\n        resourceItemDTO.setMinimalUnitToWithdraw( comment.getMinimalUnitToWithdraw() );\n        resourceItemDTO.setPrice( comment.getPrice() );\n        resourceItemDTO.setGroup( resourceGroupToResourceGroupDto( comment.getGroup() ) );\n\n        return resourceItemDTO;\n    }\n\n    @Override\n    public ResourceItem toPojo(ResourceItemDTO comment) {\n        if ( comment == null ) {\n            return null;\n        }\n\n        ResourceItem resourceItem = new ResourceItem();\n\n        resourceItem.setId( comment.getId() );\n        resourceItem.setDeleted( comment.isDeleted() );\n        resourceItem.setName( comment.getName() );\n        resourceItem.setUkrName( comment.getUkrName() );\n        resourceItem.setCreator( comment.getCreator() );\n        resourceItem.setModifier( comment.getModifier() );\n        resourceItem.setCreatedAt( comment.getCreatedAt() );\n        resourceItem.setModifiedAt( comment.getModifiedAt() );\n        resourceItem.setWithdrawAlgorythm( comment.getWithdrawAlgorythm() );\n        resourceItem.setMinimalUnitToWithdraw( comment.getMinimalUnitToWithdraw() );\n        resourceItem.setPrice( comment.getPrice() );\n        resourceItem.setGroup( resourceGroupDtoToResourceGroup( comment.getGroup() ) );\n\n        return resourceItem;\n    }\n\n    protected List<ResourceGroupDto> resourceGroupListToResourceGroupDtoList(List<ResourceGroup> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroupDto> list1 = new ArrayList<ResourceGroupDto>( list.size() );\n        for ( ResourceGroup resourceGroup : list ) {\n            list1.add( resourceGroupToResourceGroupDto( resourceGroup ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroupDto resourceGroupToResourceGroupDto(ResourceGroup resourceGroup) {\n        if ( resourceGroup == null ) {\n            return null;\n        }\n\n        ResourceGroupDto resourceGroupDto = new ResourceGroupDto();\n\n        resourceGroupDto.setId( resourceGroup.getId() );\n        resourceGroupDto.setTenantId( resourceGroup.getTenantId() );\n        resourceGroupDto.setDeleted( resourceGroup.isDeleted() );\n        resourceGroupDto.setName( resourceGroup.getName() );\n        resourceGroupDto.setUkrName( resourceGroup.getUkrName() );\n        resourceGroupDto.setCreator( resourceGroup.getCreator() );\n        resourceGroupDto.setModifier( resourceGroup.getModifier() );\n        resourceGroupDto.setCreatedAt( resourceGroup.getCreatedAt() );\n        resourceGroupDto.setModifiedAt( resourceGroup.getModifiedAt() );\n        resourceGroupDto.setWithdrawAlgorythm( resourceGroup.getWithdrawAlgorythm() );\n        resourceGroupDto.setMinimalUnitToWithdraw( resourceGroup.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = resourceGroup.getResources();\n        if ( list != null ) {\n            resourceGroupDto.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n        resourceGroupDto.setParent( resourceGroup.getParent() );\n        resourceGroupDto.setChildren( resourceGroupListToResourceGroupDtoList( resourceGroup.getChildren() ) );\n\n        return resourceGroupDto;\n    }\n\n    protected List<ResourceGroup> resourceGroupDtoListToResourceGroupList(List<ResourceGroupDto> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroup> list1 = new ArrayList<ResourceGroup>( list.size() );\n        for ( ResourceGroupDto resourceGroupDto : list ) {\n            list1.add( resourceGroupDtoToResourceGroup( resourceGroupDto ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroup resourceGroupDtoToResourceGroup(ResourceGroupDto resourceGroupDto) {\n        if ( resourceGroupDto == null ) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n\n        resourceGroup.setId( resourceGroupDto.getId() );\n        resourceGroup.setTenantId( resourceGroupDto.getTenantId() );\n        resourceGroup.setDeleted( resourceGroupDto.isDeleted() );\n        resourceGroup.setName( resourceGroupDto.getName() );\n        resourceGroup.setUkrName( resourceGroupDto.getUkrName() );\n        resourceGroup.setCreator( resourceGroupDto.getCreator() );\n        resourceGroup.setModifier( resourceGroupDto.getModifier() );\n        resourceGroup.setCreatedAt( resourceGroupDto.getCreatedAt() );\n        resourceGroup.setModifiedAt( resourceGroupDto.getModifiedAt() );\n        resourceGroup.setParent( resourceGroupDto.getParent() );\n        resourceGroup.setChildren( resourceGroupDtoListToResourceGroupList( resourceGroupDto.getChildren() ) );\n        resourceGroup.setWithdrawAlgorythm( resourceGroupDto.getWithdrawAlgorythm() );\n        resourceGroup.setMinimalUnitToWithdraw( resourceGroupDto.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list1 = resourceGroupDto.getResources();\n        if ( list1 != null ) {\n            resourceGroup.setResources( new ArrayList<ResourceItem>( list1 ) );\n        }\n\n        return resourceGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ProductMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ProductMapperImpl extends ProductMapper {\n\n    @Override\n    public ProductActiveReleaseDto toDto(ProductActiveRelease task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ProductActiveReleaseDto productActiveReleaseDto = new ProductActiveReleaseDto();\n\n        productActiveReleaseDto.setId( task.getId() );\n        productActiveReleaseDto.setDeleted( task.isDeleted() );\n        productActiveReleaseDto.setName( task.getName() );\n        productActiveReleaseDto.setUkrName( task.getUkrName() );\n        productActiveReleaseDto.setCreator( task.getCreator() );\n        productActiveReleaseDto.setModifier( task.getModifier() );\n        productActiveReleaseDto.setCreatedAt( task.getCreatedAt() );\n        productActiveReleaseDto.setModifiedAt( task.getModifiedAt() );\n\n        return productActiveReleaseDto;\n    }\n\n    @Override\n    public ProductActiveRelease toProduct(ProductActiveReleaseDto task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        ProductActiveRelease productActiveRelease = new ProductActiveRelease();\n\n        productActiveRelease.setId( task.getId() );\n        productActiveRelease.setDeleted( task.isDeleted() );\n        productActiveRelease.setName( task.getName() );\n        productActiveRelease.setUkrName( task.getUkrName() );\n        productActiveRelease.setCreator( task.getCreator() );\n        productActiveRelease.setModifier( task.getModifier() );\n        productActiveRelease.setCreatedAt( task.getCreatedAt() );\n        productActiveRelease.setModifiedAt( task.getModifiedAt() );\n\n        return productActiveRelease;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentPropertyTypeMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentPropertyTypeMapperImpl extends ComponentPropertyTypeMapper {\n\n    @Override\n    public BomItemPropertyTypeDto toDto(BomItemPropertyType bomItemPropertyType) {\n        if ( bomItemPropertyType == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeDto bomItemPropertyTypeDto = new BomItemPropertyTypeDto();\n\n        bomItemPropertyTypeDto.setId( bomItemPropertyType.getId() );\n        bomItemPropertyTypeDto.setDeleted( bomItemPropertyType.isDeleted() );\n        bomItemPropertyTypeDto.setName( bomItemPropertyType.getName() );\n        bomItemPropertyTypeDto.setUkrName( bomItemPropertyType.getUkrName() );\n        bomItemPropertyTypeDto.setCreator( bomItemPropertyType.getCreator() );\n        bomItemPropertyTypeDto.setModifier( bomItemPropertyType.getModifier() );\n        bomItemPropertyTypeDto.setCreatedAt( bomItemPropertyType.getCreatedAt() );\n        bomItemPropertyTypeDto.setModifiedAt( bomItemPropertyType.getModifiedAt() );\n        bomItemPropertyTypeDto.setUnits( unitsToUnitsDto( bomItemPropertyType.getUnits() ) );\n        bomItemPropertyTypeDto.setGroup( bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto( bomItemPropertyType.getGroup() ) );\n        bomItemPropertyTypeDto.setDataType( bomItemPropertyType.getDataType() );\n\n        return bomItemPropertyTypeDto;\n    }\n\n    @Override\n    public BomItemPropertyType toPojo(BomItemPropertyTypeDto bomItemPropertyTypeDto) {\n        if ( bomItemPropertyTypeDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyType bomItemPropertyType = new BomItemPropertyType();\n\n        bomItemPropertyType.setId( bomItemPropertyTypeDto.getId() );\n        bomItemPropertyType.setDeleted( bomItemPropertyTypeDto.isDeleted() );\n        bomItemPropertyType.setName( bomItemPropertyTypeDto.getName() );\n        bomItemPropertyType.setUkrName( bomItemPropertyTypeDto.getUkrName() );\n        bomItemPropertyType.setCreator( bomItemPropertyTypeDto.getCreator() );\n        bomItemPropertyType.setModifier( bomItemPropertyTypeDto.getModifier() );\n        bomItemPropertyType.setCreatedAt( bomItemPropertyTypeDto.getCreatedAt() );\n        bomItemPropertyType.setModifiedAt( bomItemPropertyTypeDto.getModifiedAt() );\n        bomItemPropertyType.setUnits( unitsDtoToUnits( bomItemPropertyTypeDto.getUnits() ) );\n        bomItemPropertyType.setGroup( bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup( bomItemPropertyTypeDto.getGroup() ) );\n        bomItemPropertyType.setDataType( bomItemPropertyTypeDto.getDataType() );\n\n        return bomItemPropertyType;\n    }\n\n    protected UnitsDto unitsToUnitsDto(Units units) {\n        if ( units == null ) {\n            return null;\n        }\n\n        UnitsDto unitsDto = new UnitsDto();\n\n        unitsDto.setId( units.getId() );\n        unitsDto.setDeleted( units.isDeleted() );\n        unitsDto.setName( units.getName() );\n        unitsDto.setUkrName( units.getUkrName() );\n        unitsDto.setType( units.getType() );\n        unitsDto.setShortName( units.getShortName() );\n\n        return unitsDto;\n    }\n\n    protected BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup) {\n        if ( bomItemPropertyTypeGroup == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto = new BomItemPropertyTypeGroupDto();\n\n        bomItemPropertyTypeGroupDto.setId( bomItemPropertyTypeGroup.getId() );\n        bomItemPropertyTypeGroupDto.setDeleted( bomItemPropertyTypeGroup.isDeleted() );\n        bomItemPropertyTypeGroupDto.setName( bomItemPropertyTypeGroup.getName() );\n        bomItemPropertyTypeGroupDto.setUkrName( bomItemPropertyTypeGroup.getUkrName() );\n        bomItemPropertyTypeGroupDto.setCreator( bomItemPropertyTypeGroup.getCreator() );\n        bomItemPropertyTypeGroupDto.setModifier( bomItemPropertyTypeGroup.getModifier() );\n        bomItemPropertyTypeGroupDto.setCreatedAt( bomItemPropertyTypeGroup.getCreatedAt() );\n        bomItemPropertyTypeGroupDto.setModifiedAt( bomItemPropertyTypeGroup.getModifiedAt() );\n\n        return bomItemPropertyTypeGroupDto;\n    }\n\n    protected Units unitsDtoToUnits(UnitsDto unitsDto) {\n        if ( unitsDto == null ) {\n            return null;\n        }\n\n        Units units = new Units();\n\n        units.setId( unitsDto.getId() );\n        units.setDeleted( unitsDto.isDeleted() );\n        units.setName( unitsDto.getName() );\n        units.setUkrName( unitsDto.getUkrName() );\n        units.setType( unitsDto.getType() );\n        units.setShortName( unitsDto.getShortName() );\n\n        return units;\n    }\n\n    protected BomItemPropertyTypeGroup bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup(BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto) {\n        if ( bomItemPropertyTypeGroupDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroup bomItemPropertyTypeGroup = new BomItemPropertyTypeGroup();\n\n        bomItemPropertyTypeGroup.setId( bomItemPropertyTypeGroupDto.getId() );\n        bomItemPropertyTypeGroup.setDeleted( bomItemPropertyTypeGroupDto.isDeleted() );\n        bomItemPropertyTypeGroup.setName( bomItemPropertyTypeGroupDto.getName() );\n        bomItemPropertyTypeGroup.setUkrName( bomItemPropertyTypeGroupDto.getUkrName() );\n        bomItemPropertyTypeGroup.setCreator( bomItemPropertyTypeGroupDto.getCreator() );\n        bomItemPropertyTypeGroup.setModifier( bomItemPropertyTypeGroupDto.getModifier() );\n        bomItemPropertyTypeGroup.setCreatedAt( bomItemPropertyTypeGroupDto.getCreatedAt() );\n        bomItemPropertyTypeGroup.setModifiedAt( bomItemPropertyTypeGroupDto.getModifiedAt() );\n\n        return bomItemPropertyTypeGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/FusionBomMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class FusionBomMapperImpl extends FusionBomMapper {\n\n    @Override\n    public FusionBomDto toDto(FusionBom bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionBomDto fusionBomDto = new FusionBomDto();\n\n        fusionBomDto.setFusionId( bom.getFusionId() );\n        fusionBomDto.setProduct( productActiveReleaseToProductActiveReleaseDto( bom.getProduct() ) );\n        fusionBomDto.setDocumentName( bom.getDocumentName() );\n        fusionBomDto.setVersion( bom.getVersion() );\n        fusionBomDto.setProcessed( bom.isProcessed() );\n        fusionBomDto.setEngineeringBomId( bom.getEngineeringBomId() );\n        fusionBomDto.setDescription( bom.getDescription() );\n        fusionBomDto.setLibraryItem( bom.isLibraryItem() );\n        fusionBomDto.setRevisionId( bom.getRevisionId() );\n        fusionBomDto.setPartNumber( bom.getPartNumber() );\n        fusionBomDto.setConfiguration( bom.isConfiguration() );\n        fusionBomDto.setConfiguredDesign( bom.isConfiguredDesign() );\n        fusionBomDto.setDeleted( bom.isDeleted() );\n        fusionBomDto.setCreator( bom.getCreator() );\n        fusionBomDto.setModifier( bom.getModifier() );\n        fusionBomDto.setCreatedAt( bom.getCreatedAt() );\n        fusionBomDto.setModifiedAt( bom.getModifiedAt() );\n        fusionBomDto.setName( bom.getName() );\n\n        return fusionBomDto;\n    }\n\n    @Override\n    public FusionBom toFusionBom(FusionBomDto bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionBom fusionBom = new FusionBom();\n\n        fusionBom.setFusionId( bom.getFusionId() );\n        fusionBom.setRevisionId( bom.getRevisionId() );\n        fusionBom.setProduct( productActiveReleaseDtoToProductActiveRelease( bom.getProduct() ) );\n        fusionBom.setPartNumber( bom.getPartNumber() );\n        fusionBom.setDescription( bom.getDescription() );\n        fusionBom.setProcessed( bom.isProcessed() );\n        fusionBom.setEngineeringBomId( bom.getEngineeringBomId() );\n        fusionBom.setDocumentName( bom.getDocumentName() );\n        fusionBom.setName( bom.getName() );\n        fusionBom.setVersion( bom.getVersion() );\n        fusionBom.setLibraryItem( bom.isLibraryItem() );\n        fusionBom.setConfiguration( bom.isConfiguration() );\n        fusionBom.setConfiguredDesign( bom.isConfiguredDesign() );\n        fusionBom.setDeleted( bom.isDeleted() );\n        fusionBom.setCreator( bom.getCreator() );\n        fusionBom.setModifier( bom.getModifier() );\n        fusionBom.setCreatedAt( bom.getCreatedAt() );\n        fusionBom.setModifiedAt( bom.getModifiedAt() );\n\n        return fusionBom;\n    }\n\n    protected Set<ComponentActiveReleaseDto> bomComponentRelSetToComponentActiveReleaseDtoSet(Set<BomComponentRel> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<ComponentActiveReleaseDto> set1 = new LinkedHashSet<ComponentActiveReleaseDto>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( BomComponentRel bomComponentRel : set ) {\n            set1.add( bomComponentRelToComponentActiveReleaseDto( bomComponentRel ) );\n        }\n\n        return set1;\n    }\n\n    protected EngineeringBomWoChildren bomActiveReleaseToEngineeringBomWoChildren(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        EngineeringBomWoChildren engineeringBomWoChildren = new EngineeringBomWoChildren();\n\n        engineeringBomWoChildren.setId( bomActiveRelease.getId() );\n        engineeringBomWoChildren.setDeleted( bomActiveRelease.isDeleted() );\n        engineeringBomWoChildren.setName( bomActiveRelease.getName() );\n        engineeringBomWoChildren.setUkrName( bomActiveRelease.getUkrName() );\n        engineeringBomWoChildren.setCreator( bomActiveRelease.getCreator() );\n        engineeringBomWoChildren.setModifier( bomActiveRelease.getModifier() );\n        engineeringBomWoChildren.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        engineeringBomWoChildren.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        engineeringBomWoChildren.setProduct( productActiveReleaseToProductActiveReleaseDto( bomActiveRelease.getProduct() ) );\n        engineeringBomWoChildren.setDescription( bomActiveRelease.getDescription() );\n        engineeringBomWoChildren.setPartNumber( bomActiveRelease.getPartNumber() );\n        engineeringBomWoChildren.setChildren( bomComponentRelSetToComponentActiveReleaseDtoSet( bomActiveRelease.getChildren() ) );\n        engineeringBomWoChildren.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        engineeringBomWoChildren.setFusionId( bomActiveRelease.getFusionId() );\n        engineeringBomWoChildren.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        engineeringBomWoChildren.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        engineeringBomWoChildren.setConfiguration( bomActiveRelease.isConfiguration() );\n        engineeringBomWoChildren.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        engineeringBomWoChildren.setConsistent( bomActiveRelease.isConsistent() );\n\n        return engineeringBomWoChildren;\n    }\n\n    protected ComponentActiveReleaseDto bomComponentRelToComponentActiveReleaseDto(BomComponentRel bomComponentRel) {\n        if ( bomComponentRel == null ) {\n            return null;\n        }\n\n        ComponentActiveReleaseDto componentActiveReleaseDto = new ComponentActiveReleaseDto();\n\n        componentActiveReleaseDto.setQuantity( bomComponentRel.getQuantity() );\n        componentActiveReleaseDto.setParentBom( bomActiveReleaseToEngineeringBomWoChildren( bomComponentRel.getParentBom() ) );\n\n        return componentActiveReleaseDto;\n    }\n\n    protected BomActiveReleaseDto bomActiveReleaseToBomActiveReleaseDto(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveReleaseDto bomActiveReleaseDto = new BomActiveReleaseDto();\n\n        bomActiveReleaseDto.setId( bomActiveRelease.getId() );\n        bomActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveReleaseDto.setName( bomActiveRelease.getName() );\n        bomActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        bomActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        bomActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveReleaseDto.setProduct( productActiveReleaseToProductActiveReleaseDto( bomActiveRelease.getProduct() ) );\n        bomActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        bomActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveReleaseDto.setChildren( bomComponentRelSetToComponentActiveReleaseDtoSet( bomActiveRelease.getChildren() ) );\n        bomActiveReleaseDto.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveReleaseDto.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveReleaseDto.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveReleaseDto.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveReleaseDto.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveReleaseDto.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveReleaseDto.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveReleaseDto;\n    }\n\n    protected Set<BomActiveReleaseDto> bomActiveReleaseSetToBomActiveReleaseDtoSet(Set<BomActiveRelease> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<BomActiveReleaseDto> set1 = new LinkedHashSet<BomActiveReleaseDto>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( BomActiveRelease bomActiveRelease : set ) {\n            set1.add( bomActiveReleaseToBomActiveReleaseDto( bomActiveRelease ) );\n        }\n\n        return set1;\n    }\n\n    protected ProductActiveReleaseDto productActiveReleaseToProductActiveReleaseDto(ProductActiveRelease productActiveRelease) {\n        if ( productActiveRelease == null ) {\n            return null;\n        }\n\n        ProductActiveReleaseDto productActiveReleaseDto = new ProductActiveReleaseDto();\n\n        productActiveReleaseDto.setId( productActiveRelease.getId() );\n        productActiveReleaseDto.setDeleted( productActiveRelease.isDeleted() );\n        productActiveReleaseDto.setName( productActiveRelease.getName() );\n        productActiveReleaseDto.setUkrName( productActiveRelease.getUkrName() );\n        productActiveReleaseDto.setCreator( productActiveRelease.getCreator() );\n        productActiveReleaseDto.setModifier( productActiveRelease.getModifier() );\n        productActiveReleaseDto.setCreatedAt( productActiveRelease.getCreatedAt() );\n        productActiveReleaseDto.setModifiedAt( productActiveRelease.getModifiedAt() );\n        productActiveReleaseDto.setEngineeringBoms( bomActiveReleaseSetToBomActiveReleaseDtoSet( productActiveRelease.getEngineeringBoms() ) );\n\n        return productActiveReleaseDto;\n    }\n\n    protected Set<BomComponentRel> componentActiveReleaseDtoSetToBomComponentRelSet(Set<ComponentActiveReleaseDto> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<BomComponentRel> set1 = new LinkedHashSet<BomComponentRel>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( ComponentActiveReleaseDto componentActiveReleaseDto : set ) {\n            set1.add( componentActiveReleaseDtoToBomComponentRel( componentActiveReleaseDto ) );\n        }\n\n        return set1;\n    }\n\n    protected BomActiveRelease engineeringBomWoChildrenToBomActiveRelease(EngineeringBomWoChildren engineeringBomWoChildren) {\n        if ( engineeringBomWoChildren == null ) {\n            return null;\n        }\n\n        BomActiveRelease bomActiveRelease = new BomActiveRelease();\n\n        bomActiveRelease.setId( engineeringBomWoChildren.getId() );\n        bomActiveRelease.setDeleted( engineeringBomWoChildren.isDeleted() );\n        bomActiveRelease.setName( engineeringBomWoChildren.getName() );\n        bomActiveRelease.setUkrName( engineeringBomWoChildren.getUkrName() );\n        bomActiveRelease.setCreator( engineeringBomWoChildren.getCreator() );\n        bomActiveRelease.setModifier( engineeringBomWoChildren.getModifier() );\n        bomActiveRelease.setCreatedAt( engineeringBomWoChildren.getCreatedAt() );\n        bomActiveRelease.setModifiedAt( engineeringBomWoChildren.getModifiedAt() );\n        bomActiveRelease.setProduct( productActiveReleaseDtoToProductActiveRelease( engineeringBomWoChildren.getProduct() ) );\n        bomActiveRelease.setDescription( engineeringBomWoChildren.getDescription() );\n        bomActiveRelease.setPartNumber( engineeringBomWoChildren.getPartNumber() );\n        bomActiveRelease.setFusionVersion( engineeringBomWoChildren.getFusionVersion() );\n        bomActiveRelease.setFusionId( engineeringBomWoChildren.getFusionId() );\n        bomActiveRelease.setLibraryItem( engineeringBomWoChildren.isLibraryItem() );\n        bomActiveRelease.setFusionRevisionId( engineeringBomWoChildren.getFusionRevisionId() );\n        bomActiveRelease.setConfiguration( engineeringBomWoChildren.isConfiguration() );\n        bomActiveRelease.setConfiguredDesign( engineeringBomWoChildren.isConfiguredDesign() );\n        bomActiveRelease.setConsistent( engineeringBomWoChildren.isConsistent() );\n        bomActiveRelease.setChildren( componentActiveReleaseDtoSetToBomComponentRelSet( engineeringBomWoChildren.getChildren() ) );\n\n        return bomActiveRelease;\n    }\n\n    protected BomComponentRel componentActiveReleaseDtoToBomComponentRel(ComponentActiveReleaseDto componentActiveReleaseDto) {\n        if ( componentActiveReleaseDto == null ) {\n            return null;\n        }\n\n        BomComponentRel bomComponentRel = new BomComponentRel();\n\n        bomComponentRel.setQuantity( componentActiveReleaseDto.getQuantity() );\n        bomComponentRel.setParentBom( engineeringBomWoChildrenToBomActiveRelease( componentActiveReleaseDto.getParentBom() ) );\n\n        return bomComponentRel;\n    }\n\n    protected BomActiveRelease bomActiveReleaseDtoToBomActiveRelease(BomActiveReleaseDto bomActiveReleaseDto) {\n        if ( bomActiveReleaseDto == null ) {\n            return null;\n        }\n\n        BomActiveRelease bomActiveRelease = new BomActiveRelease();\n\n        bomActiveRelease.setId( bomActiveReleaseDto.getId() );\n        bomActiveRelease.setDeleted( bomActiveReleaseDto.isDeleted() );\n        bomActiveRelease.setName( bomActiveReleaseDto.getName() );\n        bomActiveRelease.setUkrName( bomActiveReleaseDto.getUkrName() );\n        bomActiveRelease.setCreator( bomActiveReleaseDto.getCreator() );\n        bomActiveRelease.setModifier( bomActiveReleaseDto.getModifier() );\n        bomActiveRelease.setCreatedAt( bomActiveReleaseDto.getCreatedAt() );\n        bomActiveRelease.setModifiedAt( bomActiveReleaseDto.getModifiedAt() );\n        bomActiveRelease.setProduct( productActiveReleaseDtoToProductActiveRelease( bomActiveReleaseDto.getProduct() ) );\n        bomActiveRelease.setDescription( bomActiveReleaseDto.getDescription() );\n        bomActiveRelease.setPartNumber( bomActiveReleaseDto.getPartNumber() );\n        bomActiveRelease.setFusionVersion( bomActiveReleaseDto.getFusionVersion() );\n        bomActiveRelease.setFusionId( bomActiveReleaseDto.getFusionId() );\n        bomActiveRelease.setLibraryItem( bomActiveReleaseDto.isLibraryItem() );\n        bomActiveRelease.setFusionRevisionId( bomActiveReleaseDto.getFusionRevisionId() );\n        bomActiveRelease.setConfiguration( bomActiveReleaseDto.isConfiguration() );\n        bomActiveRelease.setConfiguredDesign( bomActiveReleaseDto.isConfiguredDesign() );\n        bomActiveRelease.setConsistent( bomActiveReleaseDto.isConsistent() );\n        bomActiveRelease.setChildren( componentActiveReleaseDtoSetToBomComponentRelSet( bomActiveReleaseDto.getChildren() ) );\n\n        return bomActiveRelease;\n    }\n\n    protected Set<BomActiveRelease> bomActiveReleaseDtoSetToBomActiveReleaseSet(Set<BomActiveReleaseDto> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<BomActiveRelease> set1 = new LinkedHashSet<BomActiveRelease>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( BomActiveReleaseDto bomActiveReleaseDto : set ) {\n            set1.add( bomActiveReleaseDtoToBomActiveRelease( bomActiveReleaseDto ) );\n        }\n\n        return set1;\n    }\n\n    protected ProductActiveRelease productActiveReleaseDtoToProductActiveRelease(ProductActiveReleaseDto productActiveReleaseDto) {\n        if ( productActiveReleaseDto == null ) {\n            return null;\n        }\n\n        ProductActiveRelease productActiveRelease = new ProductActiveRelease();\n\n        productActiveRelease.setId( productActiveReleaseDto.getId() );\n        productActiveRelease.setDeleted( productActiveReleaseDto.isDeleted() );\n        productActiveRelease.setName( productActiveReleaseDto.getName() );\n        productActiveRelease.setUkrName( productActiveReleaseDto.getUkrName() );\n        productActiveRelease.setCreator( productActiveReleaseDto.getCreator() );\n        productActiveRelease.setModifier( productActiveReleaseDto.getModifier() );\n        productActiveRelease.setCreatedAt( productActiveReleaseDto.getCreatedAt() );\n        productActiveRelease.setModifiedAt( productActiveReleaseDto.getModifiedAt() );\n        productActiveRelease.setEngineeringBoms( bomActiveReleaseDtoSetToBomActiveReleaseSet( productActiveReleaseDto.getEngineeringBoms() ) );\n\n        return productActiveRelease;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/FusionBomItemMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class FusionBomItemMapperImpl extends FusionBomItemMapper {\n\n    @Override\n    public FusionComponentDto toDto(FusionComponent bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionComponentDto fusionComponentDto = new FusionComponentDto();\n\n        fusionComponentDto.setFusionId( bom.getFusionId() );\n        fusionComponentDto.setRevisionId( bom.getRevisionId() );\n        fusionComponentDto.setType( bom.getType() );\n        fusionComponentDto.setPartName( bom.getPartName() );\n        fusionComponentDto.setPartNumber( bom.getPartNumber() );\n        fusionComponentDto.setDescription( bom.getDescription() );\n        fusionComponentDto.setSourceFile( bom.getSourceFile() );\n        fusionComponentDto.setPath( bom.getPath() );\n        fusionComponentDto.setRoot( bom.isRoot() );\n\n        return fusionComponentDto;\n    }\n\n    @Override\n    public FusionComponent toFusionBom(FusionComponentDto bom) {\n        if ( bom == null ) {\n            return null;\n        }\n\n        FusionComponent fusionComponent = new FusionComponent();\n\n        fusionComponent.setFusionId( bom.getFusionId() );\n        fusionComponent.setRevisionId( bom.getRevisionId() );\n        fusionComponent.setType( bom.getType() );\n        fusionComponent.setPartName( bom.getPartName() );\n        fusionComponent.setPartNumber( bom.getPartNumber() );\n        fusionComponent.setDescription( bom.getDescription() );\n        fusionComponent.setSourceFile( bom.getSourceFile() );\n        fusionComponent.setPath( bom.getPath() );\n        fusionComponent.setRoot( bom.isRoot() );\n\n        return fusionComponent;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/MaterialMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.Material;\nimport com.ua.crow.plm.dto.fusion.MaterialDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class MaterialMapperImpl extends MaterialMapper {\n\n    @Override\n    MaterialDto toDto(Material material) {\n        if ( material == null ) {\n            return null;\n        }\n\n        MaterialDto materialDto = new MaterialDto();\n\n        materialDto.setId( material.getId() );\n        materialDto.setDeleted( material.isDeleted() );\n        materialDto.setName( material.getName() );\n        materialDto.setUkrName( material.getUkrName() );\n\n        return materialDto;\n    }\n\n    @Override\n    Material toPojo(MaterialDto material) {\n        if ( material == null ) {\n            return null;\n        }\n\n        Material material1 = new Material();\n\n        material1.setId( material.getId() );\n        material1.setDeleted( material.isDeleted() );\n        material1.setName( material.getName() );\n        material1.setUkrName( material.getUkrName() );\n\n        return material1;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ItemTypeNameMappingMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ItemTypeNameMappingMapperImpl extends ItemTypeNameMappingMapper {\n\n    @Override\n    public ItemTypeNameMappingDto toDto(ItemTypeNameMapping mapping) {\n        if ( mapping == null ) {\n            return null;\n        }\n\n        ItemTypeNameMappingDto itemTypeNameMappingDto = new ItemTypeNameMappingDto();\n\n        itemTypeNameMappingDto.setId( mapping.getId() );\n        itemTypeNameMappingDto.setDeleted( mapping.isDeleted() );\n        itemTypeNameMappingDto.setType( mapping.getType() );\n        itemTypeNameMappingDto.setName( mapping.getName() );\n\n        return itemTypeNameMappingDto;\n    }\n\n    @Override\n    public ItemTypeNameMapping toEntity(ItemTypeNameMappingDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ItemTypeNameMapping itemTypeNameMapping = new ItemTypeNameMapping();\n\n        itemTypeNameMapping.setId( dto.getId() );\n        itemTypeNameMapping.setDeleted( dto.isDeleted() );\n        itemTypeNameMapping.setType( dto.getType() );\n        itemTypeNameMapping.setName( dto.getName() );\n\n        return itemTypeNameMapping;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/PropertyTypeGroupMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class PropertyTypeGroupMapperImpl extends PropertyTypeGroupMapper {\n\n    @Override\n    public BomItemPropertyTypeGroupDto toDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup) {\n        if ( bomItemPropertyTypeGroup == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto = new BomItemPropertyTypeGroupDto();\n\n        bomItemPropertyTypeGroupDto.setId( bomItemPropertyTypeGroup.getId() );\n        bomItemPropertyTypeGroupDto.setDeleted( bomItemPropertyTypeGroup.isDeleted() );\n        bomItemPropertyTypeGroupDto.setName( bomItemPropertyTypeGroup.getName() );\n        bomItemPropertyTypeGroupDto.setUkrName( bomItemPropertyTypeGroup.getUkrName() );\n        bomItemPropertyTypeGroupDto.setCreator( bomItemPropertyTypeGroup.getCreator() );\n        bomItemPropertyTypeGroupDto.setModifier( bomItemPropertyTypeGroup.getModifier() );\n        bomItemPropertyTypeGroupDto.setCreatedAt( bomItemPropertyTypeGroup.getCreatedAt() );\n        bomItemPropertyTypeGroupDto.setModifiedAt( bomItemPropertyTypeGroup.getModifiedAt() );\n\n        return bomItemPropertyTypeGroupDto;\n    }\n\n    @Override\n    public BomItemPropertyTypeGroup toPojo(BomItemPropertyTypeGroupDto bomItemPropertyTypeDto) {\n        if ( bomItemPropertyTypeDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroup bomItemPropertyTypeGroup = new BomItemPropertyTypeGroup();\n\n        bomItemPropertyTypeGroup.setId( bomItemPropertyTypeDto.getId() );\n        bomItemPropertyTypeGroup.setDeleted( bomItemPropertyTypeDto.isDeleted() );\n        bomItemPropertyTypeGroup.setName( bomItemPropertyTypeDto.getName() );\n        bomItemPropertyTypeGroup.setUkrName( bomItemPropertyTypeDto.getUkrName() );\n        bomItemPropertyTypeGroup.setCreator( bomItemPropertyTypeDto.getCreator() );\n        bomItemPropertyTypeGroup.setModifier( bomItemPropertyTypeDto.getModifier() );\n        bomItemPropertyTypeGroup.setCreatedAt( bomItemPropertyTypeDto.getCreatedAt() );\n        bomItemPropertyTypeGroup.setModifiedAt( bomItemPropertyTypeDto.getModifiedAt() );\n\n        return bomItemPropertyTypeGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentGroupMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentGroupMapperImpl extends ComponentGroupMapper {\n\n    @Override\n    public ComponentGroupDto toDto(ComponentGroup group) {\n        if ( group == null ) {\n            return null;\n        }\n\n        ComponentGroupDto componentGroupDto = new ComponentGroupDto();\n\n        componentGroupDto.setId( group.getId() );\n        componentGroupDto.setDeleted( group.isDeleted() );\n        componentGroupDto.setName( group.getName() );\n        componentGroupDto.setUkrName( group.getUkrName() );\n        componentGroupDto.setCreator( group.getCreator() );\n        componentGroupDto.setModifier( group.getModifier() );\n        componentGroupDto.setCreatedAt( group.getCreatedAt() );\n        componentGroupDto.setModifiedAt( group.getModifiedAt() );\n        componentGroupDto.setParent( toDto( group.getParent() ) );\n\n        return componentGroupDto;\n    }\n\n    @Override\n    public ComponentGroup toEntity(ComponentGroupDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ComponentGroup componentGroup = new ComponentGroup();\n\n        componentGroup.setId( dto.getId() );\n        componentGroup.setDeleted( dto.isDeleted() );\n        componentGroup.setName( dto.getName() );\n        componentGroup.setUkrName( dto.getUkrName() );\n        componentGroup.setCreator( dto.getCreator() );\n        componentGroup.setModifier( dto.getModifier() );\n        componentGroup.setCreatedAt( dto.getCreatedAt() );\n        componentGroup.setModifiedAt( dto.getModifiedAt() );\n        componentGroup.setParent( toEntity( dto.getParent() ) );\n\n        return componentGroup;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentPropertyMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentPropertyMapperImpl extends ComponentPropertyMapper {\n\n    @Override\n    public CompPropertiesActiveReleaseDto toDto(ComponentProperty bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        CompPropertiesActiveReleaseDto compPropertiesActiveReleaseDto = new CompPropertiesActiveReleaseDto();\n\n        compPropertiesActiveReleaseDto.setId( bomActiveRelease.getId() );\n        compPropertiesActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        compPropertiesActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        compPropertiesActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        compPropertiesActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        compPropertiesActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        compPropertiesActiveReleaseDto.setStringValue( bomActiveRelease.getStringValue() );\n        compPropertiesActiveReleaseDto.setNumericValue( bomActiveRelease.getNumericValue() );\n        compPropertiesActiveReleaseDto.setPropertyType( bomItemPropertyTypeToBomItemPropertyTypeDto( bomActiveRelease.getPropertyType() ) );\n\n        return compPropertiesActiveReleaseDto;\n    }\n\n    @Override\n    public ComponentProperty toPojo(CompPropertiesActiveReleaseDto bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ComponentProperty componentProperty = new ComponentProperty();\n\n        componentProperty.setId( bomActiveRelease.getId() );\n        componentProperty.setDeleted( bomActiveRelease.isDeleted() );\n        componentProperty.setCreator( bomActiveRelease.getCreator() );\n        componentProperty.setModifier( bomActiveRelease.getModifier() );\n        componentProperty.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        componentProperty.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        componentProperty.setStringValue( bomActiveRelease.getStringValue() );\n        componentProperty.setNumericValue( bomActiveRelease.getNumericValue() );\n        componentProperty.setPropertyType( bomItemPropertyTypeDtoToBomItemPropertyType( bomActiveRelease.getPropertyType() ) );\n\n        return componentProperty;\n    }\n\n    protected UnitsDto unitsToUnitsDto(Units units) {\n        if ( units == null ) {\n            return null;\n        }\n\n        UnitsDto unitsDto = new UnitsDto();\n\n        unitsDto.setId( units.getId() );\n        unitsDto.setDeleted( units.isDeleted() );\n        unitsDto.setName( units.getName() );\n        unitsDto.setUkrName( units.getUkrName() );\n        unitsDto.setType( units.getType() );\n        unitsDto.setShortName( units.getShortName() );\n\n        return unitsDto;\n    }\n\n    protected BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup) {\n        if ( bomItemPropertyTypeGroup == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto = new BomItemPropertyTypeGroupDto();\n\n        bomItemPropertyTypeGroupDto.setId( bomItemPropertyTypeGroup.getId() );\n        bomItemPropertyTypeGroupDto.setDeleted( bomItemPropertyTypeGroup.isDeleted() );\n        bomItemPropertyTypeGroupDto.setName( bomItemPropertyTypeGroup.getName() );\n        bomItemPropertyTypeGroupDto.setUkrName( bomItemPropertyTypeGroup.getUkrName() );\n        bomItemPropertyTypeGroupDto.setCreator( bomItemPropertyTypeGroup.getCreator() );\n        bomItemPropertyTypeGroupDto.setModifier( bomItemPropertyTypeGroup.getModifier() );\n        bomItemPropertyTypeGroupDto.setCreatedAt( bomItemPropertyTypeGroup.getCreatedAt() );\n        bomItemPropertyTypeGroupDto.setModifiedAt( bomItemPropertyTypeGroup.getModifiedAt() );\n\n        return bomItemPropertyTypeGroupDto;\n    }\n\n    protected BomItemPropertyTypeDto bomItemPropertyTypeToBomItemPropertyTypeDto(BomItemPropertyType bomItemPropertyType) {\n        if ( bomItemPropertyType == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeDto bomItemPropertyTypeDto = new BomItemPropertyTypeDto();\n\n        bomItemPropertyTypeDto.setId( bomItemPropertyType.getId() );\n        bomItemPropertyTypeDto.setDeleted( bomItemPropertyType.isDeleted() );\n        bomItemPropertyTypeDto.setName( bomItemPropertyType.getName() );\n        bomItemPropertyTypeDto.setUkrName( bomItemPropertyType.getUkrName() );\n        bomItemPropertyTypeDto.setCreator( bomItemPropertyType.getCreator() );\n        bomItemPropertyTypeDto.setModifier( bomItemPropertyType.getModifier() );\n        bomItemPropertyTypeDto.setCreatedAt( bomItemPropertyType.getCreatedAt() );\n        bomItemPropertyTypeDto.setModifiedAt( bomItemPropertyType.getModifiedAt() );\n        bomItemPropertyTypeDto.setUnits( unitsToUnitsDto( bomItemPropertyType.getUnits() ) );\n        bomItemPropertyTypeDto.setGroup( bomItemPropertyTypeGroupToBomItemPropertyTypeGroupDto( bomItemPropertyType.getGroup() ) );\n        bomItemPropertyTypeDto.setDataType( bomItemPropertyType.getDataType() );\n\n        return bomItemPropertyTypeDto;\n    }\n\n    protected Units unitsDtoToUnits(UnitsDto unitsDto) {\n        if ( unitsDto == null ) {\n            return null;\n        }\n\n        Units units = new Units();\n\n        units.setId( unitsDto.getId() );\n        units.setDeleted( unitsDto.isDeleted() );\n        units.setName( unitsDto.getName() );\n        units.setUkrName( unitsDto.getUkrName() );\n        units.setType( unitsDto.getType() );\n        units.setShortName( unitsDto.getShortName() );\n\n        return units;\n    }\n\n    protected BomItemPropertyTypeGroup bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup(BomItemPropertyTypeGroupDto bomItemPropertyTypeGroupDto) {\n        if ( bomItemPropertyTypeGroupDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyTypeGroup bomItemPropertyTypeGroup = new BomItemPropertyTypeGroup();\n\n        bomItemPropertyTypeGroup.setId( bomItemPropertyTypeGroupDto.getId() );\n        bomItemPropertyTypeGroup.setDeleted( bomItemPropertyTypeGroupDto.isDeleted() );\n        bomItemPropertyTypeGroup.setName( bomItemPropertyTypeGroupDto.getName() );\n        bomItemPropertyTypeGroup.setUkrName( bomItemPropertyTypeGroupDto.getUkrName() );\n        bomItemPropertyTypeGroup.setCreator( bomItemPropertyTypeGroupDto.getCreator() );\n        bomItemPropertyTypeGroup.setModifier( bomItemPropertyTypeGroupDto.getModifier() );\n        bomItemPropertyTypeGroup.setCreatedAt( bomItemPropertyTypeGroupDto.getCreatedAt() );\n        bomItemPropertyTypeGroup.setModifiedAt( bomItemPropertyTypeGroupDto.getModifiedAt() );\n\n        return bomItemPropertyTypeGroup;\n    }\n\n    protected BomItemPropertyType bomItemPropertyTypeDtoToBomItemPropertyType(BomItemPropertyTypeDto bomItemPropertyTypeDto) {\n        if ( bomItemPropertyTypeDto == null ) {\n            return null;\n        }\n\n        BomItemPropertyType bomItemPropertyType = new BomItemPropertyType();\n\n        bomItemPropertyType.setId( bomItemPropertyTypeDto.getId() );\n        bomItemPropertyType.setDeleted( bomItemPropertyTypeDto.isDeleted() );\n        bomItemPropertyType.setName( bomItemPropertyTypeDto.getName() );\n        bomItemPropertyType.setUkrName( bomItemPropertyTypeDto.getUkrName() );\n        bomItemPropertyType.setCreator( bomItemPropertyTypeDto.getCreator() );\n        bomItemPropertyType.setModifier( bomItemPropertyTypeDto.getModifier() );\n        bomItemPropertyType.setCreatedAt( bomItemPropertyTypeDto.getCreatedAt() );\n        bomItemPropertyType.setModifiedAt( bomItemPropertyTypeDto.getModifiedAt() );\n        bomItemPropertyType.setUnits( unitsDtoToUnits( bomItemPropertyTypeDto.getUnits() ) );\n        bomItemPropertyType.setGroup( bomItemPropertyTypeGroupDtoToBomItemPropertyTypeGroup( bomItemPropertyTypeDto.getGroup() ) );\n        bomItemPropertyType.setDataType( bomItemPropertyTypeDto.getDataType() );\n\n        return bomItemPropertyType;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ReleaseVersionMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.dto.released.ReleaseVersionDTO;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ReleaseVersionMapperImpl extends ReleaseVersionMapper {\n\n    @Override\n    public ReleaseVersionDTO toDto(ReleaseVersion bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ReleaseVersionDTO releaseVersionDTO = new ReleaseVersionDTO();\n\n        releaseVersionDTO.setId( bomActiveRelease.getId() );\n        releaseVersionDTO.setDeleted( bomActiveRelease.isDeleted() );\n        releaseVersionDTO.setName( bomActiveRelease.getName() );\n        releaseVersionDTO.setUkrName( bomActiveRelease.getUkrName() );\n        releaseVersionDTO.setCreator( bomActiveRelease.getCreator() );\n        releaseVersionDTO.setModifier( bomActiveRelease.getModifier() );\n        releaseVersionDTO.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        releaseVersionDTO.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        releaseVersionDTO.setReleased( bomActiveRelease.isReleased() );\n        releaseVersionDTO.setReleaseDate( bomActiveRelease.getReleaseDate() );\n        releaseVersionDTO.setVer( bomActiveRelease.getVer() );\n        releaseVersionDTO.setDescription( bomActiveRelease.getDescription() );\n\n        return releaseVersionDTO;\n    }\n\n    @Override\n    public ReleaseVersion toPojo(ReleaseVersionDTO bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ReleaseVersion releaseVersion = new ReleaseVersion();\n\n        releaseVersion.setId( bomActiveRelease.getId() );\n        releaseVersion.setDeleted( bomActiveRelease.isDeleted() );\n        releaseVersion.setName( bomActiveRelease.getName() );\n        releaseVersion.setUkrName( bomActiveRelease.getUkrName() );\n        releaseVersion.setCreator( bomActiveRelease.getCreator() );\n        releaseVersion.setModifier( bomActiveRelease.getModifier() );\n        releaseVersion.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        releaseVersion.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        releaseVersion.setReleased( bomActiveRelease.isReleased() );\n        releaseVersion.setReleaseDate( bomActiveRelease.getReleaseDate() );\n        releaseVersion.setDescription( bomActiveRelease.getDescription() );\n        releaseVersion.setVer( bomActiveRelease.getVer() );\n\n        return releaseVersion;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/ComponentMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class ComponentMapperImpl extends ComponentMapper {\n\n    @Override\n    public ComponentActiveReleaseDto toDto(ComponentActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ComponentActiveReleaseDto componentActiveReleaseDto = new ComponentActiveReleaseDto();\n\n        componentActiveReleaseDto.setId( bomActiveRelease.getId() );\n        componentActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        componentActiveReleaseDto.setName( bomActiveRelease.getName() );\n        componentActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        componentActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        componentActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        componentActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        componentActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        if ( bomActiveRelease.getItemType() != null ) {\n            componentActiveReleaseDto.setItemType( bomActiveRelease.getItemType().name() );\n        }\n        componentActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        componentActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        componentActiveReleaseDto.setResourceItem( resourceItemToResourceItemDTO( bomActiveRelease.getResourceItem() ) );\n\n        return componentActiveReleaseDto;\n    }\n\n    @Override\n    public ComponentActiveRelease toPojo(ComponentActiveReleaseDto bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        ComponentActiveRelease componentActiveRelease = new ComponentActiveRelease();\n\n        componentActiveRelease.setId( bomActiveRelease.getId() );\n        componentActiveRelease.setDeleted( bomActiveRelease.isDeleted() );\n        componentActiveRelease.setName( bomActiveRelease.getName() );\n        componentActiveRelease.setUkrName( bomActiveRelease.getUkrName() );\n        componentActiveRelease.setCreator( bomActiveRelease.getCreator() );\n        componentActiveRelease.setModifier( bomActiveRelease.getModifier() );\n        componentActiveRelease.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        componentActiveRelease.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        if ( bomActiveRelease.getItemType() != null ) {\n            componentActiveRelease.setItemType( Enum.valueOf( ItemTypes.class, bomActiveRelease.getItemType() ) );\n        }\n        componentActiveRelease.setDescription( bomActiveRelease.getDescription() );\n        componentActiveRelease.setPartNumber( bomActiveRelease.getPartNumber() );\n        componentActiveRelease.setResourceItem( resourceItemDTOToResourceItem( bomActiveRelease.getResourceItem() ) );\n\n        return componentActiveRelease;\n    }\n\n    protected List<ResourceGroupDto> resourceGroupListToResourceGroupDtoList(List<ResourceGroup> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroupDto> list1 = new ArrayList<ResourceGroupDto>( list.size() );\n        for ( ResourceGroup resourceGroup : list ) {\n            list1.add( resourceGroupToResourceGroupDto( resourceGroup ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroupDto resourceGroupToResourceGroupDto(ResourceGroup resourceGroup) {\n        if ( resourceGroup == null ) {\n            return null;\n        }\n\n        ResourceGroupDto resourceGroupDto = new ResourceGroupDto();\n\n        resourceGroupDto.setId( resourceGroup.getId() );\n        resourceGroupDto.setTenantId( resourceGroup.getTenantId() );\n        resourceGroupDto.setDeleted( resourceGroup.isDeleted() );\n        resourceGroupDto.setName( resourceGroup.getName() );\n        resourceGroupDto.setUkrName( resourceGroup.getUkrName() );\n        resourceGroupDto.setCreator( resourceGroup.getCreator() );\n        resourceGroupDto.setModifier( resourceGroup.getModifier() );\n        resourceGroupDto.setCreatedAt( resourceGroup.getCreatedAt() );\n        resourceGroupDto.setModifiedAt( resourceGroup.getModifiedAt() );\n        resourceGroupDto.setWithdrawAlgorythm( resourceGroup.getWithdrawAlgorythm() );\n        resourceGroupDto.setMinimalUnitToWithdraw( resourceGroup.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list = resourceGroup.getResources();\n        if ( list != null ) {\n            resourceGroupDto.setResources( new ArrayList<ResourceItem>( list ) );\n        }\n        resourceGroupDto.setParent( resourceGroup.getParent() );\n        resourceGroupDto.setChildren( resourceGroupListToResourceGroupDtoList( resourceGroup.getChildren() ) );\n\n        return resourceGroupDto;\n    }\n\n    protected ResourceItemDTO resourceItemToResourceItemDTO(ResourceItem resourceItem) {\n        if ( resourceItem == null ) {\n            return null;\n        }\n\n        ResourceItemDTO resourceItemDTO = new ResourceItemDTO();\n\n        resourceItemDTO.setId( resourceItem.getId() );\n        resourceItemDTO.setDeleted( resourceItem.isDeleted() );\n        resourceItemDTO.setName( resourceItem.getName() );\n        resourceItemDTO.setUkrName( resourceItem.getUkrName() );\n        resourceItemDTO.setCreator( resourceItem.getCreator() );\n        resourceItemDTO.setModifier( resourceItem.getModifier() );\n        resourceItemDTO.setCreatedAt( resourceItem.getCreatedAt() );\n        resourceItemDTO.setModifiedAt( resourceItem.getModifiedAt() );\n        resourceItemDTO.setWithdrawAlgorythm( resourceItem.getWithdrawAlgorythm() );\n        resourceItemDTO.setMinimalUnitToWithdraw( resourceItem.getMinimalUnitToWithdraw() );\n        resourceItemDTO.setPrice( resourceItem.getPrice() );\n        resourceItemDTO.setGroup( resourceGroupToResourceGroupDto( resourceItem.getGroup() ) );\n\n        return resourceItemDTO;\n    }\n\n    protected List<ResourceGroup> resourceGroupDtoListToResourceGroupList(List<ResourceGroupDto> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<ResourceGroup> list1 = new ArrayList<ResourceGroup>( list.size() );\n        for ( ResourceGroupDto resourceGroupDto : list ) {\n            list1.add( resourceGroupDtoToResourceGroup( resourceGroupDto ) );\n        }\n\n        return list1;\n    }\n\n    protected ResourceGroup resourceGroupDtoToResourceGroup(ResourceGroupDto resourceGroupDto) {\n        if ( resourceGroupDto == null ) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n\n        resourceGroup.setId( resourceGroupDto.getId() );\n        resourceGroup.setTenantId( resourceGroupDto.getTenantId() );\n        resourceGroup.setDeleted( resourceGroupDto.isDeleted() );\n        resourceGroup.setName( resourceGroupDto.getName() );\n        resourceGroup.setUkrName( resourceGroupDto.getUkrName() );\n        resourceGroup.setCreator( resourceGroupDto.getCreator() );\n        resourceGroup.setModifier( resourceGroupDto.getModifier() );\n        resourceGroup.setCreatedAt( resourceGroupDto.getCreatedAt() );\n        resourceGroup.setModifiedAt( resourceGroupDto.getModifiedAt() );\n        resourceGroup.setParent( resourceGroupDto.getParent() );\n        resourceGroup.setChildren( resourceGroupDtoListToResourceGroupList( resourceGroupDto.getChildren() ) );\n        resourceGroup.setWithdrawAlgorythm( resourceGroupDto.getWithdrawAlgorythm() );\n        resourceGroup.setMinimalUnitToWithdraw( resourceGroupDto.getMinimalUnitToWithdraw() );\n        List<ResourceItem> list1 = resourceGroupDto.getResources();\n        if ( list1 != null ) {\n            resourceGroup.setResources( new ArrayList<ResourceItem>( list1 ) );\n        }\n\n        return resourceGroup;\n    }\n\n    protected ResourceItem resourceItemDTOToResourceItem(ResourceItemDTO resourceItemDTO) {\n        if ( resourceItemDTO == null ) {\n            return null;\n        }\n\n        ResourceItem resourceItem = new ResourceItem();\n\n        resourceItem.setId( resourceItemDTO.getId() );\n        resourceItem.setDeleted( resourceItemDTO.isDeleted() );\n        resourceItem.setName( resourceItemDTO.getName() );\n        resourceItem.setUkrName( resourceItemDTO.getUkrName() );\n        resourceItem.setCreator( resourceItemDTO.getCreator() );\n        resourceItem.setModifier( resourceItemDTO.getModifier() );\n        resourceItem.setCreatedAt( resourceItemDTO.getCreatedAt() );\n        resourceItem.setModifiedAt( resourceItemDTO.getModifiedAt() );\n        resourceItem.setWithdrawAlgorythm( resourceItemDTO.getWithdrawAlgorythm() );\n        resourceItem.setMinimalUnitToWithdraw( resourceItemDTO.getMinimalUnitToWithdraw() );\n        resourceItem.setPrice( resourceItemDTO.getPrice() );\n        resourceItem.setGroup( resourceGroupDtoToResourceGroup( resourceItemDTO.getGroup() ) );\n\n        return resourceItem;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/FullBomMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class FullBomMapperImpl extends FullBomMapper {\n\n    @Override\n    public BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveReleaseDto bomActiveReleaseDto = new BomActiveReleaseDto();\n\n        bomActiveReleaseDto.setId( bomActiveRelease.getId() );\n        bomActiveReleaseDto.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveReleaseDto.setName( bomActiveRelease.getName() );\n        bomActiveReleaseDto.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveReleaseDto.setCreator( bomActiveRelease.getCreator() );\n        bomActiveReleaseDto.setModifier( bomActiveRelease.getModifier() );\n        bomActiveReleaseDto.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveReleaseDto.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveReleaseDto.setDescription( bomActiveRelease.getDescription() );\n        bomActiveReleaseDto.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveReleaseDto.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveReleaseDto.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveReleaseDto.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveReleaseDto.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveReleaseDto.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveReleaseDto.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveReleaseDto.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveReleaseDto;\n    }\n\n    @Override\n    public EngineeringBomWoChildren toDtoWoChildren(BomActiveRelease bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        EngineeringBomWoChildren engineeringBomWoChildren = new EngineeringBomWoChildren();\n\n        engineeringBomWoChildren.setId( bomActiveRelease.getId() );\n        engineeringBomWoChildren.setDeleted( bomActiveRelease.isDeleted() );\n        engineeringBomWoChildren.setName( bomActiveRelease.getName() );\n        engineeringBomWoChildren.setUkrName( bomActiveRelease.getUkrName() );\n        engineeringBomWoChildren.setCreator( bomActiveRelease.getCreator() );\n        engineeringBomWoChildren.setModifier( bomActiveRelease.getModifier() );\n        engineeringBomWoChildren.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        engineeringBomWoChildren.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        engineeringBomWoChildren.setDescription( bomActiveRelease.getDescription() );\n        engineeringBomWoChildren.setPartNumber( bomActiveRelease.getPartNumber() );\n        engineeringBomWoChildren.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        engineeringBomWoChildren.setFusionId( bomActiveRelease.getFusionId() );\n        engineeringBomWoChildren.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        engineeringBomWoChildren.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        engineeringBomWoChildren.setConfiguration( bomActiveRelease.isConfiguration() );\n        engineeringBomWoChildren.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        engineeringBomWoChildren.setConsistent( bomActiveRelease.isConsistent() );\n\n        return engineeringBomWoChildren;\n    }\n\n    @Override\n    public BomActiveRelease toPojo(BomActiveReleaseDto bomActiveRelease) {\n        if ( bomActiveRelease == null ) {\n            return null;\n        }\n\n        BomActiveRelease bomActiveRelease1 = new BomActiveRelease();\n\n        bomActiveRelease1.setId( bomActiveRelease.getId() );\n        bomActiveRelease1.setDeleted( bomActiveRelease.isDeleted() );\n        bomActiveRelease1.setName( bomActiveRelease.getName() );\n        bomActiveRelease1.setUkrName( bomActiveRelease.getUkrName() );\n        bomActiveRelease1.setCreator( bomActiveRelease.getCreator() );\n        bomActiveRelease1.setModifier( bomActiveRelease.getModifier() );\n        bomActiveRelease1.setCreatedAt( bomActiveRelease.getCreatedAt() );\n        bomActiveRelease1.setModifiedAt( bomActiveRelease.getModifiedAt() );\n        bomActiveRelease1.setDescription( bomActiveRelease.getDescription() );\n        bomActiveRelease1.setPartNumber( bomActiveRelease.getPartNumber() );\n        bomActiveRelease1.setFusionVersion( bomActiveRelease.getFusionVersion() );\n        bomActiveRelease1.setFusionId( bomActiveRelease.getFusionId() );\n        bomActiveRelease1.setLibraryItem( bomActiveRelease.isLibraryItem() );\n        bomActiveRelease1.setFusionRevisionId( bomActiveRelease.getFusionRevisionId() );\n        bomActiveRelease1.setConfiguration( bomActiveRelease.isConfiguration() );\n        bomActiveRelease1.setConfiguredDesign( bomActiveRelease.isConfiguredDesign() );\n        bomActiveRelease1.setConsistent( bomActiveRelease.isConsistent() );\n\n        return bomActiveRelease1;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/plm/converters/mappers/BodyMapperImpl.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.database.fusion.Material;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.MaterialDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class BodyMapperImpl extends BodyMapper {\n\n    @Override\n    public Body toDto(FusionPhysicalProperty fusionPhysicalProperty) {\n        if ( fusionPhysicalProperty == null ) {\n            return null;\n        }\n\n        Body body = new Body();\n\n        body.setBodyName( fusionPhysicalProperty.getBodyName() );\n        body.setWidthMm( fusionPhysicalProperty.getWidthMm() );\n        body.setLengthMm( fusionPhysicalProperty.getLengthMm() );\n        body.setHeightMm( fusionPhysicalProperty.getHeightMm() );\n        body.setVolumeCm3( fusionPhysicalProperty.getVolumeCm3() );\n        body.setAreaCm2( fusionPhysicalProperty.getAreaCm2() );\n        body.setMassKg( fusionPhysicalProperty.getMassKg() );\n        body.setDensityKgCm2( fusionPhysicalProperty.getDensityKgCm2() );\n        body.setMaterial( materialToMaterialDto( fusionPhysicalProperty.getMaterial() ) );\n\n        return body;\n    }\n\n    @Override\n    public FusionPhysicalProperty toPojo(Body body) {\n        if ( body == null ) {\n            return null;\n        }\n\n        FusionPhysicalProperty fusionPhysicalProperty = new FusionPhysicalProperty();\n\n        fusionPhysicalProperty.setBodyName( body.getBodyName() );\n        fusionPhysicalProperty.setMaterial( materialDtoToMaterial( body.getMaterial() ) );\n        fusionPhysicalProperty.setWidthMm( body.getWidthMm() );\n        fusionPhysicalProperty.setLengthMm( body.getLengthMm() );\n        fusionPhysicalProperty.setHeightMm( body.getHeightMm() );\n        fusionPhysicalProperty.setVolumeCm3( body.getVolumeCm3() );\n        fusionPhysicalProperty.setAreaCm2( body.getAreaCm2() );\n        fusionPhysicalProperty.setMassKg( body.getMassKg() );\n        fusionPhysicalProperty.setDensityKgCm2( body.getDensityKgCm2() );\n\n        return fusionPhysicalProperty;\n    }\n\n    protected MaterialDto materialToMaterialDto(Material material) {\n        if ( material == null ) {\n            return null;\n        }\n\n        MaterialDto materialDto = new MaterialDto();\n\n        materialDto.setId( material.getId() );\n        materialDto.setDeleted( material.isDeleted() );\n        materialDto.setName( material.getName() );\n        materialDto.setUkrName( material.getUkrName() );\n\n        return materialDto;\n    }\n\n    protected Material materialDtoToMaterial(MaterialDto materialDto) {\n        if ( materialDto == null ) {\n            return null;\n        }\n\n        Material material = new Material();\n\n        material.setId( materialDto.getId() );\n        material.setDeleted( materialDto.isDeleted() );\n        material.setName( materialDto.getName() );\n        material.setUkrName( materialDto.getUkrName() );\n\n        return material;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TimeLogMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TimeLogMapperImpl extends TimeLogMapper {\n\n    @Override\n    public TimeLogDto toDto(TimeLog timeLog) {\n        if ( timeLog == null ) {\n            return null;\n        }\n\n        TimeLogDto timeLogDto = new TimeLogDto();\n\n        timeLogDto.setId( timeLog.getId() );\n        timeLogDto.setDeleted( timeLog.isDeleted() );\n        timeLogDto.setName( timeLog.getName() );\n        timeLogDto.setUkrName( timeLog.getUkrName() );\n        timeLogDto.setCreator( timeLog.getCreator() );\n        timeLogDto.setModifier( timeLog.getModifier() );\n        timeLogDto.setCreatedAt( timeLog.getCreatedAt() );\n        timeLogDto.setModifiedAt( timeLog.getModifiedAt() );\n        timeLogDto.setAmount( timeLog.getAmount() );\n        timeLogDto.setLoggedBy( userEntityToUserDto( timeLog.getLoggedBy() ) );\n        timeLogDto.setDate( timeLog.getDate() );\n\n        return timeLogDto;\n    }\n\n    protected UserDto userEntityToUserDto(UserEntity userEntity) {\n        if ( userEntity == null ) {\n            return null;\n        }\n\n        UserDto userDto = new UserDto();\n\n        userDto.setId( userEntity.getId() );\n        userDto.setDeleted( userEntity.isDeleted() );\n        userDto.setUsername( userEntity.getUsername() );\n        userDto.setEnabled( userEntity.isEnabled() );\n        userDto.setName( userEntity.getName() );\n\n        return userDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/SeverityMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Severity;\nimport com.ua.crow.mes.dto.SeverityDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class SeverityMapperImpl extends SeverityMapper {\n\n    @Override\n    public SeverityDto toDto(Severity severity) {\n        if ( severity == null ) {\n            return null;\n        }\n\n        SeverityDto severityDto = new SeverityDto();\n\n        severityDto.setColor( severity.getColor() );\n        if ( severity.getValue() != null ) {\n            severityDto.setValue( severity.getValue() );\n        }\n\n        severityDto.setName( severity.toString() );\n\n        return severityDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/SubtaskMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Subtask;\nimport com.ua.crow.mes.dto.SubtaskDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class SubtaskMapperImpl extends SubtaskMapper {\n\n    @Autowired\n    private TaskMapper taskMapper;\n\n    @Override\n    public SubtaskDto toDto(Subtask severity) {\n        if ( severity == null ) {\n            return null;\n        }\n\n        SubtaskDto subtaskDto = new SubtaskDto();\n\n        subtaskDto.setId( severity.getId() );\n        subtaskDto.setDeleted( severity.isDeleted() );\n        subtaskDto.setName( severity.getName() );\n        subtaskDto.setUkrName( severity.getUkrName() );\n        subtaskDto.setCreator( severity.getCreator() );\n        subtaskDto.setModifier( severity.getModifier() );\n        subtaskDto.setCreatedAt( severity.getCreatedAt() );\n        subtaskDto.setModifiedAt( severity.getModifiedAt() );\n        subtaskDto.setSequence( severity.getSequence() );\n        subtaskDto.setTask( taskMapper.toRef( severity.getTask() ) );\n\n        return subtaskDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TaskMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Subtask;\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.dto.SubtaskDto;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.TaskRef;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport java.util.ArrayList;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TaskMapperImpl extends TaskMapper {\n\n    @Autowired\n    private TaskTypeMapper taskTypeMapper;\n    @Autowired\n    private UserEntityMapper userEntityMapper;\n    @Autowired\n    private CommentsMapper commentsMapper;\n    @Autowired\n    private SeverityMapper severityMapper;\n    @Autowired\n    private TimeLogMapper timeLogMapper;\n\n    @Override\n    public TaskDto toDto(Task task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        TaskDto taskDto = new TaskDto();\n\n        taskDto.setId( task.getId() );\n        taskDto.setDeleted( task.isDeleted() );\n        taskDto.setName( task.getName() );\n        taskDto.setUkrName( task.getUkrName() );\n        taskDto.setCreator( task.getCreator() );\n        taskDto.setModifier( task.getModifier() );\n        taskDto.setCreatedAt( task.getCreatedAt() );\n        taskDto.setModifiedAt( task.getModifiedAt() );\n        taskDto.setAssignee( userEntityMapper.toDto( task.getAssignee() ) );\n        taskDto.setSubtask( task.isSubtask() );\n        taskDto.setReporter( userEntityMapper.toDto( task.getReporter() ) );\n        taskDto.setDescription( task.getDescription() );\n        taskDto.setStatus( taskStatusToTaskStatusDto( task.getStatus() ) );\n        taskDto.setStart( task.getStart() );\n        taskDto.setHoursLogged( timeLogListToTimeLogDtoList( task.getHoursLogged() ) );\n        taskDto.setComments( commentsMapper.map( task.getComments() ) );\n        taskDto.setSubtasks( subtaskSetToSubtaskDtoSet( task.getSubtasks() ) );\n        taskDto.setSeverity( severityMapper.toDto( task.getSeverity() ) );\n        taskDto.setTaskType( taskTypeMapper.toDto( task.getTaskType() ) );\n\n        taskDto.setTotalHoursLogged( taskService.computeTotalHoursLogged(task) );\n        taskDto.setSubtasksCount( taskService.getSubtasksCount(task) );\n\n        return taskDto;\n    }\n\n    @Override\n    public TaskRef toRef(Task task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        TaskRef taskRef = new TaskRef();\n\n        taskRef.setType( taskTypeMapper.toDto( task.getTaskType() ) );\n        taskRef.setId( task.getId() );\n        taskRef.setDeleted( task.isDeleted() );\n        taskRef.setName( task.getName() );\n        taskRef.setUkrName( task.getUkrName() );\n        taskRef.setCreator( task.getCreator() );\n        taskRef.setModifier( task.getModifier() );\n        taskRef.setCreatedAt( task.getCreatedAt() );\n        taskRef.setModifiedAt( task.getModifiedAt() );\n        taskRef.setStatus( taskStatusToTaskStatusDto( task.getStatus() ) );\n        taskRef.setAssignee( userEntityMapper.toDto( task.getAssignee() ) );\n        taskRef.setReporter( userEntityMapper.toDto( task.getReporter() ) );\n\n        return taskRef;\n    }\n\n    protected TaskStatusDto taskStatusToTaskStatusDto(TaskStatus taskStatus) {\n        if ( taskStatus == null ) {\n            return null;\n        }\n\n        TaskStatusDto taskStatusDto = new TaskStatusDto();\n\n        taskStatusDto.setId( taskStatus.getId() );\n        taskStatusDto.setDeleted( taskStatus.isDeleted() );\n        taskStatusDto.setName( taskStatus.getName() );\n        taskStatusDto.setUkrName( taskStatus.getUkrName() );\n        taskStatusDto.setTaskType( taskTypeMapper.toDto( taskStatus.getTaskType() ) );\n        taskStatusDto.setInitialStatus( taskStatus.isInitialStatus() );\n        taskStatusDto.setTerminatedStatus( taskStatus.isTerminatedStatus() );\n\n        return taskStatusDto;\n    }\n\n    protected List<TimeLogDto> timeLogListToTimeLogDtoList(List<TimeLog> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<TimeLogDto> list1 = new ArrayList<TimeLogDto>( list.size() );\n        for ( TimeLog timeLog : list ) {\n            list1.add( timeLogMapper.toDto( timeLog ) );\n        }\n\n        return list1;\n    }\n\n    protected SubtaskDto subtaskToSubtaskDto(Subtask subtask) {\n        if ( subtask == null ) {\n            return null;\n        }\n\n        SubtaskDto subtaskDto = new SubtaskDto();\n\n        subtaskDto.setId( subtask.getId() );\n        subtaskDto.setDeleted( subtask.isDeleted() );\n        subtaskDto.setName( subtask.getName() );\n        subtaskDto.setUkrName( subtask.getUkrName() );\n        subtaskDto.setCreator( subtask.getCreator() );\n        subtaskDto.setModifier( subtask.getModifier() );\n        subtaskDto.setCreatedAt( subtask.getCreatedAt() );\n        subtaskDto.setModifiedAt( subtask.getModifiedAt() );\n        subtaskDto.setSequence( subtask.getSequence() );\n        subtaskDto.setTask( toRef( subtask.getTask() ) );\n\n        return subtaskDto;\n    }\n\n    protected Set<SubtaskDto> subtaskSetToSubtaskDtoSet(Set<Subtask> set) {\n        if ( set == null ) {\n            return null;\n        }\n\n        Set<SubtaskDto> set1 = new LinkedHashSet<SubtaskDto>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );\n        for ( Subtask subtask : set ) {\n            set1.add( subtaskToSubtaskDto( subtask ) );\n        }\n\n        return set1;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TaskTypeMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskType;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TaskTypeMapperImpl extends TaskTypeMapper {\n\n    @Override\n    public TaskTypeDto toDto(TaskType taskType) {\n        if ( taskType == null ) {\n            return null;\n        }\n\n        TaskTypeDto taskTypeDto = new TaskTypeDto();\n\n        taskTypeDto.setId( taskType.getId() );\n        taskTypeDto.setDeleted( taskType.isDeleted() );\n        taskTypeDto.setName( taskType.getName() );\n        taskTypeDto.setUkrName( taskType.getUkrName() );\n\n        return taskTypeDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/UserEntityMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.dto.UserDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class UserEntityMapperImpl extends UserEntityMapper {\n\n    @Override\n    public UserDto toDto(UserEntity user) {\n        if ( user == null ) {\n            return null;\n        }\n\n        UserDto userDto = new UserDto();\n\n        userDto.setId( user.getId() );\n        userDto.setDeleted( user.isDeleted() );\n        userDto.setUsername( user.getUsername() );\n        userDto.setEnabled( user.isEnabled() );\n        userDto.setName( user.getName() );\n\n        return userDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/TaskStatusMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.database.TaskType;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class TaskStatusMapperImpl extends TaskStatusMapper {\n\n    @Override\n    public TaskStatusDto toDto(TaskStatus task) {\n        if ( task == null ) {\n            return null;\n        }\n\n        TaskStatusDto taskStatusDto = new TaskStatusDto();\n\n        taskStatusDto.setId( task.getId() );\n        taskStatusDto.setDeleted( task.isDeleted() );\n        taskStatusDto.setName( task.getName() );\n        taskStatusDto.setUkrName( task.getUkrName() );\n        taskStatusDto.setTaskType( taskTypeToTaskTypeDto( task.getTaskType() ) );\n        taskStatusDto.setInitialStatus( task.isInitialStatus() );\n        taskStatusDto.setTerminatedStatus( task.isTerminatedStatus() );\n\n        return taskStatusDto;\n    }\n\n    protected TaskTypeDto taskTypeToTaskTypeDto(TaskType taskType) {\n        if ( taskType == null ) {\n            return null;\n        }\n\n        TaskTypeDto taskTypeDto = new TaskTypeDto();\n\n        taskTypeDto.setId( taskType.getId() );\n        taskTypeDto.setDeleted( taskType.isDeleted() );\n        taskTypeDto.setName( taskType.getName() );\n        taskTypeDto.setUkrName( taskType.getUkrName() );\n\n        return taskTypeDto;\n    }\n}\n\n\n\n// ===== File: crow/target/generated-sources/annotations/com/ua/crow/mes/conversion/CommentsMapperImpl.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.database.Comment;\nimport com.ua.crow.mes.dto.CommentDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2025-07-21T16:20:35+0300\",\n    comments = \"version: 1.5.5.Final, compiler: javac, environment: Java 21.0.7 (Amazon.com Inc.)\"\n)\n@Component\npublic class CommentsMapperImpl extends CommentsMapper {\n\n    @Override\n    public CommentDto toDto(Comment comment) {\n        if ( comment == null ) {\n            return null;\n        }\n\n        CommentDto commentDto = new CommentDto();\n\n        commentDto.setId( comment.getId() );\n        commentDto.setDeleted( comment.isDeleted() );\n        commentDto.setName( comment.getName() );\n        commentDto.setUkrName( comment.getUkrName() );\n        commentDto.setCreator( comment.getCreator() );\n        commentDto.setModifier( comment.getModifier() );\n        commentDto.setCreatedAt( comment.getCreatedAt() );\n        commentDto.setModifiedAt( comment.getModifiedAt() );\n        commentDto.setImageUrl( comment.getImageUrl() );\n        commentDto.setAudioUrl( comment.getAudioUrl() );\n        commentDto.setAuthor( userEntityToUserDto( comment.getAuthor() ) );\n\n        return commentDto;\n    }\n\n    @Override\n    public List<CommentDto> map(List<Comment> comments) {\n        if ( comments == null ) {\n            return null;\n        }\n\n        List<CommentDto> list = new ArrayList<CommentDto>( comments.size() );\n        for ( Comment comment : comments ) {\n            list.add( toDto( comment ) );\n        }\n\n        return list;\n    }\n\n    protected UserDto userEntityToUserDto(UserEntity userEntity) {\n        if ( userEntity == null ) {\n            return null;\n        }\n\n        UserDto userDto = new UserDto();\n\n        userDto.setId( userEntity.getId() );\n        userDto.setDeleted( userEntity.isDeleted() );\n        userDto.setUsername( userEntity.getUsername() );\n        userDto.setEnabled( userEntity.isEnabled() );\n        userDto.setName( userEntity.getName() );\n\n        return userDto;\n    }\n}\n\n\n\n// ===== File: crow/src/test/java/com/ua/crown/CrownApplicationTests.java =====\npackage com.ua.crown;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest()\nclass CrownApplicationTests {\n\n    @BeforeEach\n    public void setUp() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NamedNumericIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class NamedNumericIdEntityDto extends NumericIdEntityDto {\n    private String name;\n\n    private String ukrName;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/FindProjectByNameRequest.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FindProjectByNameRequest {\n    String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NumericIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class NumericIdEntityDto {\n    private Long id;\n    private boolean deleted;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/StringIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport jakarta.persistence.Id;\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@MappedSuperclass\n@Getter\n@Setter\npublic class StringIdEntityDto {\n    @Id\n    String id;\n\n    private boolean deleted;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NamedStringIdEntityDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class NamedStringIdEntityDto extends StringIdEntityDto {\n    private String name;\n\n    private String ukrName;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/basic/NamedBasicEntityWithNumericIdDto.java =====\npackage com.ua.crow.dto.basic;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.Date;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class NamedBasicEntityWithNumericIdDto extends NamedNumericIdEntityDto {\n\n    private String creator = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private String modifier = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date createdAt = null;\n\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/JwtRequest.java =====\npackage com.ua.crow.dto;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class JwtRequest {\n    private String username;\n\n    private String password;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/FileTypes.java =====\npackage com.ua.crow.dto;\n\npublic enum FileTypes {\n    VIDEO,\n    AUDIO,\n    IMAGE,\n    DOCUMENT\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/appsmith/ResponseMeta.java =====\npackage com.ua.crow.dto.appsmith;\n\npublic class ResponseMeta {\n    public int status;\n    public boolean success;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/appsmith/Data.java =====\npackage com.ua.crow.dto.appsmith;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class Data {\n    public String email;\n    public String username;\n    public String name;\n    public String useCase;\n    public boolean enableTelemetry;\n    public boolean accountNonExpired;\n    public boolean accountNonLocked;\n    public boolean credentialsNonExpired;\n    public boolean emptyInstance;\n    public boolean isAnonymous;\n    public boolean isEnabled;\n    public boolean isSuperUser;\n    public boolean isConfigurable;\n    public boolean adminSettingsVisible;\n    public boolean isIntercomConsentGiven;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/appsmith/MeResponse.java =====\npackage com.ua.crow.dto.appsmith;\n\npublic class MeResponse {\n    public ResponseMeta responseMeta;\n    public Data data;\n    public String errorDisplay;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/ErrorInfo.java =====\npackage com.ua.crow.dto;\n\nimport java.util.Optional;\nimport lombok.Getter;\n\npublic record ErrorInfo(@Getter int code, @Getter String message, Optional<String> url) {\n    public static ErrorInfo createErrorInfo(int code, String message, String url) {\n        return new ErrorInfo(code, message, Optional.of(url));\n    }\n\n    public static ErrorInfo createErrorInfo(int code, String message) {\n        return new ErrorInfo(code, message, Optional.empty());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/mappers/UnitsMapper.java =====\npackage com.ua.crow.dto.mappers;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class UnitsMapper {\n    public abstract UnitsDto toDto(Units units);\n    public abstract Units toPojo(UnitsDto unitsDto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/dto/JwtResponse.java =====\npackage com.ua.crow.dto;\n\nimport lombok.*;\n\npublic class JwtResponse {\n    @Getter\n    @Setter\n    private String token;\n\n    public JwtResponse(String token) {\n        this.token = token;\n    }\n\n    public JwtResponse() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/repository/UnitsRepository.java =====\npackage com.ua.crow.database.repository;\n\nimport com.ua.crow.database.models.common.Units;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\npublic interface UnitsRepository extends CrudRepository<Units, Long> {\n    Optional<Units> findByShortName(String shortName);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/repository/UserRoleRepository.java =====\npackage com.ua.crow.database.repository;\n\nimport com.ua.crow.database.models.auth.UserRole;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRoleRepository extends CrudRepository<UserRole, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/repository/UserRepository.java =====\npackage com.ua.crow.database.repository;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\n    Optional<UserEntity> findByUsername(String username);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/auth/UserRole.java =====\npackage com.ua.crow.database.models.auth;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity(name = \"userrole\")\n@Table(indexes = {@Index(name = \"userrole_user_id_uindex\", columnList = \"user_id\")})\npublic class UserRole {\n\n    @Id\n    @Column(name = \"user_id\", nullable = false)\n    private Long userId;\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"role\", nullable = false)\n    private Role role;\n\n    @OneToOne(mappedBy = \"userRole\", cascade = CascadeType.ALL, fetch = FetchType.LAZY, optional = false)\n    private UserEntity user;\n\n    public UserRole() {}\n\n\n    public UserRole(Role role) {\n        this.role = role;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/auth/UserEntity.java =====\npackage com.ua.crow.database.models.auth;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport com.ua.crow.workspace.WorkspaceType;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n\n@Getter\n@Setter\n@Entity\npublic class UserEntity extends NumericIdEntity {\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    private String name;\n\n    private String password;\n\n    private boolean enabled;\n\n    private String email;\n\n    private boolean accountNonExpired;\n\n    private boolean accountNonLocked;\n\n    private boolean anonymous;\n\n    private boolean credentialsNonExpired;\n\n    @Enumerated(EnumType.STRING)\n    private WorkspaceType currentWorkspace;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @PrimaryKeyJoinColumn\n    private UserRole userRole;\n\n    public UserEntity() {}\n\n    public UserEntity(String username, String password, boolean enabled) {\n        this.username = username;\n        this.password = password;\n        this.enabled = enabled;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/auth/Role.java =====\npackage com.ua.crow.database.models.auth;\n\npublic enum Role {\n    ADMIN,\n    RESEARCH,\n    WORKER\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/cashbox/Cashbox.java =====\npackage com.ua.crow.database.models.cashbox;\n\nimport com.ua.crow.database.models.common.Location;\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.Currency;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class Cashbox extends BasicEntityWithNumericId {\n\n    @ManyToOne\n    private Location location;\n\n    @ManyToOne\n    private Currency currency;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/cashbox/CashboxLeftovers.java =====\npackage com.ua.crow.database.models.cashbox;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Date;\n\npublic class CashboxLeftovers extends NumericIdEntity {\n    @ManyToOne\n    private Cashbox cashbox;\n\n    private Date date;\n\n    double leftover;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/Country.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Country extends NamedNumericIdEntity {\n    private String code;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NumericIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NumericIdEntity implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String tenantId;\n\n    private boolean deleted;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NamedBasicEntityWithNumericId.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport java.util.Date;\nimport lombok.*;\nimport org.springframework.data.annotation.*;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NamedBasicEntityWithNumericId extends NamedNumericIdEntity {\n    @CreatedBy\n    private String creator = null;\n\n    @LastModifiedBy\n    private String modifier = null;\n\n    @CreatedDate\n    private Date createdAt = null;\n\n    @LastModifiedDate\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/BasicEntityWithNumericId.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport java.util.Date;\nimport lombok.*;\nimport org.springframework.data.annotation.*;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class BasicEntityWithNumericId extends NumericIdEntity {\n\n    @CreatedBy\n    private String creator = null;\n\n    @LastModifiedBy\n    private String modifier = null;\n\n    @CreatedDate\n    private Date createdAt = null;\n\n    @LastModifiedDate\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NamedNumericIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.*;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NamedNumericIdEntity extends NumericIdEntity {\n\n    private String name;\n\n    private String ukrName;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/StringIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.Id;\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@MappedSuperclass\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\npublic class StringIdEntity {\n    @Id\n    @EqualsAndHashCode.Include\n    private String id;\n\n    private String tenantId;\n\n    private boolean deleted;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/Currency.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.Entity;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class Currency extends NamedNumericIdEntity {\n    private String code;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/basic/NamedStringIdEntity.java =====\npackage com.ua.crow.database.models.common.basic;\n\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class NamedStringIdEntity extends StringIdEntity {\n\n    private String name;\n\n    private String ukrName;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/AbstractResourceGroup.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.List;\n\n@Setter\n@Getter\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener.class)\npublic abstract class AbstractResourceGroup<T extends AbstractResourceGroup<T>> extends NamedBasicEntityWithNumericId implements Convertable {\n\n    @ManyToOne\n    @JoinColumn(name = \"parent_id\")\n    private T parent;\n\n    @OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private List<T> children;\n\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/Address.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class Address extends NumericIdEntity {\n    private String addressLine1;\n    private String addressLine2;\n    private String postCode;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/Units.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class Units extends NamedNumericIdEntity implements Convertable {\n\n    @Enumerated(EnumType.STRING)\n    private TypeOfUnits type;\n\n    private String shortName;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/TypeOfUnits.java =====\npackage com.ua.crow.database.models.common;\n\n// volume, lenght, voltage etc\npublic enum TypeOfUnits {\n    SQUARE,\n    UNITS_LENGTH,\n    MASS,\n    VOLUME,\n    DENSITY,\n    PRESSURE,\n    TEMPERATURE,\n    PCS;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/DataTypes.java =====\npackage com.ua.crow.database.models.common;\n\npublic enum DataTypes {\n    NUMBER,\n    TEXT,\n    RASTISED_IMAGE,\n    VECTOR_IMAGE,\n    URL,\n    MONEY,\n    MODEL\n\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/database/models/common/Location.java =====\npackage com.ua.crow.database.models.common;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.Country;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Location extends BasicEntityWithNumericId {\n\n    @ManyToOne\n    private Country country;\n\n    @ManyToOne\n    private Address address;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/FusionComponentDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.beans.factory.annotation.Configurable;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\n\n@Setter\n@Getter\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Configurable\npublic class FusionComponentDto implements Convertable {\n\n    private String fusionId;\n\n    private String revisionId;\n\n    private ItemTypes type;\n\n    private String partName;\n\n    private FusionComponentDto parent;\n\n    private FusionBomDto parentBom;\n\n    private List<FusionComponentDto> children = new LinkedList<>();\n\n    private String partNumber;\n\n    private Double quantity;\n\n    private String description;\n\n    private String sourceFile;\n\n    private String path;\n\n    private Set<Body> bodies;\n\n    private boolean root;\n\n    public void addChild(FusionComponentDto item){\n        children.add(item);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/AddChildRequest.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class AddChildRequest {\n\n    @NotNull\n    FusionId parentId;\n\n    @NotNull\n    FusionId bomId;\n\n    @NotNull\n    FusionId childId;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/FusionBomDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Getter\n@Setter\npublic class FusionBomDto  implements Convertable {\n    String fusionId;\n    ProductActiveReleaseDto product;\n    String documentName;\n    String version;\n    boolean processed;\n    Long engineeringBomId;\n    String description;\n    boolean isLibraryItem;\n    String revisionId;\n    String partNumber;\n    boolean isConfiguration;\n    boolean isConfiguredDesign;\n    FusionComponentDto rootPart;\n    boolean deleted;\n\n    private String creator = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private String modifier = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date createdAt = null;\n\n    private Date modifiedAt = null;\n\n    private String name;\n\n    /**\n     * Signed URL to download STEP model from MinIO.\n     */\n    private String url;\n\n    private java.util.List<FusionBomDto> children;\n\n    public java.util.List<FusionBomDto> getChildren() {\n        return children == null ? java.util.Collections.emptyList() : children;\n    }\n\n    public void setChildren(java.util.List<FusionBomDto> children) {\n        this.children = children;\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/Body.java =====\npackage com.ua.crow.plm.dto.fusion;\n\n\n\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@EqualsAndHashCode\npublic class Body {\n    String bodyName;\n    String description;\n    Double widthMm;\n    Double lengthMm;\n    Double heightMm;\n    Double volumeCm3;\n    Double areaCm2;\n    Double massKg;\n    Double densityKgCm2;\n    MaterialDto material;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/FusionRevisionDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FusionRevisionDto {\n    private String revisionId;\n    private int number;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/fusion/MaterialDto.java =====\npackage com.ua.crow.plm.dto.fusion;\n\nimport com.ua.crow.dto.basic.NamedStringIdEntityDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class MaterialDto extends NamedStringIdEntityDto {\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ResourceGroupDto.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Setter\n@Getter\npublic class ResourceGroupDto extends NamedBasicEntityWithNumericId implements Convertable {\n    private WithdrawAlgorythm withdrawAlgorythm;\n    private double minimalUnitToWithdraw;\n    List<ResourceItem> resources;\n    private ResourceGroup parent;\n    private List<ResourceGroupDto> children;\n\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/BomDtoShort.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\n\npublic class BomDtoShort extends NamedBasicEntityWithNumericIdDto {\n    \n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ResourceItemDTO.java =====\npackage com.ua.crow.plm.dto;\n\n\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\n\nimport lombok.Data;\n\n@Data\npublic class ResourceItemDTO extends NamedBasicEntityWithNumericIdDto {\n\n\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    private double price;\n\n\n    private ResourceGroupDto group;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/UnitsDto.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.database.models.common.TypeOfUnits;\nimport com.ua.crow.dto.basic.NamedNumericIdEntityDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UnitsDto extends NamedNumericIdEntityDto {\n\n    private TypeOfUnits type;\n\n    private String shortName;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/merge/MergeBomTreesDto.java =====\npackage com.ua.crow.plm.dto.merge;\n\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n/**\n * DTO combining Fusion and Engineering BOM trees for merge UI.\n */\n@Getter\n@Setter\npublic class MergeBomTreesDto {\n    private FusionBomDto fusionBom;\n    private BomActiveReleaseDto engineeringBom;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ResourceDto.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Setter\n@Getter\npublic class ResourceDto extends NamedBasicEntityWithNumericIdDto {\n\n\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    private double price;\n\n\n    private ResourceGroup group;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/MergeBomItemsRequest.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class MergeBomItemsRequest {\n    @NotNull\n    @NotEmpty\n    private String sourceFusionId;\n    @NotNull\n    @NotEmpty\n    private String sourceRevisionId;\n    @NotNull\n    @NotEmpty\n    private String targetFusionId;\n    @NotNull\n    @NotEmpty\n    private String targetRevisionId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/FusionBomsListRequest.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Optional;\n\n@Getter\n@Setter\npublic class FusionBomsListRequest {\n    Optional<Long> productId = Optional.empty();\n    Optional<Long> release = Optional.empty();\n    Optional<Boolean> unprocessed = Optional.empty();\n    Optional<String> partNumber = Optional.empty();\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/MapProductRequest.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class MapProductRequest {\n    @NotNull\n    Long productId;\n    @NotNull\n    @NotEmpty\n    String fusionBomId;\n\n    @NotNull\n    @NotEmpty\n    String revisionId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/requests/ComponentRequestDto.java =====\npackage com.ua.crow.plm.dto.requests;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ComponentRequestDto {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ReleaseVersionDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\n\nimport java.util.Date;\n\n@Data\npublic class ReleaseVersionDTO extends NamedBasicEntityWithNumericIdDto {\n\n    private boolean released;\n\n    private Date releaseDate;\n\n    private ReleaseVersionDTO previous;\n\n    private Double ver;\n\n    private String description;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ComponentReleasedPropertiesDto.java =====\npackage com.ua.crow.plm.dto.released;\n\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\n\npublic class ComponentReleasedPropertiesDto extends ComponentPropertiesDTO<ComponentReleasedDTO> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/BomReleasedDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\n\nimport com.ua.crow.plm.dto.base.EngineeringBomDTO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class BomReleasedDTO extends EngineeringBomDTO<ComponentReleasedDTO, ProductReleasedDTO> {\n    private ReleaseVersionDTO releaseVersion;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ComponentReleasedDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\nimport com.ua.crow.plm.dto.base.ComponentDTO;\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class ComponentReleasedDTO extends ComponentDTO<BomReleasedDTO, ComponentPropertiesDTO,ComponentReleasedDTO> {\n    ReleaseVersionDTO releaseVersionDTO;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/released/ProductReleasedDTO.java =====\npackage com.ua.crow.plm.dto.released;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport org.springframework.beans.BeanUtils;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class ProductReleasedDTO extends ProductDto<BomReleasedDTO> {\n    ReleaseVersionDTO releaseVersionDTO;\n\n    public ProductReleasedDTO(ProductDto base) {\n        try {\n            BeanUtils.copyProperties( base,this);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to copy properties from base entity\", e);\n        }\n\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/ObtainPartNumberRequest.java =====\npackage com.ua.crow.plm.dto;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ObtainPartNumberRequest {\n    FusionId bomId;\n\n    String partNumber;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/ComponentActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.ComponentDTO;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class ComponentActiveReleaseDto extends ComponentDTO<EngineeringBomWoChildren, CompPropertiesActiveReleaseDto, ComponentActiveReleaseDto> implements Convertable {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/ProductActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport lombok.*;\n\n\n@Getter\n@Setter\npublic class ProductActiveReleaseDto extends ProductDto<BomActiveReleaseDto> {\n\n//    public ProductActiveReleaseDto(ProductDto base) {\n//        try {\n//            BeanUtils.copyProperties( base,this);\n//        } catch (Exception e) {\n//            throw new RuntimeException(\"Failed to copy properties from base entity\", e);\n//        }\n//\n//    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/BomActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.EngineeringBomDTO;\nimport com.ua.crow.service.conversion.Optionalable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class BomActiveReleaseDto extends EngineeringBomDTO<ComponentActiveReleaseDto, ProductActiveReleaseDto> implements Optionalable<BomActiveReleaseDto> {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/EngineeringBomWoChildren.java =====\npackage com.ua.crow.plm.dto.active;\n\npublic class EngineeringBomWoChildren extends BomActiveReleaseDto{\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/active/CompPropertiesActiveReleaseDto.java =====\npackage com.ua.crow.plm.dto.active;\n\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class CompPropertiesActiveReleaseDto extends ComponentPropertiesDTO<ComponentActiveReleaseDto> {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ProductDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.*;\n\nimport java.util.Set;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ProductDto<T extends EngineeringBomDTO> extends NamedBasicEntityWithNumericIdDto implements Convertable {\n        private Set<T> engineeringBoms;\n        private String thumbnailUrl;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ComponentDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class ComponentDTO<K extends EngineeringBomDTO, T extends ComponentPropertiesDTO, V extends ComponentDTO> extends PartDTO<T> {\n    private List<V> parts = new LinkedList<>();\n    private K parentBom;\n    private V parent;\n    private K childBom;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/BomItemPropertyDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\n\n@Data\npublic class BomItemPropertyDto<T extends ComponentDTO> extends NamedBasicEntityWithNumericIdDto {\n\n    private T item;\n\n    private String stringValue;\n\n    private Double numericValue;\n\n\n    BomItemPropertyTypeDto propertyType;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/BomItemPropertyTypeDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n\npublic class BomItemPropertyTypeDto extends NamedBasicEntityWithNumericIdDto implements Convertable {\n\n    private UnitsDto units;\n\n    private BomItemPropertyTypeGroupDto group;\n\n    private DataTypes dataType;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/PartDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport lombok.Data;\nimport java.util.Set;\n\n@Data\npublic class PartDTO<T extends ComponentPropertiesDTO> extends NamedBasicEntityWithNumericIdDto {\n    private String itemType;\n    private Double quantity;\n    private String description;\n    private String partNumber;\n    private ResourceItemDTO resourceItem;\n    private Set<T> properties;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ComponentPropertiesDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\n\n@Data\npublic class ComponentPropertiesDTO<T extends ComponentDTO> extends NamedBasicEntityWithNumericIdDto {\n\n\n    private T item;\n\n    private String stringValue;\n\n    private Double numericValue;\n\n\n    BomItemPropertyTypeDto propertyType;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/EngineeringBomDTO.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport java.util.Set;\n\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class EngineeringBomDTO<T extends ComponentDTO, V extends ProductDto> extends NamedBasicEntityWithNumericIdDto {\n    private V product;\n    private String description;\n    private String partNumber;\n    private Set<T> children;\n\n    private String fusionVersion;\n    private String fusionId;\n    private boolean isLibraryItem;\n    private String fusionRevisionId;\n    private boolean isConfiguration;\n    private boolean isConfiguredDesign;\n    private boolean consistent;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ItemTypeNameMappingDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class ItemTypeNameMappingDto extends NumericIdEntityDto implements Convertable {\n    private ItemTypes type;\n    private String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/BomItemPropertyTypeGroupDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class BomItemPropertyTypeGroupDto extends NamedBasicEntityWithNumericIdDto implements Convertable {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/base/ComponentGroupDto.java =====\npackage com.ua.crow.plm.dto.base;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter\n@Setter\npublic class ComponentGroupDto extends NamedBasicEntityWithNumericIdDto implements Convertable {\n    private ComponentGroupDto parent;\n    private List<ComponentGroupDto> children;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/dto/FusionProjectListItem.java =====\npackage com.ua.crow.plm.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class FusionProjectListItem {\n    boolean selected;\n    String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomEngineeringBom.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(FusionBomEngineeringBomId.class)\npublic class FusionBomEngineeringBom implements Optionalable<FusionBomEngineeringBom> {\n\n    @Id\n    String fusionBomId;\n    @Id\n    String fusionBomRevId;\n    @Id\n    Long bomId;\n    @Id\n    Long bomVer;\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"fusionBomId\",referencedColumnName = \"fusionId\", updatable = false,insertable = false),\n            @JoinColumn(name = \"fusionBomRevId\",referencedColumnName = \"revisionId\", updatable = false,insertable = false)})\n    private FusionBom fusionBom;\n\n    @ManyToOne\n    @JoinColumns({@JoinColumn(name = \"bomId\",referencedColumnName = \"id\", updatable = false,insertable = false),\n            @JoinColumn(name = \"bomVer\", referencedColumnName = \"release_ver\", updatable = false,insertable = false)})\n    private BomActiveRelease engineeringBom;\n\n    @CreatedBy\n    private String creator;\n    @LastModifiedBy\n    private String modifier;\n    @CreatedDate\n    private Date createdAt;\n    @LastModifiedDate\n    private Date modifiedAt;\n    private boolean deleted;\n    private String name;\n\n\n    public FusionBomEngineeringBom(FusionBom fusionBom, BomActiveRelease engineeringBom,String commitName) {\n        this.fusionBom = fusionBom;\n        this.engineeringBom = engineeringBom;\n        this.fusionBomId = fusionBom.getFusionId();\n        this.fusionBomRevId = fusionBom.getRevisionId();\n        this.bomId = engineeringBom.getId();\n        this.bomVer = engineeringBom.getRelease_ver();\n        setName(commitName);\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionComponentRel.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(FusionBomItemRelId.class)\n@Table(name = \"fusion_bom_item_rel\")\npublic class FusionComponentRel implements Convertable {\n    @Id\n    private String fusionParentId;\n    @Id\n    private String parentRevisionId;\n    @Id\n    private String fusionChildId;\n    @Id\n    private String childRevisionId;\n    @Id\n    private String bomId;\n    @Id\n    private String bomRevisionId;\n\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)\n    @JoinColumns(value = {@JoinColumn(name = \"bomId\",referencedColumnName = \"fusionId\",insertable = false,updatable = false)\n            ,@JoinColumn(name = \"bomRevisionId\",referencedColumnName = \"revisionId\",insertable = false,updatable = false)})\n    private FusionBom bom;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns(value = {@JoinColumn(name = \"fusionParentId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false)\n            ,@JoinColumn(name = \"parentRevisionId\",referencedColumnName = \"revisionId\",insertable = false,updatable = false)})\n    private FusionComponent parent;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns(value = {@JoinColumn(name = \"fusionChildId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false)\n            ,@JoinColumn(name = \"childRevisionId\",referencedColumnName = \"revisionId\",insertable = false,updatable = false)})\n    private FusionComponent child;\n\n    private Double quantity;\n\n    @Enumerated(EnumType.STRING)\n    private RelType relType;\n\n    public void setChild(FusionComponent child) {\n        this.childRevisionId  =child.getRevisionId();\n        this.fusionChildId = child.getFusionId();\n    }\n\n    public void setParent(FusionComponent parent) {\n        fusionParentId = parent.getFusionId();\n        parentRevisionId = parent.getRevisionId();\n    }\n\n    public void setBom(FusionBom bom) {\n        this.bomId = bom.getFusionId();\n        this.bomRevisionId = bom.getRevisionId();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionComponentRel that = (FusionComponentRel) o;\n\n        return new EqualsBuilder().append(getFusionParentId(), that.getFusionParentId()).append(getParentRevisionId(), that.getParentRevisionId()).append(getFusionChildId(), that.getFusionChildId()).append(getChildRevisionId(), that.getChildRevisionId()).append(getBomId(), that.getBomId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionParentId()).append(getParentRevisionId()).append(getFusionChildId()).append(getChildRevisionId()).append(getBomId()).toHashCode();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/Material.java =====\npackage com.ua.crow.plm.database.fusion;\n\n\nimport com.ua.crow.database.models.common.basic.NamedStringIdEntity;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class Material extends NamedStringIdEntity {\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionId.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FusionId implements Serializable {\n\n    @NotNull\n    @NotEmpty\n    @Valid\n    private String fusionId;\n\n    @NotNull\n    @NotEmpty\n    @Valid\n    private String revisionId;\n\n\n    @Validated\n    public static @Valid FusionId id(@NotBlank @NotNull String fusionId, @NotBlank @NotNull String revisionId) {\n        return new FusionId(fusionId,revisionId);\n    }\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionId fusionId1 = (FusionId) o;\n\n        return new EqualsBuilder().append(getFusionId(), fusionId1.getFusionId()).append(getRevisionId(), fusionId1.getRevisionId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionId()).append(getRevisionId()).toHashCode();\n    }\n\n    @Override\n    public String toString() {\n        return \"FusionId{\" +\n                \"fusionId='\" + fusionId + '\\'' +\n                \", revisionId='\" + revisionId + '\\'' +\n                '}';\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomRel.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(FusionBomRelId.class)\n@Table(name = \"fusion_bom_rel\")\npublic class FusionBomRel implements Optionalable<FusionBomRel> {\n\n    @Id\n    private String parentBomId;\n    @Id\n    private String parentBomRevisionId;\n    @Id\n    private String childBomId;\n    @Id\n    private String childBomRevisionId;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"parentBomId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false),\n            @JoinColumn(name = \"parentBomRevisionId\", referencedColumnName = \"revisionId\", insertable = false, updatable = false)\n    })\n    private FusionBom parentBom;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"childBomId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false),\n            @JoinColumn(name = \"childBomRevisionId\", referencedColumnName = \"revisionId\", insertable = false, updatable = false)\n    })\n    private FusionBom childBom;\n\n    private Double quantity;\n\n    @Enumerated(EnumType.STRING)\n    private RelType relType = RelType.PART_OF;\n\n    public void setParentBom(FusionBom bom) {\n        this.parentBomId = bom.getFusionId();\n        this.parentBomRevisionId = bom.getRevisionId();\n        this.parentBom = bom;\n    }\n\n    public void setChildBom(FusionBom bom) {\n        this.childBomId = bom.getFusionId();\n        this.childBomRevisionId = bom.getRevisionId();\n        this.childBom = bom;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FusionBomRel that = (FusionBomRel) o;\n        return new EqualsBuilder()\n                .append(parentBomId, that.parentBomId)\n                .append(parentBomRevisionId, that.parentBomRevisionId)\n                .append(childBomId, that.childBomId)\n                .append(childBomRevisionId, that.childBomRevisionId)\n                .isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17,37)\n                .append(parentBomId)\n                .append(parentBomRevisionId)\n                .append(childBomId)\n                .append(childBomRevisionId)\n                .toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/PhysicalPropertyId.java =====\npackage com.ua.crow.plm.database.fusion;\n\n\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class PhysicalPropertyId implements Serializable {\n\n    String bodyName;\n\n    String itemId;\n\n    String itemRevId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        PhysicalPropertyId that = (PhysicalPropertyId) o;\n\n        return new EqualsBuilder().append(getBodyName(), that.getBodyName()).append(getItemId(), that.getItemId()).append(getItemRevId(), that.getItemRevId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getBodyName()).append(getItemId()).append(getItemRevId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionComponent.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Setter\n@Getter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@Table( indexes = {@Index(name = \"idx_part_number\", columnList = \"partNumber, revisionId\", unique = true)})\n@IdClass(FusionId.class)\npublic class FusionComponent implements Convertable, Optionalable<FusionComponent> {\n\n    @Id\n    private String fusionId;\n    @Id\n    private String revisionId;\n\n    @Enumerated(EnumType.STRING)\n    private ItemTypes type;\n\n    private String partName;\n\n    private String partNumber;\n\n    private String description;\n\n    private String sourceFile;\n\n    private String path;\n\n\n    @OneToMany(mappedBy = \"component\",cascade = CascadeType.ALL,fetch = FetchType.LAZY)\n    private Set<FusionPhysicalProperty> physicalProperties = new HashSet<>();\n\n    boolean root = false;\n\n    private String tenantId;\n\n    private boolean deleted;\n\n    @CreatedBy\n    private String creator = null;\n\n    @LastModifiedBy\n    private String modifier = null;\n\n    @CreatedDate\n    private Date createdAt = null;\n\n    @LastModifiedDate\n    private Date modifiedAt = null;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBom.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(FusionId.class)\npublic class FusionBom  implements Convertable, Optionalable<FusionBom> {\n\n    @Id\n    private String fusionId;\n    @Id\n    private String revisionId;\n\n    @ManyToOne\n    @JoinColumns({@JoinColumn(name = \"product_id\",referencedColumnName = \"id\"),\n            @JoinColumn(name = \"release_ver\",referencedColumnName = \"release_ver\")})\n    private ProductActiveRelease product;\n\n    @ManyToOne(fetch = FetchType.LAZY ,cascade = CascadeType.ALL)\n    @JoinColumns(value = {@JoinColumn(name = \"root_id\",referencedColumnName = \"fusionId\"),\n            @JoinColumn(name = \"rootRevId\",referencedColumnName = \"revisionId\")})\n    private FusionComponent root;\n\n    private String partNumber;\n    private String description;\n    private boolean processed;\n    @Column(name = \"effective_bom_id\")\n    private Long engineeringBomId;\n    private String documentName;\n    private String name;\n    private String version;\n    private boolean isLibraryItem;\n    private boolean isConfiguration;\n    private boolean isConfiguredDesign;\n    private boolean consistent;\n    private String tenantId;\n    private boolean deleted;\n\n    @CreatedBy\n    private String creator = null;\n    @LastModifiedBy\n    private String modifier = null;\n    @CreatedDate\n    private Date createdAt = null;\n    @LastModifiedDate\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomItemRelId.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FusionBomItemRelId implements Serializable {\n    private String fusionParentId;\n    private String parentRevisionId;\n    private String fusionChildId;\n    private String childRevisionId;\n    private String bomId;\n    private String bomRevisionId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionBomItemRelId that = (FusionBomItemRelId) o;\n\n        return new EqualsBuilder().append(getFusionParentId(), that.getFusionParentId()).append(getParentRevisionId(), that.getParentRevisionId()).append(getFusionChildId(), that.getFusionChildId()).append(getChildRevisionId(), that.getChildRevisionId()).append(getBomId(), that.getBomId()).append(getBomRevisionId(), that.getBomRevisionId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionParentId()).append(getParentRevisionId()).append(getFusionChildId()).append(getChildRevisionId()).append(getBomId()).append(getBomRevisionId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomRelId.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FusionBomRelId implements Serializable {\n    private String parentBomId;\n    private String parentBomRevisionId;\n    private String childBomId;\n    private String childBomRevisionId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FusionBomRelId that = (FusionBomRelId) o;\n        return new EqualsBuilder()\n                .append(parentBomId, that.parentBomId)\n                .append(parentBomRevisionId, that.parentBomRevisionId)\n                .append(childBomId, that.childBomId)\n                .append(childBomRevisionId, that.childBomRevisionId)\n                .isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17,37)\n                .append(parentBomId)\n                .append(parentBomRevisionId)\n                .append(childBomId)\n                .append(childBomRevisionId)\n                .toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionBomEngineeringBomId.java =====\npackage com.ua.crow.plm.database.fusion;\n\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n\n@Getter\n@Setter\n@NoArgsConstructor\npublic class FusionBomEngineeringBomId implements Serializable {\n    String fusionBomId;\n    String fusionBomRevId;\n    Long bomId;\n    Long bomVer;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FusionBomEngineeringBomId that = (FusionBomEngineeringBomId) o;\n\n        return new EqualsBuilder().append(getFusionBomId(), that.getFusionBomId()).append(getFusionBomRevId(), that.getFusionBomRevId()).append(getBomId(), that.getBomId()).append(getBomVer(), that.getBomVer()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getFusionBomId()).append(getFusionBomRevId()).append(getBomId()).append(getBomVer()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/FusionPhysicalProperty.java =====\npackage com.ua.crow.plm.database.fusion;\n\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@IdClass(PhysicalPropertyId.class)\n@Getter\n@Setter\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\npublic class FusionPhysicalProperty implements Convertable, Optionalable<FusionPhysicalProperty> {\n\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    @JoinColumns(value =\n            {@JoinColumn(name = \"itemId\", referencedColumnName = \"fusionId\", insertable = false, updatable = false),\n                    @JoinColumn(name = \"itemRevId\", referencedColumnName = \"revisionId\", insertable = false, updatable = false)})\n    FusionComponent component;\n\n    public void setComponent(@NotNull FusionComponent component) {\n        this.component = component;\n        itemId = component.getFusionId();\n        itemRevId = component.getRevisionId();\n    }\n\n    @Id\n    @EqualsAndHashCode.Include\n    String itemId;\n\n    @Id\n    @EqualsAndHashCode.Include\n    String itemRevId;\n\n    @Id\n    @EqualsAndHashCode.Include\n    String bodyName;\n\n    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\n    @JoinColumn(name = \"material\")\n    Material material;\n\n    private Double widthMm;\n\n    private Double lengthMm;\n\n    private Double heightMm;\n\n    private Double volumeCm3;\n\n    private Double areaCm2;\n\n    private Double massKg;\n\n    private Double densityKgCm2;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/fusion/RelType.java =====\npackage com.ua.crow.plm.database.fusion;\n\npublic enum RelType {\n    PART_OF,\n    COPY_OF\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/PartNumberPool.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\npublic class PartNumberPool extends NumericIdEntity {\n    Date issueDate;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/PartNumberReferenceType.java =====\npackage com.ua.crow.plm.database;\n\npublic enum PartNumberReferenceType {\n    FUSION_PART,\n    ACTIVE_RELEASE_COMPONENT,\n\n    POOL, EFFECTIVE_BOM, FUSION_BOM, NEW\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/Part.java =====\npackage com.ua.crow.plm.database;\n\npublic class Part {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ComponentGroup.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.AbstractResourceGroup;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Set;\n\n@Getter\n@Setter\n@Entity\npublic class ComponentGroup extends AbstractResourceGroup<ComponentGroup> implements Convertable {\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/PartNumberReference.java =====\npackage com.ua.crow.plm.database;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class PartNumberReference {\n    String partNumber;\n    PartNumberReferenceType referenceType;\n    String partName;\n    String description;\n    Long productId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/BomReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.EngineeringBom;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class BomReleased extends EngineeringBom<ComponentReleased, ProductReleased> implements Releasable {\n\n\n    @Id\n    Long release_ver;\n\n\n    @ManyToOne\n    @JoinColumn(name = \"release_ver\", referencedColumnName = \"id\", insertable = false,updatable = false)\n    ReleaseVersion releaseVersion;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/ProductReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.ProductBase;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ProductReleased extends ProductBase<BomReleased>\n        implements Releasable {\n\n    @Id\n    Long release_ver;\n\n    @ManyToOne\n    @JoinColumn(name = \"release_ver\",referencedColumnName = \"id\", updatable = false, insertable = false)\n    ReleaseVersion releaseVersion;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/CompPropertiesReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.ComponentProperties;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class CompPropertiesReleased extends ComponentProperties<ComponentReleased> implements Releasable {\n    @Id\n    Long release_ver;\n\n    @OneToOne\n    @JoinColumn(name = \"release_ver\",insertable = false,updatable = false)\n    ReleaseVersion releaseVersion;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/ReleasableId.java =====\npackage com.ua.crow.plm.database.released;\n\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ReleasableId implements Serializable {\n\n    private Long id;\n\n    private Long release_ver;\n\n    public static ReleasableId releasableId(Long productId){\n        return new ReleasableId(productId,0L);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ReleasableId that = (ReleasableId) o;\n\n        return new EqualsBuilder().append(getId(), that.getId()).append(getRelease_ver(), that.getRelease_ver()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getId()).append(getRelease_ver()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/released/ComponentReleased.java =====\npackage com.ua.crow.plm.database.released;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.base.Releasable;\nimport jakarta.persistence.*;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ComponentReleased extends com.ua.crow.plm.database.base.Part<CompPropertiesReleased> implements Releasable {\n\n    @Id\n    private Long release_ver;\n\n    @OneToMany(mappedBy = \"parents\", cascade = CascadeType.ALL,fetch = FetchType.LAZY)\n    Set<ComponentReleased> parts = new HashSet<>();\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({@JoinColumn(name = \"bom_id\"),@JoinColumn(name = \"parent_bom_release_ver\")})\n    BomReleased parentBom;\n\n    @ManyToMany(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinTable(name = \"component_rel_item_relationship\",\n            joinColumns = {@JoinColumn(name = \"parent_id\"),@JoinColumn(name=\"parent_release_ver\")},\n            inverseJoinColumns = {@JoinColumn(name = \"child_id\"),@JoinColumn(name=\"child_release_ver\")})\n    Set<ComponentReleased> parents = new HashSet<>();\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = \"child_bom_id\"),@JoinColumn(name = \"child_bom_release_ver\")})\n    BomReleased childBom;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumn(name = \"group_id\")\n    ComponentGroup componentGroup;\n\n    public void addChild(ComponentReleased comp){\n        parts.add(comp);\n    }\n\n    public void addParent(ComponentReleased parent) {\n        parents.add(parent);\n    }\n\n    @OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    Set<CompPropertiesReleased> properties = new HashSet<>();\n\n    public void addProperty(CompPropertiesReleased p) {\n        properties.add(p);\n    }\n    @OneToOne\n    @JoinColumn(name = \"release_ver\")\n    ReleaseVersion releaseVersion;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ReleaseVersion.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.Date;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class ReleaseVersion extends NamedBasicEntityWithNumericId {\n\n    private boolean released;\n\n    private Date releaseDate;\n\n    private String description;\n\n    @ManyToOne\n    @JoinColumn(name = \"prev_ver_id\")\n    private ReleaseVersion previous;\n\n    private Double ver;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/BomItemPropertyTypeGroup.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class BomItemPropertyTypeGroup extends NamedBasicEntityWithNumericId implements Convertable {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ItemTypes.java =====\npackage com.ua.crow.plm.database;\n\npublic enum ItemTypes {\n    COMPONENT,\n    PART,\n    BOM,\n    FASTENER,\n    THRDPARTY,\n    NONE\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/ItemTypeNameMapping.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class ItemTypeNameMapping extends NumericIdEntity implements Convertable {\n\n    @Enumerated(EnumType.STRING)\n    @Column(nullable = false)\n    private ItemTypes type;\n\n    @Column(nullable = false)\n    private String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/WithdrawAlgorythm.java =====\npackage com.ua.crow.plm.database;\n\npublic enum WithdrawAlgorythm {\n    AMOUNT,\n    LENGHT,\n    SQUARE,\n    WEIGHT,\n    VOLUME\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/BomComponentRelId.java =====\npackage com.ua.crow.plm.database.active;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class BomComponentRelId implements Serializable {\n\n    private Long parentBomId;\n    private Long parentBomReleaseVer;\n    private Long childId;\n    private Long childReleaseVer;\n    private Long completeSetId;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentRel.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.BaseRel;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(ComponentPartRelationshipId.class)\n@Table(name = \"component_part_relationship\")\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\npublic class ComponentRel extends BaseRel implements Convertable {\n\n    @Id\n\n    private Long parentId;\n\n    @Id\n\n    private Long parentReleaseVer;\n\n    @Id\n\n    private Long bomId;\n\n    @Id\n\n    private Long bomVersion;\n\n\n    @Id\n\n    private Long completeSetId;\n\n\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"bomId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n            @JoinColumn(name = \"bomVersion\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private BomActiveRelease bom;\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"completeSetId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n    })\n    private CompleteSet completeSet;\n\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = \"parentId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n            @JoinColumn(name = \"parentReleaseVer\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private ComponentActiveRelease parent;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ComponentRel that = (ComponentRel) o;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(getParentId(), that.getParentId()).append(getParentReleaseVer(), that.getParentReleaseVer()).append(getBomId(), that.getBomId()).append(getBomVersion(), that.getBomVersion()).append(getCompleteSetId(), that.getCompleteSetId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(getParentId()).append(getParentReleaseVer()).append(getBomId()).append(getBomVersion()).append(getCompleteSetId()).toHashCode();\n    }\n\n\n    // Constructors, getters, and setters are handled by Lombok\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentActiveRelease.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.*;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ComponentActiveRelease extends com.ua.crow.plm.database.base.Part<ComponentProperty>\n        implements Convertable {\n    @Id\n    private Long release_ver = 0L;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({@JoinColumn(name = \"bom_id\"),@JoinColumn(name = \"parent_bom_release_ver\")})\n    private BomActiveRelease parentBom;\n\n    @OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Set<ComponentRel> parts = new HashSet<>();\n\n    @OneToMany(mappedBy = \"child\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Set<ComponentRel> parents = new HashSet<>();\n\n    private boolean root;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = \"child_bom_id\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"child_bom_release_ver\",referencedColumnName = \"release_ver\")})\n    private BomActiveRelease childBom;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumn(name = \"group_id\")\n    private ComponentGroup componentGroup;\n\n    @OneToMany(mappedBy = \"item\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    Set<ComponentProperty> properties = new HashSet<>();\n\n    public void addProperty(ComponentProperty p) {\n        properties.add(p);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ComponentActiveRelease that = (ComponentActiveRelease) o;\n\n        if(that.getId()==null && this.getId()==null||that.getId()==0&&this.getId()==0) return false;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(release_ver, that.release_ver).append(this.getId(),that.getId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(release_ver).append(this.getId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/CompleteSet.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class CompleteSet extends NamedBasicEntityWithNumericId {\n    @ManyToOne\n    ProductActiveRelease product;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentProperty.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.base.ComponentProperties;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EntityListeners;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.IdClass;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class ComponentProperty extends ComponentProperties<ComponentActiveRelease> implements Convertable {\n\n    @Id\n    private Long release_ver = 0L;\n\n    public ComponentProperty(String stringValue, ComponentActiveRelease item, BomItemPropertyType propertyType) {\n        super(stringValue, item, propertyType);\n    }\n\n    public ComponentProperty(Double numericValue, ComponentActiveRelease item, BomItemPropertyType propertyType) {\n        super(numericValue, item, propertyType);\n    }\n\n    public ComponentProperty() {\n    }\n\n    public ComponentProperty(Double numericValue, ComponentActiveRelease item, BomItemPropertyType propertyType, String bodyName) {\n        super(numericValue, item,propertyType,bodyName);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ProductActiveRelease.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.ProductBase;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\n@Table(uniqueConstraints = { @UniqueConstraint(columnNames = {\"name\"}) })\npublic class ProductActiveRelease extends ProductBase<BomActiveRelease> implements Convertable {\n\n    public ProductActiveRelease() {\n        super();\n        super.setRelease_ver(0L);\n    }\n\n    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @JoinColumn(name = \"default_complete_set\",referencedColumnName = \"id\")\n    private CompleteSet defaultCompleteSet;\n\n    @OneToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY,mappedBy = \"product\", orphanRemoval = true)\n    Set<CompleteSet> completeSets = new HashSet<>();\n\n    @Override\n    public void setRelease_ver(Long releaseVer) {\n        throw new UnsupportedOperationException(\"Release version cannot be set for active product release. It is always 0.\");\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/BomComponentRel.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.BaseRel;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.service.conversion.Optionalable;\nimport jakarta.persistence.*;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n@Getter\n@Setter\n@Entity\n@IdClass(BomComponentRelId.class)\n\npublic class BomComponentRel extends BaseRel implements Convertable, Optionalable<BomComponentRel> {\n\n    @Id\n    private Long parentBomId;\n\n    @Id\n    private Long parentBomReleaseVer;\n\n    @Id\n    private Long completeSetId;\n\n\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n        @JoinColumn(name = \"parentBomId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n        @JoinColumn(name = \"parentBomReleaseVer\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private BomActiveRelease parentBom;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({@JoinColumn(name = \"completeSetId\", referencedColumnName = \"id\", insertable = false, updatable = false)})\n    private CompleteSet completeSet;\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        BomComponentRel that = (BomComponentRel) o;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(getParentBomId(), that.getParentBomId()).append(getParentBomReleaseVer(), that.getParentBomReleaseVer()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(getParentBomId()).append(getParentBomReleaseVer()).toHashCode();\n    }\n\n\n\n    // Constructors, getters, and setters are handled by Lombok\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/BomActiveRelease.java =====\npackage com.ua.crow.plm.database.active;\n\nimport com.ua.crow.plm.database.base.EngineeringBom;\nimport com.ua.crow.plm.database.fusion.FusionBomEngineeringBom;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Getter\n@Setter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@IdClass(ReleasableId.class)\npublic class BomActiveRelease extends EngineeringBom<ComponentActiveRelease,ProductActiveRelease> implements Convertable {\n    @Id\n    private Long release_ver = 0L;\n\n    @OneToMany(mappedBy = \"engineeringBom\", cascade = CascadeType.ALL, orphanRemoval = true)\n    private Set<FusionBomEngineeringBom> fusionBoms = new HashSet<>();\n\n    @OneToMany(mappedBy = \"parentBom\", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n    private Set<BomComponentRel> children = new HashSet<>();\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        BomActiveRelease that = (BomActiveRelease) o;\n\n        if(that.getId()==0&&this.getId()==0||that.getId()==null && this.getId()==null) return false;\n\n        return new EqualsBuilder().appendSuper(super.equals(o)).append(release_ver, that.release_ver).append(this.getId(),that.getId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).appendSuper(super.hashCode()).append(release_ver).append(this.getId()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/active/ComponentPartRelationshipId.java =====\npackage com.ua.crow.plm.database.active;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.NoArgsConstructor;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ComponentPartRelationshipId implements Serializable {\n\n    private Long parentId;\n    private Long parentReleaseVer;\n    private Long childId;\n    private Long childReleaseVer;\n    private Long bomId;\n    private Long bomVersion;\n    private Long completeSetId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ComponentPartRelationshipId that = (ComponentPartRelationshipId) o;\n\n        return new EqualsBuilder().append(getParentId(), that.getParentId()).append(getParentReleaseVer(), that.getParentReleaseVer()).append(getChildId(), that.getChildId()).append(getChildReleaseVer(), that.getChildReleaseVer()).append(getBomId(), that.getBomId()).append(getBomVersion(), that.getBomVersion()).append(getCompleteSetId(), that.getCompleteSetId()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getParentId()).append(getParentReleaseVer()).append(getChildId()).append(getChildReleaseVer()).append(getBomId()).append(getBomVersion()).append(getCompleteSetId()).toHashCode();\n    }\n\n\n    // Constructors, getters, setters, equals, and hashCode methods\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/BomItemPropertyType.java =====\npackage com.ua.crow.plm.database;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class BomItemPropertyType extends NamedBasicEntityWithNumericId implements Convertable {\n\n    @ManyToOne\n    @JoinColumn(name = \"unit_id\")\n    private Units units;\n\n    @ManyToOne\n    @JoinColumn(name = \"group_id\")\n    private BomItemPropertyTypeGroup group;\n\n    @Enumerated(EnumType.STRING)\n    private DataTypes dataType;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionBomRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n\npublic interface FusionBomRepository extends JpaRepository<FusionBom, FusionId> {\n    @Query(\"select t from FusionBom t where t.product.id = ?1 and t.product.release_ver = ?2 and t.deleted = false\")\n    List<FusionBom> findByProductId(Long id, Long release_ver);\n    @Query(\"\"\"\n    select t from FusionBom t\n    where t.product.id = :productId\n      and t.product.release_ver = :releaseVersion\n      and t.deleted = false\n      and t.consistent = true\n\"\"\")\n    List<FusionBom> findByProductIdAndReleaseVerConsistentNotDeleted(\n            @Param(\"productId\") Long productId,\n            @Param(\"releaseVersion\") Long releaseVersion);\n    @Query(\"select t from FusionBom t where t.product.id = ?1 and t.product.release_ver = ?2 and t.deleted = false\")\n    Stream<FusionBom> findByProductId(Long id, Long release_ver, Pageable pageable);\n    Stream<FusionBom> findByPartNumber(String partNumber);\n\n    @Query(\"select t from FusionBom t where t.deleted = false and t.consistent= true\")\n    Stream<FusionBom> findNotDeleted();\n\n    Optional<FusionBom> findByFusionId(String fusionId);\n    @Query(\"select t from FusionBom t where t.product.id = :productId and t.product.release_ver = :releaseVer and t.deleted = false and t.consistent = true and t.engineeringBomId is null\")\n    List<FusionBom> findUnprocessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"select t from FusionBom t where t.product.id = :productId and t.product.release_ver = :releaseVer and t.deleted = false and t.consistent = true and t.engineeringBomId is not null\")\n    List<FusionBom> findProcessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.product.id = :productId\n              and b.product.release_ver = :releaseVer\n              and b.deleted = false\n              and b.consistent = true\n              and b.engineeringBomId is null\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    List<FusionBom> findRootUnprocessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.product.id = :productId\n              and b.product.release_ver = :releaseVer\n              and b.deleted = false\n              and b.consistent = true\n              and b.engineeringBomId is not null\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    List<FusionBom> findRootProcessedByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.product.id = :productId\n              and b.product.release_ver = :releaseVer\n              and b.deleted = false\n              and b.consistent = true\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    List<FusionBom> findRootByProductId(@Param(\"productId\") Long productId, @Param(\"releaseVer\") Long releaseVer);\n\n    @Query(\"\"\"\n            select b from FusionBom b\n            where b.deleted = false\n              and b.consistent = true\n              and not exists (\n                  select 1 from FusionBomRel r\n                  where r.childBomId = b.fusionId\n                    and r.childBomRevisionId = b.revisionId\n              )\n            \"\"\")\n    Stream<FusionBom> findRootNotDeleted();\n\n    @Query(\"select b from FusionBom b where b.root.fusionId = :rootId and b.root.revisionId = :rootRev\")\n    Optional<FusionBom> findByRoot(@Param(\"rootId\") String rootId,@Param(\"rootRev\") String rootRev);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ActiveReleaseProductRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface ActiveReleaseProductRepository extends JpaRepository<ProductActiveRelease, ReleasableId> {\n    List<ProductActiveRelease> findByDeletedFalse();\n\n    Optional<ProductActiveRelease> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ItemTypeNameMappingRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport org.springframework.data.repository.CrudRepository;\nimport java.util.Optional;\n\npublic interface ItemTypeNameMappingRepository extends CrudRepository<ItemTypeNameMapping, Long> {\n    Optional<ItemTypeNameMapping> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/EngineeringBomItemPropertyTypeRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface EngineeringBomItemPropertyTypeRepository extends JpaRepository<BomItemPropertyType, Long> {\n    Optional<BomItemPropertyType> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/MaterialRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.Material;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface MaterialRepository extends JpaRepository<Material,String> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ReleasedProductRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.released.ProductReleased;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface ReleasedProductRepository extends JpaRepository<ProductReleased, ReleasableId> {\n    List<ProductActiveRelease> findByDeleted(boolean deleated);\n    @Query(\"select t from ProductReleased t where t.id = ?1 AND t.releaseVersion.deleted = ?2 AND t.deleted = ?2 \")\n    List<ProductReleased> findAllProductReleases(Long id, boolean deleted);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionComponentRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface FusionComponentRepository extends JpaRepository<FusionComponent, FusionId> {\n\n    @Query(\"select t from FusionComponent t where  t.id = ?1 and root=true\")\n    Optional<FusionComponent> getRootById(Long id);\n\n    @Query(\"SELECT f.child FROM FusionComponentRel f WHERE f.parent.id = :parentId AND f.bom.id = :bomId\")\n    Stream<FusionComponent> findChildrenForBom(@Param(\"parentId\") Long parentId, @Param(\"bomId\") Long bomId);\n\n\n    Optional<FusionComponent> findByPartNumberAndRevisionId(String partNumber, String revisionId);\n\n\n    Stream<FusionComponent> findByPartNumber(String partNumber);\n\n    @Query(\"SELECT f FROM FusionComponent f WHERE f.partNumber = :partNumber order by createdAt DESC limit 1\")\n    Optional<FusionComponent> findLastByPartNumber(String partNumber);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionBomRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.FusionBomRel;\nimport com.ua.crow.plm.database.fusion.FusionBomRelId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface FusionBomRelRepository extends JpaRepository<FusionBomRel, FusionBomRelId> {\n    @Query(\"\"\"\n            SELECT r\n            FROM FusionBomRel r\n            WHERE r.parentBomId = :parentId\n              AND r.parentBomRevisionId = :parentRev\n              AND r.childBomId = :childId\n              AND r.childBomRevisionId = :childRev\n              AND r.relType = com.ua.crow.plm.database.fusion.RelType.PART_OF\n            \"\"\")\n    Optional<FusionBomRel> findRelation(@Param(\"parentId\") String parentId,\n                                        @Param(\"parentRev\") String parentRev,\n                                        @Param(\"childId\") String childId,\n                                        @Param(\"childRev\") String childRev);\n\n    @Query(\"\"\"\n            SELECT r\n            FROM FusionBomRel r\n            WHERE r.parentBomId = :parentId\n              AND r.parentBomRevisionId = :parentRev\n              AND r.relType = com.ua.crow.plm.database.fusion.RelType.PART_OF\n            \"\"\")\n    java.util.List<FusionBomRel> findChildren(@Param(\"parentId\") String parentId,\n                                              @Param(\"parentRev\") String parentRev);\n\n    @Query(\"\"\"\n            SELECT r\n            FROM FusionBomRel r\n            WHERE r.childBomId = :childId\n              AND r.childBomRevisionId = :childRev\n              AND r.relType = com.ua.crow.plm.database.fusion.RelType.PART_OF\n            \"\"\")\n    java.util.List<FusionBomRel> findParents(@Param(\"childId\") String childId,\n                                             @Param(\"childRev\") String childRev);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/EngineeringBomRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface EngineeringBomRepository extends JpaRepository<BomActiveRelease, ReleasableId> {\n\n    Stream<BomActiveRelease> findByPartNumber(String partNumber);\n\n    @Query(\"select t from BomActiveRelease t \" +\n            \"join ProductActiveRelease p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false and t.isRoot = true\")\n    List<BomActiveRelease> findRootBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomActiveRelease t \" +\n            \"join ProductActiveRelease p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    List<BomActiveRelease> findBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomActiveRelease t \" +\n            \"join ProductActiveRelease p on p.id = t.parentProduct.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    Stream<BomActiveRelease> findRootBomsByProductId(Long productId, Long releaseVer);\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomReleasedRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.released.BomReleased;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface BomReleasedRepository extends JpaRepository<BomReleased, ReleasableId> {\n\n    @Query(\"select t from BomReleased t \" +\n            \"join ProductReleased p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false and t.isRoot = true\")\n    List<BomReleased> findRootBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomReleased t \" +\n            \"join ProductReleased p on p.id = t.product.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    List<BomReleased> findBomsByProductId(Long productId, Long releaseVer, Pageable pageable);\n\n    @Query(\"select t from BomReleased t \" +\n            \"join ProductReleased p on p.id = t.parentProduct.id \" +\n            \"where p.id = ?1 and p.release_ver = ?2 and t.deleted = false\")\n    Stream<BomReleased> findRootBomsByProductId(Long productId, Long releaseVer);\n\n    @Query(\"select t from BomReleased t where t.id = ?1 and t.releaseVersion.deleted = ?2 and t.deleted = ?2\")\n    List<BomReleased> findAllBomReleases(Long bomId, boolean deleted);\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/PartNumberPoolRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.PartNumberPool;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface PartNumberPoolRepository extends JpaRepository<PartNumberPool,Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/CompleteSetRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.CompleteSet;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CompleteSetRepository extends JpaRepository<CompleteSet,Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/EngineeringBomItemPropertyTypeGroupRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface EngineeringBomItemPropertyTypeGroupRepository extends JpaRepository<BomItemPropertyTypeGroup, Long> {\n    Optional<BomItemPropertyTypeGroup> findByName(String name);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/FusionComponentRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.fusion.FusionComponentRel;\nimport com.ua.crow.plm.database.fusion.RelType;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.stream.Stream;\n\n@Repository\npublic interface FusionComponentRelRepository extends JpaRepository<FusionComponentRel, Long> {\n    @Query(\"\"\"\n            SELECT f\n            FROM FusionComponentRel f\n            WHERE f.parent.fusionId = :parentId\n              AND f.parent.revisionId = :revisionId\n              AND f.bom.fusionId = :bomId\n              AND f.bom.revisionId = :bomRevId\n              AND f.relType IS NULL\n            \"\"\")\n    Stream<FusionComponentRel> findChildrenForBom(@Param(\"parentId\") String parentId,@Param(\"revisionId\") String revisionId, @Param(\"bomId\") String bomId,@Param(\"bomRevId\") String bomRevId);\n\n    @Query(\"SELECT f FROM FusionComponentRel f \" +\n            \"WHERE f.parent.fusionId = :parentId \" +\n            \"AND f.parent.revisionId = :revisionId \" +\n            \"AND f.bom.fusionId = :bomId \" +\n            \"AND f.bom.revisionId = :bomRevId \" +\n            \"AND f.relType IN (:relTypes)\")\n    Stream<FusionComponentRel> findChildrenForBomWithRelTypes(\n            @Param(\"parentId\") String parentId,\n            @Param(\"revisionId\") String revisionId,\n            @Param(\"bomId\") String bomId,\n            @Param(\"bomRevId\") String bomRevId,\n            @Param(\"relTypes\") RelType... relTypes\n    );\n\n    @Modifying\n    @Query(\"DELETE FROM FusionComponentRel f WHERE f.bomId = :id AND f.bomRevisionId = :revisionId\")\n    void hardDeleteBomRelations(String id,String revisionId);\n\n    @Query(\"\"\"\n            SELECT f\n            FROM FusionComponentRel f\n            WHERE f.fusionChildId = :childId\n              AND f.childRevisionId = :childRev\n              AND f.relType IS NULL\n            \"\"\")\n    Stream<FusionComponentRel> findByChild(@Param(\"childId\") String childId,@Param(\"childRev\") String childRev);\n\n    @Query(\"\"\"\n            SELECT f\n            FROM FusionComponentRel f\n            WHERE f.fusionParentId = :parentId\n              AND f.parentRevisionId = :parentRev\n              AND f.relType IS NULL\n            \"\"\")\n    Stream<FusionComponentRel> findByParent(@Param(\"parentId\") String parentId,\n                                            @Param(\"parentRev\") String parentRev);\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ReleaseVersionRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface ReleaseVersionRepository extends JpaRepository<ReleaseVersion, ReleasableId> {\n\n    List<ReleaseVersion> findByDeleted(boolean deleted);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Repository\npublic interface ComponentRepository extends JpaRepository<ComponentActiveRelease, ReleasableId> {\n    Stream<ComponentActiveRelease> findByPartNumber(String partNumber);\n\n    @Query(\"select t from ComponentActiveRelease t where t.parentBom.id = ?2 and t.partNumber = ?1 and t.deleted = false\")\n    Optional<ComponentActiveRelease> findByPartNumberAndBomId(String partNumber, Long id);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomItemPropertyTypeGroupRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BomItemPropertyTypeGroupRepository extends JpaRepository<BomItemPropertyTypeGroup, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentGroupRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ComponentGroupRepository extends JpaRepository<ComponentGroup, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentReleasedRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.released.ComponentReleased;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface ComponentReleasedRepository extends JpaRepository<ComponentReleased, ReleasableId> {\n\n    @Query(\"select c from ComponentReleased c where c.parentBom.id = :bomId and c.parentBom.release_ver = :release\")\n    List<ComponentReleased> findByParentBom(@Param(\"bomId\") Long bomId, @Param(\"release\") Long release);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomItemPropertyTypeRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BomItemPropertyTypeRepository extends JpaRepository<BomItemPropertyType, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/BomRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.database.active.BomComponentRelId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BomRelRepository extends JpaRepository<BomComponentRel, BomComponentRelId> {\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentPropertiesRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface ComponentPropertiesRepository extends JpaRepository<ComponentProperty, ReleasableId> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/repo/ComponentRelRepository.java =====\npackage com.ua.crow.plm.database.repo;\n\nimport com.ua.crow.plm.database.active.ComponentPartRelationshipId;\nimport com.ua.crow.plm.database.active.ComponentRel;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ComponentRelRepository extends JpaRepository<ComponentRel, ComponentPartRelationshipId> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/Part.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.database.ItemTypes;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotBlank;\nimport lombok.Getter;\nimport lombok.Setter;\n\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class Part<T extends ComponentProperties> extends NamedBasicEntityWithNumericId {\n\n\n    //Generic fields\n    @Enumerated(EnumType.STRING)\n    ItemTypes itemType;\n\n\n\n    private String description;\n\n\n    @NotBlank(message = \"Part number is missing\")\n    private String partNumber;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumn(name = \"resource_item_id\", referencedColumnName = \"id\")\n    private ResourceItem resourceItem;\n\n    //If PART or 3RDPARTY\n\n\n    private String fusionId;\n\n    private String fusionRevisionId;\n\n    private String fusionPath;\n\n \n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/Releasable.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\n\npublic interface Releasable {\n\n        ReleaseVersion getReleaseVersion();\n\n        void setReleaseVersion(ReleaseVersion releaseVersion);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/ProductBase.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.service.product.ProductAttachmentService;\nimport com.ua.crow.plm.service.product.ProductAttachmentServiceProvider;\nimport com.ua.crow.util.SpringContext;\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.util.Set;\n\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@With\n@MappedSuperclass\npublic class ProductBase<T extends EngineeringBom> extends NamedBasicEntityWithNumericId {\n\n    @Id\n    Long release_ver;\n\n    @OneToMany(mappedBy = \"product\",cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set<T> engineeringBoms;\n\n    @Transient\n    private ProductAttachmentService attachmentService;\n\n    public ProductAttachmentService getAttachmentService() {\n        if (attachmentService == null) {\n            attachmentService = SpringContext.getBean(ProductAttachmentServiceProvider.class).create(this);\n        }\n        return attachmentService;\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/ComponentProperties.java =====\npackage com.ua.crow.plm.database.base;\n\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class ComponentProperties<T extends Part> extends BasicEntityWithNumericId  {\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({ @JoinColumn(name = \"component_id\",referencedColumnName = \"id\"),@JoinColumn(name = \"comp_release_ver\",referencedColumnName = \"release_ver\")})\n    private T item;\n\n    private String stringValue;\n\n    private Double numericValue;\n\n    private String solidBodyName;\n\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)\n    @JoinColumn(name = \"type_id\")\n    BomItemPropertyType propertyType;\n\n    public ComponentProperties( String stringValue,T item, BomItemPropertyType propertyType,String solidBodyName) {\n        this.item = item;\n        this.stringValue = stringValue;\n        this.solidBodyName = solidBodyName;\n        this.propertyType = propertyType;\n    }\n\n    public ComponentProperties( Double numericValue,T item, BomItemPropertyType propertyType, String solidBodyName) {\n        this.item = item;\n        this.numericValue = numericValue;\n        this.solidBodyName = solidBodyName;\n        this.propertyType = propertyType;\n    }\n\n    public ComponentProperties(String stringValue, T item, BomItemPropertyType propertyType) {\n        this.item = item;\n        this.stringValue = stringValue;\n        this.propertyType = propertyType;\n    }\n\n\n    public ComponentProperties(Double numericValue, T item, BomItemPropertyType propertyType) {\n        this.item = item;\n        this.numericValue = numericValue;\n        this.propertyType = propertyType;\n    }\n\n    public ComponentProperties() {\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/EngineeringBom.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@MappedSuperclass\n@Getter\n@Setter\npublic class EngineeringBom<T extends Part,V extends ProductBase>  extends NamedBasicEntityWithNumericId {\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"product\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"product_release_ver\",referencedColumnName = \"release_ver\")})\n    private V product;\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"parent_product\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"parent_product_release_ver\",referencedColumnName = \"release_ver\")})\n    private V parentProduct;\n\n    @ManyToOne\n    @JoinColumns(value = {@JoinColumn(name = \"parent_comp\", referencedColumnName = \"id\"),\n            @JoinColumn(name = \"parent_component_release_ver\",referencedColumnName = \"release_ver\")})\n    private T parentComponent;\n\n    private String description;\n    private String partNumber;\n    private String fusionVersion;\n    private String fusionId;\n    private boolean isLibraryItem;\n    private String fusionRevisionId;\n    private boolean isConfiguration;\n    private boolean isConfiguredDesign;\n    private boolean consistent;\n    private boolean isRoot;\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/database/base/BaseRel.java =====\npackage com.ua.crow.plm.database.base;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\n\n\n@Getter\n@Setter\n@MappedSuperclass\npublic class BaseRel {\n    private Double quantity;\n    @Id\n    private Long childId;\n\n    @ManyToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = \"childId\", referencedColumnName = \"id\", insertable = false, updatable = false),\n            @JoinColumn(name = \"childReleaseVer\", referencedColumnName = \"release_ver\", insertable = false, updatable = false)\n    })\n    private ComponentActiveRelease child;\n\n\n    private Long childReleaseVer;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        BaseRel baseRel = (BaseRel) o;\n\n        return new EqualsBuilder().append(getChildId(), baseRel.getChildId()).append(getChildReleaseVer(), baseRel.getChildReleaseVer()).isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37).append(getChildId()).append(getChildReleaseVer()).toHashCode();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionBomItemToPartNumReference.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomItemToPartNumReference implements Converter<FusionComponent,PartNumberReference> {\n\n    @Override\n    public PartNumberReference convert(FusionComponent item) {\n        PartNumberReference partNumberReference = new PartNumberReference();\n        partNumberReference.setReferenceType(PartNumberReferenceType.FUSION_PART);\n        partNumberReference.setPartName(item.getPartName());\n        partNumberReference.setPartNumber(item.getPartNumber());\n        partNumberReference.setDescription(item.getDescription());\n        return partNumberReference;    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionBomItemToBomActiveRelease.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomItemToBomActiveRelease implements Converter<FusionComponent, BomActiveRelease> {\n\n    @Override\n    public BomActiveRelease convert(FusionComponent source) {\n        BomActiveRelease bom = new BomActiveRelease();\n        bom.setRelease_ver(0L);\n        bom.setDescription(source.getDescription());\n        bom.setPartNumber(bom.getPartNumber());\n        bom.setName(source.getPartName());\n        bom.setFusionId(source.getFusionId());\n        bom.setFusionRevisionId(source.getRevisionId());\n        return bom;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionCompToDtoFlat.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.converters.mappers.FusionBomItemMapper;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionCompToDtoFlat implements Converter<FusionComponent, FusionComponentDto> {\n    @Autowired\n    FusionBomItemMapper mapper;\n    @Override\n    public FusionComponentDto convert(FusionComponent source) {\n        return mapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionCompToComponent.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.service.PropertyTypeProvider;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\n\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicReference;\n\n@Component\npublic class FusionCompToComponent implements Converter<FusionComponent, ComponentActiveRelease> {\n\n    private final PropertyTypeProvider propertyTypeProvider;\n\n    private BomItemPropertyType widthMm;\n    private BomItemPropertyType lengthMm;\n    private BomItemPropertyType heightMm;\n    private BomItemPropertyType volumeCm3;\n    private BomItemPropertyType areaCm2;\n    private BomItemPropertyType massKg;\n    private BomItemPropertyType densityKgCm3;\n\n    @Autowired\n    public FusionCompToComponent(@Lazy PropertyTypeProvider propertyTypeProvider) {\n        this.propertyTypeProvider = propertyTypeProvider;\n    }\n\n    private boolean initialized = false;\n\n    private void initPropertyTypes() {\n        widthMm = propertyTypeProvider.get(\"widthMm\");\n        lengthMm = propertyTypeProvider.get(\"lengthMm\");\n        heightMm = propertyTypeProvider.get(\"heightMm\");\n        volumeCm3 = propertyTypeProvider.get(\"volumeCm3\");\n        areaCm2 = propertyTypeProvider.get(\"areaCm2\");\n        massKg = propertyTypeProvider.get(\"massKg\");\n        densityKgCm3 = propertyTypeProvider.get(\"densityKgCm3\");\n        initialized = true;\n    }\n\n\n\n\n    @Override\n    public ComponentActiveRelease convert(FusionComponent fusionComponent) {\n        if (!initialized) {\n            initPropertyTypes();\n        }\n        ComponentActiveRelease car = convert_(fusionComponent, Optional.empty());\n        Set<FusionPhysicalProperty> props = fusionComponent.getPhysicalProperties();\n        AtomicReference<Double> totalArea = new AtomicReference<>(0d);\n        AtomicReference<Double> totalMass = new AtomicReference<>(0d);\n        AtomicReference<Double> totalVolume = new AtomicReference<>(0d);\n        props.stream().findFirst().ifPresent(p -> {\n            car.addProperty(new ComponentProperty(p.getAreaCm2(), car, areaCm2,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getDensityKgCm2(), car, densityKgCm3,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getMassKg(), car, massKg,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getLengthMm(), car, lengthMm,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getHeightMm(), car, heightMm,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getWidthMm(), car, widthMm,p.getBodyName()));\n            car.addProperty(new ComponentProperty(p.getVolumeCm3(), car, volumeCm3,p.getBodyName()));\n            totalMass.updateAndGet(v -> v + p.getMassKg());\n            totalVolume.updateAndGet(v -> v + p.getVolumeCm3());\n            totalArea.updateAndGet(v -> v + p.getAreaCm2());\n        });\n        car.addProperty(new ComponentProperty(totalArea.get(), car, areaCm2));\n        car.addProperty(new ComponentProperty(totalMass.get(), car, massKg));\n        car.addProperty(new ComponentProperty(totalVolume.get(), car, volumeCm3));\n        return car;\n    }\n\n    private boolean isPartOrComponent(ComponentActiveRelease car) {\n        return car.getItemType() == ItemTypes.PART || car.getItemType() == ItemTypes.COMPONENT;\n    }\n\n    private ComponentActiveRelease convert_(FusionComponent fusionComponent, Optional<String> name) {\n        ComponentActiveRelease car = new ComponentActiveRelease();\n        car.setPartNumber(fusionComponent.getPartNumber());\n        car.setDescription(fusionComponent.getDescription());\n        car.setName(name.orElse(fusionComponent.getPartName()));\n        car.setItemType(fusionComponent.getType());\n        car.setFusionId(fusionComponent.getFusionId());\n        car.setFusionRevisionId(fusionComponent.getRevisionId());\n        car.setFusionPath(fusionComponent.getPath());\n        return car;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/ComponentActiveReleaseDtoToFusionComponentDto.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n/**\n * Converter from {@link ComponentActiveReleaseDto} to {@link FusionComponentDto}.\n * This is used when merging Engineering BOM items into a Fusion BOM tree.\n */\n@Component\npublic class ComponentActiveReleaseDtoToFusionComponentDto implements Converter<ComponentActiveReleaseDto, FusionComponentDto> {\n    @Override\n    public FusionComponentDto convert(ComponentActiveReleaseDto source) {\n        if (source == null) {\n            return null;\n        }\n        FusionComponentDto target = new FusionComponentDto();\n        target.setPartName(source.getName());\n        target.setDescription(source.getDescription());\n        target.setPartNumber(source.getPartNumber());\n        target.setQuantity(source.getQuantity());\n        if (source.getItemType() != null) {\n            try {\n                target.setType(ItemTypes.valueOf(source.getItemType()));\n            } catch (IllegalArgumentException ignore) {\n                // Unknown type string; leave type unset\n            }\n        }\n        if (source.getParts() != null) {\n            for (ComponentActiveReleaseDto child : source.getParts()) {\n                target.addChild(convert(child));\n            }\n        }\n        return target;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionCompDtoToPojo.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.converters.mappers.BodyMapper;\nimport com.ua.crow.plm.converters.mappers.FusionBomItemMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionCompDtoToPojo implements Converter<FusionComponentDto, FusionComponent> {\n    @Autowired\n    FusionBomItemMapper mapper;\n    @Autowired\n    BodyMapper bodyMapper;\n\n\n    @Override\n    public FusionComponent convert(FusionComponentDto dto) {\n        FusionComponent item = mapper.toFusionBom(dto);\n\n        if (dto.getBodies() != null) {\n            for (Body body : dto.getBodies()) {\n                FusionPhysicalProperty bodyPojo = bodyMapper.toPojo(body);\n                bodyPojo.setComponent(item);\n                item.getPhysicalProperties().add(bodyPojo);\n            }\n        }\n        return item;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbomitem/FusionItemPropertyToDto.java =====\npackage com.ua.crow.plm.converters.fusionbomitem;\n\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionItemPropertyToDto implements Converter<FusionPhysicalProperty, Body> {\n    @Override\n    public Body convert(FusionPhysicalProperty source) {\n        Body body = new Body();\n        BeanUtils.copyProperties(source, body);\n        return body;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/settings/ItemTypeNameMappingDtoToEntity.java =====\npackage com.ua.crow.plm.converters.settings;\n\nimport com.ua.crow.plm.converters.mappers.ItemTypeNameMappingMapper;\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ItemTypeNameMappingDtoToEntity implements Converter<ItemTypeNameMappingDto, ItemTypeNameMapping> {\n\n    @Autowired\n    private ItemTypeNameMappingMapper mapper;\n\n    @Override\n    public ItemTypeNameMapping convert(ItemTypeNameMappingDto source) {\n        return mapper.toEntity(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/settings/ItemTypeNameMappingToDto.java =====\npackage com.ua.crow.plm.converters.settings;\n\nimport com.ua.crow.plm.converters.mappers.ItemTypeNameMappingMapper;\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ItemTypeNameMappingToDto implements Converter<ItemTypeNameMapping, ItemTypeNameMappingDto> {\n\n    @Autowired\n    private ItemTypeNameMappingMapper mapper;\n\n    @Override\n    public ItemTypeNameMappingDto convert(ItemTypeNameMapping source) {\n        return mapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/EngineeringBomWoChildrenToDto.java =====\npackage com.ua.crow.plm.converters;\n\nimport com.ua.crow.plm.converters.mappers.FullBomMapper;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EngineeringBomWoChildrenToDto implements Converter<BomActiveRelease, EngineeringBomWoChildren> {\n\n    @Autowired\n    FullBomMapper mapper;\n    @Override\n    public EngineeringBomWoChildren convert(BomActiveRelease source) {\n        EngineeringBomWoChildren dto = mapper.toDtoWoChildren(source);\n\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/BomActiveReleaseToDto.java =====\npackage com.ua.crow.plm.converters;\n\nimport com.ua.crow.plm.converters.mappers.FullBomMapper;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Component\npublic class BomActiveReleaseToDto implements Converter<BomActiveRelease, BomActiveReleaseDto> {\n    @Autowired\n    FullBomMapper mapper;\n\n\n    @Override\n    public BomActiveReleaseDto convert(BomActiveRelease source) {\n        Set<BomComponentRel> children = source.getChildren();\n        BomActiveReleaseDto dto = mapper.toDto(source);\n        HashSet<ComponentActiveReleaseDto> childrenDto = new HashSet<>();\n        dto.setChildren(childrenDto);\n        if (children != null) {\n            children.forEach(c -> childrenDto.add(c.convert(ComponentActiveReleaseDto.class)));\n        }\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/PropertyToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.converters.mappers.ComponentPropertyMapper;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyToDto implements Converter<ComponentProperty, CompPropertiesActiveReleaseDto> {\n    @Autowired\n    ComponentPropertyMapper componentPropertyMapper;\n\n    @Override\n    public CompPropertiesActiveReleaseDto convert(ComponentProperty p) {\n        CompPropertiesActiveReleaseDto cp = componentPropertyMapper.toDto(p);\n        if (p.getPropertyType() != null) {\n            cp.setPropertyType(p.getPropertyType().convert(BomItemPropertyTypeDto.class));\n        }\n\n        return cp;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/PropertyTypeToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.converters.mappers.ComponentPropertyTypeMapper;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyTypeToDto implements Converter<BomItemPropertyType,BomItemPropertyTypeDto> {\n\n    @Autowired\n    ComponentPropertyTypeMapper componentPropertyTypeMapper;\n\n\n    @Override\n    public BomItemPropertyTypeDto convert(BomItemPropertyType propertyType) {\n        BomItemPropertyTypeDto dto = componentPropertyTypeMapper.toDto(propertyType);\n        Units units = propertyType.getUnits();\n        if(units!=null){\n            dto.setUnits(units.convert(UnitsDto.class));\n        }\n        if(propertyType.getGroup()!=null){\n            dto.setGroup(propertyType.getGroup().convert(BomItemPropertyTypeGroupDto.class));\n        }\n        return dto;\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/ComponentRelToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.database.active.ComponentRel;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ComponentRelToDto implements Converter<ComponentRel, ComponentActiveReleaseDto> {\n\n    @Override\n    public ComponentActiveReleaseDto convert(ComponentRel source) {\n       ComponentActiveReleaseDto comp = source.getChild().convert(ComponentActiveReleaseDto.class);\n       comp.setQuantity(source.getQuantity());\n       return comp;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/PropertyGroupsToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.converters.mappers.PropertyTypeGroupMapper;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyGroupsToDto implements Converter<BomItemPropertyTypeGroup,BomItemPropertyTypeGroupDto> {\n\n    @Autowired\n    PropertyTypeGroupMapper propertyTypeGroupMapper;\n\n    @Override\n    public BomItemPropertyTypeGroupDto convert(BomItemPropertyTypeGroup source) {\n        return propertyTypeGroupMapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/BomComponentRelToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class BomComponentRelToDto implements Converter<BomComponentRel, ComponentActiveReleaseDto> {\n\n    @Override\n    public ComponentActiveReleaseDto convert(BomComponentRel source) {\n        ComponentActiveReleaseDto comp = source.getChild().convert(ComponentActiveReleaseDto.class);\n        comp.setQuantity(source.getQuantity());\n        return comp;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/component/ComponentToDto.java =====\npackage com.ua.crow.plm.converters.component;\n\nimport com.ua.crow.plm.converters.mappers.ComponentMapper;\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\nimport java.util.Set;\n@Component\npublic class ComponentToDto implements Converter<ComponentActiveRelease, ComponentActiveReleaseDto> {\n    @Autowired\n    ComponentMapper componentMapper;\n\n\n    @Override\n    public ComponentActiveReleaseDto convert(ComponentActiveRelease c) {\n        ComponentActiveReleaseDto componentActiveReleaseDto = componentMapper.toDto(c);\n        if (c.getChildBom() != null) {\n            componentActiveReleaseDto.setChildBom(c.getChildBom().convert(EngineeringBomWoChildren.class));\n        }\n\n//        if (c.getParts() != null) {\n//            List<ComponentActiveReleaseDto> componentActiveReleaseDtos = new LinkedList<>();\n//            componentActiveReleaseDto.setParts(componentActiveReleaseDtos);\n//            c.getParts().forEach(comp -> {\n//                componentActiveReleaseDtos.add(comp.convert(ComponentActiveReleaseDto.class));\n//            });\n//        }\n\n        Set<ComponentProperty> props = c.getProperties();\n        if (props != null) {\n            Set<CompPropertiesActiveReleaseDto> propsDto = new HashSet<>();\n            componentActiveReleaseDto.setProperties(propsDto);\n            props.forEach(p -> propsDto.add(p.convert(CompPropertiesActiveReleaseDto.class)));\n        }\n        return componentActiveReleaseDto;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/product/ProductDtoToProductActiveRelease.java =====\npackage com.ua.crow.plm.converters.product;\n\nimport com.ua.crow.plm.converters.mappers.ProductMapper;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ProductDtoToProductActiveRelease implements Converter<ProductActiveReleaseDto, ProductActiveRelease> {\n    @Autowired\n    private ProductMapper productMapper;\n    @Override\n    public ProductActiveRelease convert(ProductActiveReleaseDto source) {\n        return productMapper.toProduct(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/product/ProductActiveReleaseConverterToProductDto.java =====\npackage com.ua.crow.plm.converters.product;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.converters.mappers.ProductMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ProductActiveReleaseConverterToProductDto implements Converter<ProductActiveRelease, ProductActiveReleaseDto> {\n    @Autowired\n    private ProductMapper productMapper;\n    public ProductActiveReleaseDto convertWithoutBoms(ProductActiveRelease product) {\n        ProductActiveReleaseDto p = productMapper.toDto(product);\n        product.getAttachmentService().getFirstThumbnailUrl().ifPresent(url->p.setThumbnailUrl(url));\n        return p;\n    }\n    @Override\n    public ProductActiveReleaseDto convert(ProductActiveRelease source) {\n        return convertWithoutBoms(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/UnitsToDto.java =====\npackage com.ua.crow.plm.converters;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.dto.mappers.UnitsMapper;\nimport com.ua.crow.plm.dto.UnitsDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class UnitsToDto implements Converter<Units, UnitsDto> {\n    @Autowired\n    UnitsMapper unitsMapper;\n    @Override\n    public UnitsDto convert(Units source) {\n        return unitsMapper.toDto(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/ActiveReleaseComponentToPartNumberReference.java =====\npackage com.ua.crow.plm.converters;\n\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ActiveReleaseComponentToPartNumberReference implements Converter<ComponentActiveRelease,PartNumberReference> {\n\n    @Override\n    public PartNumberReference convert(ComponentActiveRelease component) {\n        PartNumberReference reference = new PartNumberReference();\n        reference.setReferenceType(PartNumberReferenceType.ACTIVE_RELEASE_COMPONENT);\n        reference.setPartNumber(component.getPartNumber());\n        reference.setDescription(component.getDescription());\n        reference.setPartName(component.getName());\n        return reference;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentPropertyMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ComponentProperty;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentPropertyMapper {\n\n    @Mapping(target = \"item\", ignore = true)\n    public abstract CompPropertiesActiveReleaseDto toDto(ComponentProperty bomActiveRelease);\n\n    @Mapping(target = \"item\", ignore = true)\n    public abstract ComponentProperty toPojo(CompPropertiesActiveReleaseDto bomActiveRelease);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentMapper {\n\n    @Mapping(target = \"parts\", ignore = true)\n    @Mapping(target = \"properties\", ignore = true)\n    @Mapping(target = \"parentBom\", ignore = true)\n    @Mapping(target = \"childBom\", ignore = true)\n    public abstract ComponentActiveReleaseDto toDto(ComponentActiveRelease bomActiveRelease);\n\n    @Mapping(target = \"parts\", ignore = true)\n    @Mapping(target = \"properties\", ignore = true)\n    @Mapping(target = \"parentBom\", ignore = true)\n    @Mapping(target = \"childBom\", ignore = true)\n    public abstract ComponentActiveRelease toPojo(ComponentActiveReleaseDto bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/FusionBomMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class FusionBomMapper {\n\n    public abstract FusionBomDto toDto(FusionBom bom);\n\n\n    public abstract FusionBom toFusionBom(FusionBomDto bom);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/FullBomMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class FullBomMapper {\n    @Mapping(target = \"children\", ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease);\n\n    @Mapping(target = \"children\", ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract EngineeringBomWoChildren toDtoWoChildren(BomActiveRelease bomActiveRelease);\n\n    @Mapping(target = \"children\", ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract BomActiveRelease toPojo(BomActiveReleaseDto bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ShortFusionBomMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.mapstruct.BeanMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class ShortFusionBomMapper {\n    @BeanMapping(ignoreByDefault = true)\n    @Mapping(target = \"partName\", source = \"partName\")\n    @Mapping(target = \"partNumber\", source = \"partNumber\")\n    @Mapping(target = \"type\", source = \"type\")\n    public abstract FusionComponentDto toShortDto(FusionComponent bom);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/PropertyTypeGroupMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class PropertyTypeGroupMapper {\n    public abstract BomItemPropertyTypeGroupDto toDto(BomItemPropertyTypeGroup bomItemPropertyTypeGroup);\n    public abstract BomItemPropertyTypeGroup toPojo(BomItemPropertyTypeGroupDto bomItemPropertyTypeDto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ResourceGroupMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class ResourceGroupMapper {\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ResourceGroupDto toDto(ResourceGroup task);\n\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ResourceGroup toResourceGroup(ResourceGroupDto task);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/MaterialMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.Material;\nimport com.ua.crow.plm.dto.fusion.MaterialDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class MaterialMapper {\n    abstract MaterialDto toDto(Material material);\n\n    abstract Material toPojo(MaterialDto material);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentGroupMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentGroupMapper {\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ComponentGroupDto toDto(ComponentGroup group);\n\n    @Mapping(target = \"children\", ignore = true)\n    public abstract ComponentGroup toEntity(ComponentGroupDto dto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ResourceItemMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.inventory.database.ResourceItem;\nimport com.ua.crow.plm.dto.ResourceItemDTO;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ResourceItemMapper {\n    public abstract ResourceItemDTO toDto(ResourceItem comment);\n    public abstract ResourceItem toPojo(ResourceItemDTO comment);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ProductMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class ProductMapper {\n\n    @Mapping(target = \"engineeringBoms\" ,ignore = true)\n    public abstract ProductActiveReleaseDto toDto(ProductActiveRelease task);\n    @Mapping(target = \"engineeringBoms\" ,ignore = true)\n    public abstract ProductActiveRelease toProduct(ProductActiveReleaseDto task);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/BodyMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionPhysicalProperty;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class BodyMapper {\n    public abstract Body toDto(FusionPhysicalProperty fusionPhysicalProperty);\n\n    public abstract FusionPhysicalProperty toPojo(Body body);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ReleaseVersionMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.dto.released.ReleaseVersionDTO;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ReleaseVersionMapper {\n\n    @Mapping(target = \"previous\", ignore = true)\n\n    public abstract ReleaseVersionDTO toDto(ReleaseVersion bomActiveRelease);\n    @Mapping(target = \"previous\", ignore = true)\n\n\n    public abstract ReleaseVersion toPojo(ReleaseVersionDTO bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ComponentPropertyTypeMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ComponentPropertyTypeMapper {\n\n    public abstract BomItemPropertyTypeDto toDto(BomItemPropertyType bomItemPropertyType);\n\n    public abstract BomItemPropertyType toPojo(BomItemPropertyTypeDto bomItemPropertyTypeDto);\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/FusionBomItemMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class FusionBomItemMapper {\n\n\n    public abstract FusionComponentDto toDto(FusionComponent bom);\n\n    public abstract FusionComponent toFusionBom(FusionComponentDto bom);\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/ItemTypeNameMappingMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class ItemTypeNameMappingMapper {\n    public abstract ItemTypeNameMappingDto toDto(ItemTypeNameMapping mapping);\n\n    public abstract ItemTypeNameMapping toEntity(ItemTypeNameMappingDto dto);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/mappers/BomShortMapper.java =====\npackage com.ua.crow.plm.converters.mappers;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class BomShortMapper {\n    @Mapping(target = \"children\" , ignore = true)\n    @Mapping(target = \"product\", ignore = true)\n    public abstract BomActiveReleaseDto toDto(BomActiveRelease bomActiveRelease);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomToPartNumberReference.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomToPartNumberReference implements Converter<FusionBom, PartNumberReference> {\n\n    @Override\n    public PartNumberReference convert(FusionBom source) {\n        return converFusionBomToPartNumberRef(source);\n    }\n    private PartNumberReference converFusionBomToPartNumberRef(FusionBom fb) {\n        PartNumberReference partNumberReference = new PartNumberReference();\n        partNumberReference.setReferenceType(PartNumberReferenceType.FUSION_BOM);\n        partNumberReference.setPartName(fb.getName());\n        partNumberReference.setPartNumber(fb.getPartNumber());\n        partNumberReference.setDescription(fb.getDescription());\n        if(fb.getProduct()!=null) {\n            partNumberReference.setProductId(fb.getProduct().getId());\n        }\n        return partNumberReference;\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomDtoToFusionBom.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.converters.mappers.FusionBomMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomDtoToFusionBom implements Converter<FusionBomDto,FusionBom> {\n\n    @Autowired\n    private FusionBomMapper fusionBomMapper;\n\n\n    @Override\n    public FusionBom convert(FusionBomDto source) {\n\n        return fusionBomMapper.toFusionBom(source);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomToFusionBomDto.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomToFusionBomDto implements Converter<FusionBom,FusionBomDto> {\n\n    @Autowired\n    private MinioService minioService;\n\n    @Override\n    public FusionBomDto convert(FusionBom bom) {\n        FusionBomDto fusionBomDto = new FusionBomDto();\n\n        fusionBomDto.setDeleted( bom.isDeleted() );\n        fusionBomDto.setName( bom.getName() );\n\n        fusionBomDto.setCreator( bom.getCreator() );\n        fusionBomDto.setModifier( bom.getModifier() );\n        fusionBomDto.setCreatedAt( bom.getCreatedAt() );\n        fusionBomDto.setModifiedAt( bom.getModifiedAt() );\n//        fusionBomDto.setProduct(Optional.of( bom.getProduct() ).map(b->bom.getProduct().convert(ProductActiveReleaseDto.class)).orElse(null)) ;\n        fusionBomDto.setDocumentName( bom.getDocumentName() );\n        fusionBomDto.setVersion( bom.getVersion() );\n        fusionBomDto.setProcessed( bom.isProcessed() );\n        fusionBomDto.setEngineeringBomId( bom.getEngineeringBomId() );\n        fusionBomDto.setDescription( bom.getDescription() );\n        fusionBomDto.setFusionId( bom.getFusionId() );\n        fusionBomDto.setLibraryItem( bom.isLibraryItem() );\n        fusionBomDto.setRevisionId( bom.getRevisionId() );\n        fusionBomDto.setPartNumber( bom.getPartNumber() );\n        fusionBomDto.setConfiguration( bom.isConfiguration() );\n        fusionBomDto.setConfiguredDesign( bom.isConfiguredDesign() );\n\n        if (bom.getRoot()!=null){\n            fusionBomDto.setRootPart(bom.getRoot().convert(FusionComponentDto.class));\n        }\n        String objectName = new StringBuilder()\n                .append(\"fusionbom/\")\n                .append(bom.getFusionId())\n                .append('_')\n                .append(bom.getRevisionId())\n                .append('/')\n                .append(\"model.step\")\n                .toString();\n        if (minioService.exist(Buckets.cad, objectName)) {\n            fusionBomDto.setUrl(minioService.sign(Buckets.cad, objectName));\n        }\n        return fusionBomDto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/converters/fusionbom/FusionBomToBomActiveRelease.java =====\npackage com.ua.crow.plm.converters.fusionbom;\n\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FusionBomToBomActiveRelease implements Converter<FusionBom, BomActiveRelease> {\n\n    @Override\n    public BomActiveRelease convert(FusionBom source) {\n        BomActiveRelease bom = new BomActiveRelease();\n//        bom.addFusionBom(\"Engineering BOM creation using Fusion 360 model\",source);\n        bom.setRelease_ver(0L);\n        bom.setProduct(source.getProduct());\n        bom.setDescription(source.getDescription());\n        bom.setPartNumber(source.getPartNumber());\n        bom.setName(source.getDocumentName());\n        bom.setFusionVersion(source.getVersion());\n        bom.setLibraryItem(source.isLibraryItem());\n        bom.setConfiguration(source.isConfiguration());\n        bom.setConfiguredDesign(source.isConfiguredDesign());\n        bom.setFusionRevisionId(source.getRevisionId());\n        bom.setFusionId(source.getFusionId());\n\n        return bom;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/fusion/FusionBomItemController.java =====\npackage com.ua.crow.plm.controller.fusion;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFacadeService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomManagementService;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/fusionbomitem\")\n@Validated\npublic class FusionBomItemController {\n    @Autowired\n    FusionBomFacadeService service;\n\n    @Autowired\n    FusionBomManagementService fusionBomManagementService;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n\n    @PostMapping(\"/add\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto save(@RequestBody FusionComponentDto dto){\n        return fusionBomManagementService.createItem(dto).convert(FusionComponentDto.class);\n    }\n\n    @PostMapping(\"/addparent\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto save(@RequestBody @Valid AddChildRequest dto){\n            return service.addChildItem(dto).convert(FusionComponentDto.class);\n    }\n\n    @PostMapping(\"/update\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionComponentDto update(@RequestBody @Valid FusionComponentDto dto, @RequestParam(value = \"updateProperties\", defaultValue = \"false\") boolean updateProperties) {\n        return service.updateItem(dto,updateProperties).convert(FusionComponentDto.class);\n    }\n    @GetMapping(\"/read\")\n    public FusionComponentDto readById(@RequestParam String id,@RequestParam String revisionId,@RequestParam(value = \"includeProperties\", defaultValue = \"false\") boolean includeProperties) {\n        return fusionBomItemService.readById(id, revisionId, includeProperties)\n                .orElseThrow(() -> new NotFoundException(\"Fusion component not found with ID: \" + id + \" and revision ID: \" + revisionId))\n                .convert(FusionComponentDto.class);\n    }\n\n    @PostMapping(\"/merge\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionComponentDto merge(@RequestBody @Valid com.ua.crow.plm.dto.requests.MergeBomItemsRequest request) {\n        return fusionBomItemService.merge(request.getSourceFusionId(), request.getSourceRevisionId(),\n                request.getTargetFusionId(), request.getTargetRevisionId());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/fusion/FusionBomController.java =====\npackage com.ua.crow.plm.controller.fusion;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.converters.mappers.FusionBomItemMapper;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.dto.requests.FusionBomsListRequest;\nimport com.ua.crow.plm.dto.requests.MapProductRequest;\nimport com.ua.crow.plm.service.fusionbom.FusionBomImportService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFacadeService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomManagementService;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.merge.MergeBomTreesDto;\nimport org.springframework.http.ResponseEntity;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/fusionbom\")\n@Validated\npublic class FusionBomController {\n    @Autowired\n    private FusionBomFacadeService fusionBomService;\n\n    @Autowired\n\n    private FusionBomManagementService fusionBomManagementService;\n    @Autowired\n    private FusionBomItemMapper fusionBomItemMapper;\n    @Autowired\n    FusionBomImportService fusionBomImportService;\n    @PostMapping(\"/list\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<FusionBomDto> fusionBoms(@RequestBody FusionBomsListRequest request, @PageableDefault Pageable pageable) {\n        List<FusionBomDto> result;\n        if (request.getProductId().isPresent()) {\n            if (request.getUnprocessed().isPresent()) {\n                if (request.getUnprocessed().get()) {\n                    result = fusionBomService.readUnprocessedBomTreeDtosByProduct(request.getProductId().get(), request.getRelease().orElse(0L));\n                } else {\n                    result = fusionBomService.readProcessedBomTreeDtosByProduct(request.getProductId().get(), request.getRelease().orElse(0L));\n                }\n            } else {\n                result = fusionBomService.readBomTreeDtoByProduct(request.getProductId().get(), request.getRelease().orElse(0L));\n            }\n        } else {\n            result = fusionBomService.readAllTreeDto();\n        }\n\n        if (request.getPartNumber().isPresent()) {\n            String search = request.getPartNumber().get().toLowerCase();\n            result = result.stream()\n                    .filter(dto -> dto.getPartNumber() != null && dto.getPartNumber().toLowerCase().contains(search))\n                    .toList();\n        }\n        return result;\n    }\n    @PostMapping(\"/updateType\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionComponentDto updateStatus(@RequestParam(required = true) ItemTypes type, @RequestParam(required = true) String id, @RequestParam(required = true) String revId) {\n        return fusionBomService.updateItemType(id, revId, type);\n    }\n    @GetMapping(\"/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionBomDto> getFusionBom(@PathVariable(\"id\") String id, @RequestParam(\"revisionId\") String revisionId) {\n        return fusionBomService.readDtoById(FusionId.id(id, revisionId));\n    }\n\n    @GetMapping(\"/tree\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionBomDto> getFusionBomTree(@RequestParam String id,\n                                                   @RequestParam String revisionId,\n                                                   @RequestParam(value = \"returnComponentBodies\", defaultValue = \"false\") boolean returnComponentBodies) {\n        return fusionBomService.readFullTree(FusionId.id(id, revisionId), returnComponentBodies);\n    }\n    @GetMapping(\"/root\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionComponentDto> getTreeOfComponents(@RequestParam String id,\n                                                            @RequestParam String revisionId,\n                                                            @RequestParam(value = \"returnComponentBodies\", defaultValue = \"false\") boolean returnComponentBodies) {\n        return fusionBomService.readFullTree(FusionId.id(id, revisionId), returnComponentBodies).map(FusionBomDto::getRootPart);\n    }\n    @DeleteMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto delete(@RequestBody FusionId id) {\n        return fusionBomManagementService.softDelete(id).convert(FusionBomDto.class);\n    }\n\n    @PostMapping(\"/unlink\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> unlink(@RequestBody FusionId id) {\n        fusionBomManagementService.unlinkFromParents(id);\n        return ResponseEntity.ok().build();\n    }\n    @PostMapping(\"/mapproduct\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto mapProduct(@RequestBody @Valid MapProductRequest request) {\n        return fusionBomService.mapProduct(FusionId.id(request.getFusionBomId(), request.getRevisionId()), request.getProductId()).convert(FusionBomDto.class);\n    }\n\n    @PutMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto createFusionBom(@RequestBody @NotNull FusionBomDto dto) {\n        return fusionBomImportService.save(dto);\n    }\n\n    @GetMapping(\"/revisions/{fusionId}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> revisions(\n            @PathVariable(\"fusionId\") String fusionId,\n            @RequestParam Long productId,\n            @RequestParam Long release) {\n        return fusionBomService.readRevisionDtos(fusionId, productId, release);\n    }\n\n    /**\n     * Returns the most suitable Engineering BOM for merging with the specified Fusion BOM.\n     */\n    @GetMapping(\"/mergeable-effective-boms/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<EngineeringBomWoChildren> mergeableEngineeringBom(@PathVariable(\"id\") String id,\n                                                                        @RequestParam String revisionId) {\n        return fusionBomService.findMergeableEngineeringBom(FusionId.id(id, revisionId))\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    /**\n     * Loads hierarchical trees for both Fusion and Engineering BOM.\n     */\n    @GetMapping(\"/trees/{fusionId}/{effectiveId}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<MergeBomTreesDto> mergeTrees(@PathVariable(\"fusionId\") String fusionId,\n                                                       @PathVariable(\"effectiveId\") Long effectiveId,\n                                                       @RequestParam String revisionId) {\n        return fusionBomService.loadMergeTrees(FusionId.id(fusionId, revisionId), effectiveId)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    /**\n     * Performs merge of a Fusion BOM into an existing Engineering BOM.\n     */\n    @PostMapping(\"/merge\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> merge(@RequestParam String fusionId,\n                                      @RequestParam String revisionId,\n                                      @RequestParam Long engineeringBomId) {\n        fusionBomService.mergeFusionIntoEngineeringBom(FusionId.id(fusionId, revisionId), engineeringBomId);\n        return ResponseEntity.ok().build();\n    }\n\n    // Direct invocation from Vaadin views\n    public void deleteComponent(String componentId, String componentRevision) {\n        fusionBomManagementService.deleteComponent(FusionId.id(componentId, componentRevision));\n    }\n\n\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/fusion/FusionController.java =====\npackage com.ua.crow.plm.controller.fusion;\n\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.dto.basic.FindProjectByNameRequest;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.FusionProjectListItem;\nimport com.ua.crow.plm.dto.ObtainPartNumberRequest;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.*;\nimport com.ua.crow.plm.service.fusionbom.FusionBomImportService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFileService;\nimport com.ua.crow.plm.service.product.ActiveReleaseProductService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping(\"/fusion\")\n@Validated\npublic class FusionController {\n    @Autowired\n    PartNumberProvider pool;\n    @Autowired\n    ActiveReleaseProductService service;\n\n\n    @Autowired\n    FusionBomImportService fusionBomImportService;\n\n    @Autowired\n    FusionBomFileService fusionBomFileService;\n\n    @GetMapping(\"/products\")\n    Stream<FusionProjectListItem> projectList() {\n        return service.findAll(false).map(p -> {\n            FusionProjectListItem fusionProjectListItem = new FusionProjectListItem();\n            fusionProjectListItem.setName(p.getName());\n            return fusionProjectListItem;\n        });\n    }\n\n    @PostMapping(\"/productsbyname\")\n    Optional<ProductActiveReleaseDto> findByName(@RequestBody @Valid FindProjectByNameRequest request) {\n        return service.findByName(request.getName()).map(p -> p.convert(ProductActiveReleaseDto.class));\n    }\n\n\n\n    @PostMapping(\"/readbyid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<FusionBomDto> getFusionBom(@RequestBody @NotNull  FusionId fusionId) {\n        return fusionBomImportService.checkIfExists(fusionId).map(f -> {\n            FusionBomDto dto = f.convert(FusionBomDto.class);\n            String url = fusionBomFileService.getStepFileUrl(f);\n            if (url != null) {\n                dto.setUrl(url);\n            }\n            return dto;\n        });\n    }\n\n    @PostMapping(\"/issue\")\n    ResponseEntity<Void> issue(@RequestBody ObtainPartNumberRequest req) {\n            PartNumberReference partNumberReference = pool.findOrCreate(Optional.of(req.getPartNumber())).get();\n            ResponseEntity.BodyBuilder r = ResponseEntity.ok().header(\"partNumber\", partNumberReference.getPartNumber());\n            if (partNumberReference.getReferenceType() == PartNumberReferenceType.NEW) {\n                r.header(\"created\", \"true\");\n            }\n            return r.build();\n    }\n\n    @PostMapping(\"/txbegin\")\n    public ResponseEntity<Void> txBegin(@RequestBody @Valid @NotNull FusionId fusionId){\n        return ResponseEntity.ok().build();\n    }\n\n    @PutMapping(\"/fusionbom\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto createFusionBom(@RequestBody @NotNull FusionBomDto dto){\n        return fusionBomImportService.save(dto).convert(FusionBomDto.class);\n    }\n\n    @PostMapping(\"/fusionbomitem\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto save(@RequestBody FusionComponentDto dto){\n        return fusionBomImportService.saveItem(dto).convert(FusionComponentDto.class);\n\n    }\n\n    @PostMapping(\"/addparent\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public @ResponseBody FusionComponentDto addparent(@RequestBody @Valid AddChildRequest dto){\n\n            return fusionBomImportService.addChildItem(dto).convert(FusionComponentDto.class);\n\n\n    }\n\n\n    @PostMapping(\"/txcommit\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto commit(@RequestBody @NotNull FusionId id){\n            return fusionBomImportService.commitTransaction(id);\n    }\n\n\n    @PostMapping(\"/deletefusionbom\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public FusionBomDto delete(@RequestBody @NotNull FusionId id){\n        return fusionBomImportService.delete(id).convert(FusionBomDto.class);\n    }\n\n    @PostMapping(\"/uploadStep\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> uploadStep(@RequestHeader String fusionId,\n                                           @RequestHeader String revisionId,\n                                           @RequestHeader(\"file\") MultipartFile file) throws java.io.IOException {\n        fusionBomFileService.uploadStepFile(FusionId.id(fusionId, revisionId), file);\n        return ResponseEntity.ok().build();\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ProductController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.service.NotFoundException;\nimport com.ua.crow.plm.service.product.ActiveReleaseProductService;\nimport jakarta.annotation.Nonnull;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.apache.commons.lang3.NotImplementedException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/products\")\n@Validated\npublic class ProductController {\n    @Autowired\n    private ActiveReleaseProductService activeReleaseProductService;\n\n    @GetMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    public List<ProductActiveReleaseDto> getAllProducts() {\n        return activeReleaseProductService.findAll(false)\n                .map(product -> product.convert(ProductActiveReleaseDto.class))\n                .collect(Collectors.toList());\n    }\n\n    @GetMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    public Optional<ProductDto> getProductById(@RequestParam @Nonnull Long id) {\n        return activeReleaseProductService\n                .findById(id)\n                .map(productActiveRelease -> productActiveRelease.convert(ProductActiveReleaseDto.class));\n    }\n\n    @PostMapping\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ProductActiveReleaseDto createProduct(@RequestBody ProductActiveReleaseDto productDTO) {\n        ProductActiveRelease savedProductActiveRelease = activeReleaseProductService.createProduct(productDTO);\n        return savedProductActiveRelease.convert(ProductActiveReleaseDto.class);\n    }\n\n\n    public ProductActiveReleaseDto updateProduct( ProductDto productDTO) {\n        Long id = productDTO.getId();\n        ProductActiveRelease existingProductActiveRelease = activeReleaseProductService.findById(id)\n                .orElseThrow(() -> new NotFoundException(id,ProductActiveRelease.class));\n        existingProductActiveRelease.setName(productDTO.getName());\n        existingProductActiveRelease.setUkrName(productDTO.getUkrName());\n        ProductActiveRelease updatedProductActiveRelease = activeReleaseProductService.updateProduct(existingProductActiveRelease);\n        return updatedProductActiveRelease.convert(ProductActiveReleaseDto.class);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {\n        throw new NotImplementedException();\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/ItemTypeNameMappingController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport com.ua.crow.plm.service.ItemTypeNameMappingService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/item-type-mappings\")\npublic class ItemTypeNameMappingController {\n    private final ItemTypeNameMappingService service;\n\n    @Autowired\n    public ItemTypeNameMappingController(ItemTypeNameMappingService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<ItemTypeNameMappingDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(ItemTypeNameMappingDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ItemTypeNameMappingDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public ItemTypeNameMappingDto create(@RequestBody ItemTypeNameMappingDto dto) {\n        ItemTypeNameMapping saved = service.save(dto.convert(ItemTypeNameMapping.class));\n        return saved.convert(ItemTypeNameMappingDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<ItemTypeNameMappingDto> update(@PathVariable Long id, @RequestBody ItemTypeNameMappingDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        ItemTypeNameMapping saved = service.save(dto.convert(ItemTypeNameMapping.class));\n        return ResponseEntity.ok(saved.convert(ItemTypeNameMappingDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/BomItemPropertyTypeController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport com.ua.crow.plm.service.engbom.BomItemPropertyTypeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/property-types\")\npublic class BomItemPropertyTypeController {\n    private final BomItemPropertyTypeService service;\n\n    @Autowired\n    public BomItemPropertyTypeController(BomItemPropertyTypeService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<BomItemPropertyTypeDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(BomItemPropertyTypeDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public BomItemPropertyTypeDto create(@RequestBody BomItemPropertyTypeDto dto) {\n        BomItemPropertyType saved = service.save(dto.convert(BomItemPropertyType.class));\n        return saved.convert(BomItemPropertyTypeDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeDto> update(@PathVariable Long id, @RequestBody BomItemPropertyTypeDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        BomItemPropertyType saved = service.save(dto.convert(BomItemPropertyType.class));\n        return ResponseEntity.ok(saved.convert(BomItemPropertyTypeDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/ComponentGroupController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport com.ua.crow.plm.service.ComponentGroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/component-groups\")\npublic class ComponentGroupController {\n    private final ComponentGroupService service;\n\n    @Autowired\n    public ComponentGroupController(ComponentGroupService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<ComponentGroupDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(ComponentGroupDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ComponentGroupDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public ComponentGroupDto create(@RequestBody ComponentGroupDto dto) {\n        ComponentGroup saved = service.save(dto.convert(ComponentGroup.class));\n        return saved.convert(ComponentGroupDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<ComponentGroupDto> update(@PathVariable Long id, @RequestBody ComponentGroupDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        ComponentGroup saved = service.save(dto.convert(ComponentGroup.class));\n        return ResponseEntity.ok(saved.convert(ComponentGroupDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/settings/BomItemPropertyTypeGroupController.java =====\npackage com.ua.crow.plm.controller.settings;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport com.ua.crow.plm.service.engbom.BomItemPropertyTypeGroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/settings/property-type-groups\")\npublic class BomItemPropertyTypeGroupController {\n    private final BomItemPropertyTypeGroupService service;\n\n    @Autowired\n    public BomItemPropertyTypeGroupController(BomItemPropertyTypeGroupService service) {\n        this.service = service;\n    }\n\n    @GetMapping\n    public List<BomItemPropertyTypeGroupDto> getAll() {\n        return service.findAll().stream().map(e -> e.convert(BomItemPropertyTypeGroupDto.class)).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeGroupDto> getById(@PathVariable Long id) {\n        return service.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public BomItemPropertyTypeGroupDto create(@RequestBody BomItemPropertyTypeGroupDto dto) {\n        BomItemPropertyTypeGroup saved = service.save(dto.convert(BomItemPropertyTypeGroup.class));\n        return saved.convert(BomItemPropertyTypeGroupDto.class);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<BomItemPropertyTypeGroupDto> update(@PathVariable Long id, @RequestBody BomItemPropertyTypeGroupDto dto) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        dto.setId(id);\n        BomItemPropertyTypeGroup saved = service.save(dto.convert(BomItemPropertyTypeGroup.class));\n        return ResponseEntity.ok(saved.convert(BomItemPropertyTypeGroupDto.class));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        if (service.findById(id).isEmpty()) {\n            return ResponseEntity.notFound().build();\n        }\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ResourceGroupController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.inventory.service.ResourceGroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/resource-groups\")\npublic class ResourceGroupController {\n\n    private final ResourceGroupService resourceGroupService;\n\n    @Autowired\n    public ResourceGroupController(ResourceGroupService resourceGroupService) {\n        this.resourceGroupService = resourceGroupService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<ResourceGroupDto>> getAllResourceGroups() {\n        List<ResourceGroupDto> resourceGroups = resourceGroupService.findAll().stream().map(e->e.convert(ResourceGroupDto.class)).toList();\n        return new ResponseEntity<>(resourceGroups, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ResourceGroupDto> getResourceGroupById(@PathVariable Long id) {\n        Optional<ResourceGroupDto> resourceGroup = resourceGroupService.findById(id);\n        return resourceGroup.map(value -> new ResponseEntity<>(value, HttpStatus.OK))\n                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));\n    }\n\n    @PostMapping\n    public ResponseEntity<ResourceGroupDto> createResourceGroup(@RequestBody ResourceGroupDto resourceGroupDto) {\n        ResourceGroup savedResourceG = resourceGroupService.save(resourceGroupDto.convert(ResourceGroup.class));\n        ResourceGroupDto savedResourceGroup = savedResourceG.convert(ResourceGroupDto.class);\n        return new ResponseEntity<>(savedResourceGroup, HttpStatus.CREATED);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<ResourceGroupDto> updateResourceGroup(@PathVariable Long id, @RequestBody ResourceGroupDto resourceGroupDto) {\n        if (!resourceGroupService.findById(id).isPresent()) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        resourceGroupDto.setId(id);\n        ResourceGroupDto updatedResourceGroup = resourceGroupService.save(resourceGroupDto.convert(ResourceGroup.class)).convert(ResourceGroupDto.class);\n        return new ResponseEntity<>(updatedResourceGroup, HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteResourceGroup(@PathVariable Long id) {\n        if (!resourceGroupService.findById(id).isPresent()) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        resourceGroupService.deleteById(id);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n\n    @GetMapping(\"/tree\")\n    public ResponseEntity<List<ResourceGroupDto>> getResourceGroupTree() {\n        List<ResourceGroupDto> tree = resourceGroupService.getTree().stream()\n                .map(this::convertRecursively)\n                .toList();\n\n        return new ResponseEntity<>(tree, HttpStatus.OK);    }\n    private ResourceGroupDto convertRecursively(ResourceGroup group) {\n        ResourceGroupDto dto = group.convert(ResourceGroupDto.class);\n        if (group.getChildren() != null && !group.getChildren().isEmpty()) {\n            List<ResourceGroupDto> childDtos = group.getChildren().stream()\n                    .map(this::convertRecursively)\n                    .toList();\n            dto.setChildren(childDtos);\n        }\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/EngineeringBomController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.converters.mappers.BomShortMapper;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.service.engbom.BomService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.data.web.SortDefault;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping(\"/ebom\")\n@Validated\npublic class EngineeringBomController {\n    @Autowired\n    private BomService bomService;\n    @Autowired\n    private BomShortMapper bomShortMapper;\n\n    @PostMapping(\"/convertToEngineeringBom\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public ResponseEntity convertToEngineeringBom(@RequestParam @NotNull @NotBlank String id, @RequestParam @NotNull @NotBlank String revisionId) {\n        BomActiveRelease res = bomService.importFusionBom(FusionId.id(id,revisionId));\n        return ResponseEntity.ok().build();\n    }\n\n    @PostMapping(\"/shortlist\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Stream<ComponentActiveReleaseDto> fusionBoms(@NotNull Long bomId){\n        return bomService.shortList(bomId).map(i->i.convert(ComponentActiveReleaseDto.class));\n    }\n\n    @GetMapping(\"/byproductid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<EngineeringBomWoChildren>\n        listByProductId(@NotNull @RequestParam Long productId,\n                        @RequestParam(required = false, defaultValue = \"0\") Long release,\n                        @PageableDefault @SortDefault.SortDefaults({@SortDefault(sort = \"id\")}) Pageable pageable,\n                        @RequestParam(required = false) boolean rootOnly) {\n        return bomService.listByProductId(productId, release, pageable, rootOnly);\n\n    }\n\n    @GetMapping(\"/byid/components\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<ComponentActiveReleaseDto> fullbyId(@NotNull @RequestParam Long id,\n                                                    @RequestParam(required = false, defaultValue = \"0\") Long release) {\n        return bomService.readComponents(id, release);\n    }\n\n    @GetMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<EngineeringBomWoChildren> byId(@NotNull @RequestParam Long id,\n                                                   @RequestParam(required = false, defaultValue = \"0\") Long release) {\n        return bomService.readShortDtoById(id, release);\n    }\n\n    @GetMapping(\"/byid/tree\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<BomActiveReleaseDto> byIdTree(@NotNull @RequestParam Long id,\n                                                  @RequestParam(required = false, defaultValue = \"0\") Long release) {\n        return bomService.readDtoTreeById(id, release);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public EngineeringBomWoChildren delete(@PathVariable Long id,\n                                            @RequestParam(required = false, defaultValue = \"false\") boolean deleteComponents) {\n        return bomService.softDelete(id, deleteComponents).convert(EngineeringBomWoChildren.class);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/cad/CadController.java =====\npackage com.ua.crow.plm.controller.cad;\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.service.fusionbom.FusionBomFileService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomImportService;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/cad\")\npublic class CadController {\n\n    @Autowired\n    private FusionBomImportService importService;\n\n    @Autowired\n    private FusionBomFileService fileService;\n\n    @GetMapping(\"/url\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    public Optional<String> getStepFileUrl(@RequestParam String fusionId,\n                                           @RequestParam String revisionId) {\n        return importService.checkIfExists(FusionId.id(fusionId, revisionId))\n                .map(fileService::getStepFileUrl);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/EngineeringBomItemController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.service.engbom.BomService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/ebomitem\")\n@Validated\npublic class EngineeringBomItemController {\n    @Autowired\n    private BomService bomService;\n    @GetMapping(\"/bybomid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public List<ComponentActiveReleaseDto> byId(@NotNull @RequestParam Long id){\n        return bomService.readComponents(id,0L);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ActiveReleaseComponentController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.dto.requests.ComponentRequestDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.service.ComponentService;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@RestController\n@RequestMapping(\"/component\")\n@Validated\npublic class ActiveReleaseComponentController {\n\n    @Autowired\n    ComponentService componentService;\n\n    @GetMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<ComponentActiveReleaseDto> byId(@NotNull @RequestParam Long id){\n        throw new UnsupportedOperationException(\"Not implemented yet\");\n    }\n    @GetMapping(\"/list\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Stream<ComponentActiveReleaseDto> list(ComponentRequestDto req){\n        return componentService.list(req);\n    }\n\n    @PostMapping(\"/byid\")\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\"})\n    public Optional<ComponentActiveReleaseDto> save(){\n        throw new UnsupportedOperationException();\n    }\n\n\n\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/controller/ProductVersionController.java =====\npackage com.ua.crow.plm.controller;\n\nimport com.ua.crow.plm.converters.mappers.ReleaseVersionMapper;\nimport com.ua.crow.plm.dto.released.ReleaseVersionDTO;\nimport com.ua.crow.plm.service.product.ProductService;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/products/versions\")\n@Validated\npublic class ProductVersionController {\n    @Autowired\n    ProductService productService;\n    @Autowired\n    private ReleaseVersionMapper releaseVersionMapper;\n    @GetMapping\n    public List<ReleaseVersionDTO> getProductVersions(@RequestParam @NotNull Long productid) {\n        return productService.getAllVersions(productid)\n                .stream()\n                .map(releaseVersionMapper::toDto)\n                .toList();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbomitem/FusionBomItemService.java =====\npackage com.ua.crow.plm.service.fusionbomitem;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.*;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRepository;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionBomRelRepository;\nimport com.ua.crow.plm.database.repo.MaterialRepository;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.TypeDetector;\nimport com.ua.crow.service.BadRequest;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@Service\npublic class FusionBomItemService {\n    @Autowired\n    TypeDetector typeDetector;\n    @Autowired\n    FusionComponentRepository fusionComponentRepository;\n    @Autowired\n    MaterialRepository materialRepository;\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n    @Autowired\n    FusionBomRelRepository fusionBomRelRepository;\n    @Autowired\n    FusionComponentRelRepository repository;\n    @Transactional(readOnly = true)\n    public Optional<FusionComponentDto> readById(@NotNull String itemId, @NotNull String revisionId, boolean includeProperties) {\n        Optional<FusionComponent> item = fusionComponentRepository.findById(new FusionId(itemId, revisionId));\n        if (item.isPresent()) {\n            Optional<FusionComponentDto> dto = item.map(fbom -> fbom.convert(FusionComponentDto.class));\n            if (includeProperties) {\n                dto.get().setBodies(item.get().getPhysicalProperties().stream().map(p -> p.convert(Body.class)).collect(Collectors.toSet()));\n            }\n            return dto;\n        }\n        return Optional.empty();\n    }\n\n    public FusionComponentDto updateType(String id,String revisionId, ItemTypes type) {\n        FusionComponent fbom = fusionComponentRepository.findById(FusionId.id(id,revisionId))\n                .orElseThrow(() -> new NotFoundException(id, FusionComponent.class));\n        fbom.setType(type);\n        fusionComponentRepository.save(fbom);\n        return fbom.convert(FusionComponentDto.class);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionComponent> findLastByPartNumber(String partNumber, String revisionId) {\n        return fusionComponentRepository.findByPartNumberAndRevisionId(partNumber,revisionId);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionComponent> findLastByPartNumber(String partNumber) {\n        return fusionComponentRepository.findLastByPartNumber(partNumber);\n    }\n\n    public FusionComponentRel addChild(FusionBom bom, FusionComponent component, FusionComponent relatedEntity) {\n        return addChild(bom, component, relatedEntity,1d);\n    }\n\n    public FusionComponentRel addChild(FusionBom bom, FusionComponent parent, FusionComponent child, Double quantity) {\n        Optional<FusionComponentRel> relationshipOpt = repository.findChildrenForBom(parent.getFusionId(),parent.getRevisionId(),bom.getFusionId(),bom.getRevisionId())\n                .filter(f -> f.getBomId().equals(bom.getFusionId())&&f.getBomRevisionId().equals(bom.getRevisionId()) &&\n                f.getFusionChildId().equals(child.getFusionId()) && f.getChildRevisionId().equals(child.getRevisionId())&&\n                f.getFusionParentId().equals(parent.getFusionId())&&f.getParentRevisionId().equals(parent.getRevisionId())).findFirst();\n\n        Optional<FusionComponentRel> checkReverse = repository.findChildrenForBom(child.getFusionId(),child.getRevisionId(),bom.getFusionId(),bom.getRevisionId())\n                .filter(f -> f.getBomId().equals(bom.getFusionId()) && f.getBomRevisionId().equals(bom.getRevisionId())&&\n                        f.getFusionChildId().equals(parent.getFusionId()) && f.getChildRevisionId().equals(parent.getRevisionId())&&\n                        f.getFusionParentId().equals(child.getFusionId())&&f.getParentRevisionId().equals(child.getRevisionId())).findFirst();\n        FusionComponentRel relationship;\n        if (checkReverse.isPresent()){\n            throw new BadRequest(\"Attempt to add cyclomatic node\");\n        }\n        if (relationshipOpt.isPresent()) {\n            relationship = relationshipOpt.get();\n            relationship.setQuantity(relationshipOpt.get().getQuantity() + quantity);\n\n        } else {\n            relationship = new FusionComponentRel();\n            relationship.setParent(parent);\n            relationship.setBom(bom);\n            relationship.setChild(child);\n            relationship.setQuantity(quantity);\n        }\n\n        FusionComponentRel saved = repository.save(relationship);\n\n        if (child.isRoot()) {\n            fusionBomRepository.findByRoot(child.getFusionId(), child.getRevisionId())\n                .ifPresent(childBom -> {\n                    if (!bom.getFusionId().equals(childBom.getFusionId()) || !bom.getRevisionId().equals(childBom.getRevisionId())) {\n                        fusionBomRelRepository.findRelation(bom.getFusionId(), bom.getRevisionId(), childBom.getFusionId(), childBom.getRevisionId())\n                                .map(rel -> {\n                                    rel.setQuantity(saved.getQuantity());\n                                    return fusionBomRelRepository.save(rel);\n                                })\n                                .orElseGet(() -> {\n                                    FusionBomRel r = new FusionBomRel();\n                                    r.setParentBom(bom);\n                                    r.setChildBom(childBom);\n                                    r.setQuantity(saved.getQuantity());\n                                    return fusionBomRelRepository.save(r);\n                                });\n                    }\n                });\n        }\n\n        return saved;\n    }\n\n    public Stream<FusionComponentRel> getChildren(FusionComponent component, FusionBom bom){\n        return repository.findChildrenForBom(component.getFusionId(),component.getRevisionId(),bom.getFusionId(),bom.getRevisionId());\n    }\n    @Transactional\n    public FusionComponent create(@NotNull FusionComponentDto dto,@NotNull FusionBom bom) {\n        Optional<FusionComponent> candidate = findLastByPartNumber(dto.getPartNumber(),dto.getRevisionId());\n        FusionComponent item;\n        if(candidate.isPresent()){\n            item =  candidate.get();\n        }else {\n            item = dto.convert(FusionComponent.class);\n            if (!item.getPhysicalProperties().isEmpty()) {\n                for (FusionPhysicalProperty property : item.getPhysicalProperties()) {\n                    if (property.getMaterial() != null) {\n                        Material material = materialRepository.findById(property.getMaterial().getId()).orElseGet(() -> {\n                            Material m = property.getMaterial();\n                            return materialRepository.save(m);\n                        });\n                        property.setMaterial(material);\n                    }\n                }\n            }\n            item = typeDetector.autodetectType(item);\n            item = fusionComponentRepository.save(item);\n        }\n\n        FusionComponentDto parent = dto.getParent();\n        if (!dto.isRoot() && (dto.getParent()==null||dto.getParent().getFusionId()==null)) {\n            throw new BadRequest(\"Component must have to be root or has a parent\");\n        } else  if(parent != null && parent.getFusionId() != null){\n            Optional<FusionComponent> parentItem = fusionComponentRepository.findById(FusionId.id(parent.getFusionId(),parent.getRevisionId()));\n            FusionComponent p = parentItem.orElseThrow(() -> new NotFoundException(parent.getFusionId(), FusionComponent.class));\n            addChild(bom, p, item);\n        }\n\n        return item;\n    }\n    @Valid\n    @Transactional\n    public FusionComponent addChildById(@NotNull FusionBom bom, @NotNull FusionId childId, @NotNull FusionId parentId) {\n        FusionComponent item = findComponentByIdOrThrow(childId);\n        FusionComponent parent = findComponentByIdOrThrow(parentId);\n        addChild(bom, parent, item);\n        fusionComponentRepository.save(item);\n        return item;\n    }\n\n    @Transactional(readOnly = true)\n    public FusionComponent findComponentByIdOrThrow(@NotNull FusionId fusionId){\n        return fusionComponentRepository.findById(fusionId)\n                .orElseThrow(() -> new NotFoundException(fusionId, FusionComponent.class));\n    }\n\n    @Transactional\n    public FusionComponentDto merge(@NotNull String sourceFusionId,\n                                    @NotNull String sourceRevisionId,\n                                    @NotNull String targetFusionId,\n                                    @NotNull String targetRevisionId) {\n        if(sourceFusionId.equals(targetFusionId) && sourceRevisionId.equals(targetRevisionId)) {\n            throw new BadRequest(\"Source and target cannot be the same\");\n        }\n\n        FusionComponentRel sourceRel = repository.findByChild(sourceFusionId, sourceRevisionId)\n                .findFirst()\n                .orElseThrow(() -> new NotFoundException(sourceFusionId, FusionComponentRel.class));\n        FusionComponentRel targetRel = repository.findByChild(targetFusionId, targetRevisionId)\n                .findFirst()\n                .orElseThrow(() -> new NotFoundException(targetFusionId, FusionComponentRel.class));\n\n        if(!sourceRel.getBomId().equals(targetRel.getBomId()) ||\n           !sourceRel.getBomRevisionId().equals(targetRel.getBomRevisionId())) {\n            throw new BadRequest(\"Both items must belong to the same BOM revision\");\n        }\n\n        if(!sourceRel.getFusionParentId().equals(targetRel.getFusionParentId()) ||\n           !sourceRel.getParentRevisionId().equals(targetRel.getParentRevisionId())) {\n            throw new BadRequest(\"Cannot merge items from different assemblies\");\n        }\n\n        Double newQty =\n                (targetRel.getQuantity() == null ? 0d : targetRel.getQuantity()) +\n                (sourceRel.getQuantity() == null ? 0d : sourceRel.getQuantity());\n\n        targetRel.setQuantity(newQty);\n        repository.save(targetRel);\n        repository.delete(sourceRel);\n\n        FusionComponentDto dto = targetRel.getChild().convert(FusionComponentDto.class);\n        dto.setQuantity(newQty);\n        return dto;\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/ComponentGroupService.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.ComponentGroup;\nimport com.ua.crow.plm.database.repo.ComponentGroupRepository;\nimport com.ua.crow.plm.dto.base.ComponentGroupDto;\nimport com.ua.crow.service.graph.AbstractTreeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n\n@Service\npublic class ComponentGroupService extends AbstractTreeService<ComponentGroup, Long> {\n\n    private final ComponentGroupRepository repository;\n\n    @Autowired\n    public ComponentGroupService(ComponentGroupRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<ComponentGroupDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(ComponentGroupDto.class));\n    }\n\n    @Override\n    protected CrudRepository<ComponentGroup, Long> getRepository() {\n        return repository;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/PartNumberProvider.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.PartNumberPool;\nimport com.ua.crow.plm.database.PartNumberReference;\nimport com.ua.crow.plm.database.PartNumberReferenceType;\nimport com.ua.crow.plm.database.repo.PartNumberPoolRepository;\nimport com.ua.crow.plm.service.engbom.BomService;\nimport com.ua.crow.plm.service.fusionbom.FusionBomManagementService;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport jakarta.validation.constraints.NotBlank;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Date;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Service\npublic class PartNumberProvider {\n    @Autowired\n    PartNumberPoolRepository partNumberPool;\n\n    @Autowired\n    BomService bomService;\n\n    @Autowired\n    ComponentService service;\n\n\n\n    @Autowired\n    FusionBomManagementService fusionBomService;\n\n    @Autowired\n    ComponentService componentService;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n\n\n\n    public Optional<PartNumberReference> findOrCreate(Optional<String> partNumber) {\n        if(partNumber.isPresent()&&!\"\".equals(partNumber.get())){\n            return find(partNumber.get()).or(() -> Optional.of(issue()));\n        }else {\n            return Optional.of(issue());\n        }\n    }\n\n    @Transactional\n    public PartNumberReference issue() {\n        PartNumberPool pool = new PartNumberPool();\n        pool.setIssueDate(new Date());\n        PartNumberPool pn = partNumberPool.save(pool);\n        PartNumberReference ref = new PartNumberReference();\n        ref.setPartNumber(pn.getId().toString());\n        ref.setReferenceType(PartNumberReferenceType.POOL);\n        return ref;\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstBom(@NotBlank String partNumber) {\n        return findBoms(partNumber).findFirst();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstFusionBom(@NotBlank String partNumber) {\n        return findFusionBoms(partNumber).findFirst();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstComponent(@NotBlank String partNumber) {\n        return findComponents(partNumber).findFirst();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFirstFusionBomItem(@NotBlank String partNumber) {\n        return findFusionBomItems(partNumber);\n    }\n\n    @Transactional\n    public Stream<PartNumberReference> findBoms(@NotBlank String partNumber) {\n        return bomService.findByPartNumber(partNumber)\n                .map(b -> b.convert(PartNumberReference.class))\n                .toList()\n                .stream();\n    }\n\n    @Transactional\n    public Stream<PartNumberReference> findFusionBoms(@NotBlank String partNumber) {\n        return fusionBomService.readByPartNumber(partNumber)\n                .map(fb -> fb.convert(PartNumberReference.class))\n                .toList()\n                .stream();\n    }\n\n    @Transactional\n    public Stream<PartNumberReference> findComponents(@NotBlank String partNumber) {\n        return componentService.findByPartNumber(partNumber)\n                .map(c -> c.convert(PartNumberReference.class))\n                .toList()\n                .stream();\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> findFusionBomItems(@NotBlank String partNumber) {\n        return fusionBomItemService.findLastByPartNumber(partNumber)\n                .map(fusionBomItem -> fusionBomItem.convert(PartNumberReference.class));\n    }\n\n    @Transactional\n    public Optional<PartNumberReference> find(String partNumber) {\n        return findFirstFusionBomItem(partNumber)\n                .or(() -> findFirstFusionBom(partNumber))\n                .or(() -> findFirstComponent(partNumber))\n                .or(() -> findFirstBom(partNumber))\n                .or(() -> findInPool(partNumber).map(p -> convert(p)));\n    }\n\n    private Optional<PartNumberPool> findInPool(String partNumber) {\n        try {\n            Long id = Long.valueOf(partNumber);\n            return partNumberPool.findById(id);\n        }catch (Exception e){\n            return Optional.empty();\n        }\n\n    }\n\n    private PartNumberReference convert(PartNumberPool p) {\n        PartNumberReference ref = new PartNumberReference();\n        ref.setReferenceType(PartNumberReferenceType.POOL);\n        ref.setPartNumber(p.getId().toString());\n        return ref;\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/PropertyTypeProvider.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeRepository;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Service;\n\nimport jakarta.annotation.PostConstruct;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\n@Lazy\npublic class PropertyTypeProvider {\n\n    private final EngineeringBomItemPropertyTypeRepository repository;\n    private final Map<String, BomItemPropertyType> cache = new HashMap<>();\n\n    public PropertyTypeProvider(EngineeringBomItemPropertyTypeRepository repository) {\n        this.repository = repository;\n    }\n\n    @PostConstruct\n    public void init() {\n        repository.findAll().forEach(pt -> cache.put(pt.getName(), pt));\n    }\n\n    public BomItemPropertyType get(String name) {\n        return cache.get(name);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/RelationshipCache.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.active.BomComponentRel;\nimport com.ua.crow.plm.database.active.BomComponentRelId;\nimport com.ua.crow.plm.database.active.ComponentPartRelationshipId;\nimport com.ua.crow.plm.database.active.ComponentRel;\nimport jakarta.annotation.PreDestroy;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component\npublic class RelationshipCache {\n    private final ThreadLocal<Map<ComponentPartRelationshipId, ComponentRel>> cache = ThreadLocal.withInitial(HashMap::new);\n    private final ThreadLocal<Map<BomComponentRelId, BomComponentRel>> processedBomRels = ThreadLocal.withInitial(HashMap::new);\n\n\n    public Map<ComponentPartRelationshipId, ComponentRel> getProcessedComponentRels() {\n        return cache.get();\n    }\n    public Map<BomComponentRelId, BomComponentRel> getProcessedBomRels() {\n        return processedBomRels.get();\n    }\n\n\n\n\n\n\n    @PreDestroy\n    public void clear() {\n        cache.remove();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/QuantitiveComponent.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.active.ComponentActiveRelease;\nimport lombok.Data;\nimport org.springframework.beans.BeanUtils;\n\n@Data\npublic class QuantitiveComponent extends ComponentActiveRelease {\n    private Double quantity;\n\n    public QuantitiveComponent() {\n        super();\n    }\n\n    public QuantitiveComponent(ComponentActiveRelease componentActiveRelease) {\n        BeanUtils.copyProperties(componentActiveRelease, this);\n    }\n\n    public QuantitiveComponent(ComponentActiveRelease componentActiveRelease,Double quantity) {\n        BeanUtils.copyProperties(componentActiveRelease, this);\n        this.quantity = quantity;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ActiveReleaseProductService.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.plm.database.active.CompleteSet;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.repo.ActiveReleaseProductRepository;\nimport com.ua.crow.plm.database.repo.CompleteSetRepository;\nimport com.ua.crow.plm.database.repo.ReleasedProductRepository;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport static com.ua.crow.plm.database.released.ReleasableId.releasableId;\n\n@Service\npublic class ActiveReleaseProductService {\n\n    @Autowired\n    private ActiveReleaseProductRepository activeReleaseProductRepository;\n    @Autowired\n    private ReleasedProductRepository releasedProductRepository;\n\n    @Autowired\n    CompleteSetRepository completeSetRepository;\n\n    @Value(\"${tempdir.url}\")\n    String tempBufferAddress;\n\n    @Autowired\n    MinioService minioService;\n\n    public Stream<ProductActiveRelease> findAll(boolean deleted) {\n        if(deleted) {\n            return StreamSupport.stream(activeReleaseProductRepository.findAll().spliterator(),false);\n        }else {\n            return StreamSupport.stream(activeReleaseProductRepository.findByDeletedFalse().spliterator(),false);\n        }\n    }\n\n    public Optional<ProductActiveRelease> findById(Long id) {\n        Optional<ProductActiveRelease> activeRelease = activeReleaseProductRepository.findById(releasableId(id));\n        return activeRelease;\n    }\n\n\n    @Transactional\n    public ProductActiveRelease createProduct(ProductActiveReleaseDto dto){\n        ProductActiveRelease productActiveRelease = dto.convert(ProductActiveRelease.class);\n        productActiveRelease = activeReleaseProductRepository.save(productActiveRelease);\n        if(dto.getThumbnailUrl() != null) {\n            productActiveRelease.getAttachmentService().addThumbnail(dto.getThumbnailUrl());\n        }\n        CompleteSet defaultCompleteSet = new CompleteSet();\n        defaultCompleteSet.setName(\"default\");\n        completeSetRepository.save(defaultCompleteSet);\n\n        productActiveRelease.setDefaultCompleteSet(defaultCompleteSet);\n        activeReleaseProductRepository.save(productActiveRelease);\n\n        return productActiveRelease;\n    }\n\n    @Transactional\n    public ProductActiveRelease updateProduct(ProductActiveRelease productActiveRelease) {\n        ProductActiveRelease savedProductActiveRelease = activeReleaseProductRepository.save(productActiveRelease);\n        return savedProductActiveRelease;\n    }\n    public void deleteById(Long id) {\n        activeReleaseProductRepository.deleteById(releasableId(id));\n    }\n\n\n    public Optional<ProductActiveRelease> findByName(String name) {\n        return activeReleaseProductRepository.findByName(name);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/FusionBomCsvAttachment.java =====\npackage com.ua.crow.plm.service.product;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FusionBomCsvAttachment {\n    byte[] file;\n\n    String path;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ProductService.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.plm.database.ReleaseVersion;\nimport com.ua.crow.plm.database.active.CompleteSet;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.ActiveReleaseProductRepository;\nimport com.ua.crow.plm.database.repo.ReleasedProductRepository;\nimport com.ua.crow.service.NotFoundException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport static com.ua.crow.plm.database.released.ReleasableId.releasableId;\n\n@Service\npublic class ProductService {\n    @Autowired\n    ActiveReleaseProductRepository activeReleaseProductRepository;\n    @Autowired\n    ReleasedProductRepository releasedProductRepository;\n\n    public ProductActiveRelease findById(Long id){\n        return activeReleaseProductRepository.findById(releasableId(id)).orElseThrow(()->new NotFoundException(id, ProductService.class));\n    }\n\n\n    @Transactional(readOnly = true)\n    public List<ReleaseVersion> getAllVersions(Long id) {\n        ReleaseVersion current = new ReleaseVersion();\n        current.setId(0L);\n        current.setVer(0d);\n        current.setName(\"HEAD\");\n        return Stream.concat(Stream.of(current),\n                releasedProductRepository.findAllProductReleases(id, false).stream()\n                        .map(product -> product.getReleaseVersion()))\n                .toList();\n    }\n\n    @Transactional(readOnly = true)\n    public CompleteSet getDefaultCompleteSet(Long productId){\n        return activeReleaseProductRepository.findById(ReleasableId.releasableId(productId)).orElseThrow(()->new NotFoundException(\"Default complete set is missing\")).getDefaultCompleteSet();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ProductAttachmentServiceProvider.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.plm.database.base.ProductBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ProductAttachmentServiceProvider {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public ProductAttachmentService create(ProductBase product) {\n        // Создание нового экземпляра ProductAttachmentService с прототипом\n        return applicationContext.getBean(ProductAttachmentService.class, product);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/product/ProductAttachmentService.java =====\npackage com.ua.crow.plm.service.product;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.base.ProductBase;\nimport com.ua.crow.plm.database.released.ProductReleased;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.Optional;\n\n@Service\n@Scope(\"prototype\")\npublic class ProductAttachmentService {\n    private final ProductBase product;\n\n    private static final String THUMB_FOLDER = \"thumbnails/\";\n\n\n    @Autowired\n    private MinioService minio;\n\n    public ProductAttachmentService(ProductBase product) {\n        this.product = product;\n    }\n\n    public String getProductFolder() {\n        if (product.getId()==null){\n            throw new NullPointerException(\"Product must be saved!\");\n        }\n        String path;\n        if(product instanceof ProductActiveRelease) {\n            path = new StringBuilder().append(product.getId()).append(\"_\").append(0).append(\"_\").append(product.getName()).append('/').toString();\n        }else {\n            ProductReleased released = (ProductReleased) product;\n            path = new StringBuilder().append(released.getId()).append(\"_\").append(released.getRelease_ver()).append(\"_\").append(released.getName()).append('/').toString();\n        }\n        return path;\n\n    }\n\n    public String getThumbFolderForProduct() {\n        return new StringBuilder().append(getProductFolder()).append(THUMB_FOLDER).toString();\n    }\n\n\n    public void addThumbnail(String thumbnailUrl) {\n        minio.uploadFileTemporaryStorage(Buckets.products,thumbnailUrl,getThumbFolderForProduct());\n    }\n\n    public void saveFusionBomCsv(Long id,byte[] csv) {\n        minio.put(Buckets.cad,getFusionBomFolder(id)+\"bom.csv\",new ByteArrayInputStream(csv),csv.length, \"text/csv\");\n\n    }\n\n    private String getFusionBomFolder(Long id) {\n        return new StringBuilder().append(getProductFolder()).append(id).append('/').toString();\n    }\n\n    public FusionBomCsvAttachment getFusionBomCsv(Long id) {\n        String objectId = getFusionBomFolder(id) + \"bom.csv\";\n        return new FusionBomCsvAttachment( minio.getObjectAsBytes(Buckets.cad,objectId),objectId);\n    }\n\n    public Optional<String> getFirstThumbnailUrl() {\n        return minio.getSignedUrlForTheFirstObjectInFolder(Buckets.products,getThumbFolderForProduct());\n    }\n\n\n    public void deleteFusionBomCsv(Long id) {\n        String objectId = getFusionBomFolder(id) + \"bom.csv\";\n        minio.delete(Buckets.cad,objectId);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/TypeDetector.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.repo.ItemTypeNameMappingRepository;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class TypeDetector {\n\n    private final ItemTypeNameMappingRepository itemTypeNameMappingRepository;\n    private final Map<String, ItemTypes> cache = new HashMap<>();\n\n    @Autowired\n    public TypeDetector(ItemTypeNameMappingRepository itemTypeNameMappingRepository) {\n        this.itemTypeNameMappingRepository = itemTypeNameMappingRepository;\n    }\n\n    @PostConstruct\n    public void init() {\n        List<ItemTypeNameMapping> allMappings = (List<ItemTypeNameMapping>) itemTypeNameMappingRepository.findAll();\n        for (ItemTypeNameMapping mapping : allMappings) {\n            cache.put(mapping.getName().toLowerCase(), mapping.getType());\n        }\n    }\n\n    public ItemTypes autodetectType(String val, ItemTypes def) {\n        if (val == null) {\n            return def;\n        }\n        for (String key : cache.keySet()) {\n            if (val.toLowerCase().contains(key)) {\n                return cache.get(key);\n            }\n        }\n        return def;\n    }\n\n    public FusionComponent autodetectType(FusionComponent item) {\n        if (item == null) {\n            return null;\n        }\n        if(item.isRoot()){\n            item.setType(ItemTypes.BOM);\n            return item;\n        }\n\n        ItemTypes detectedType = autodetectType(item.getPartName(), item.getType());\n\n        if (detectedType == item.getType()) {\n            detectedType = autodetectType(item.getDescription(), item.getType());\n        }\n\n        item.setType(detectedType);\n        return item;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomCrudService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.BomRelRepository;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.service.RelationshipCache;\nimport com.ua.crow.plm.service.product.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Map;\nimport java.util.Optional;\n\n@Service\npublic class BomCrudService {\n    @Autowired\n    EngineeringBomRepository engineeringBomRepository;\n    @Autowired\n    BomRelRepository bomRelRepository;\n    @Autowired\n    RelationshipCache cache;\n    @Autowired\n    ProductService productService;\n    @Transactional\n    public BomActiveRelease create(BomActiveRelease bom) {\n        bom.setRelease_ver(0L);\n        return engineeringBomRepository.save(bom);\n    }\n\n    @Transactional\n    public Optional<BomActiveRelease> readById(Long id) {\n        return engineeringBomRepository.findById(ReleasableId.releasableId(id))\n                .filter(b -> !b.isDeleted());\n    }\n\n\n    public void addChildToBom(BomActiveRelease bom, ComponentActiveRelease childComponent) {\n        addChildToBom(bom, childComponent, 1d);\n\n    }\n\n    public void addChildToBom(BomActiveRelease bom, ComponentActiveRelease childComponent,Double quantity) {\n        if(bom.getProduct()==null){\n            throw new RuntimeException(\"Invalid product\");\n        }\n        addChildToBom(bom, childComponent, quantity,productService.findById(bom.getProduct().getId()).getDefaultCompleteSet());\n    }\n\n    @Transactional\n    public void addChildToBom(BomActiveRelease bom, ComponentActiveRelease childComponent, Double quantity, CompleteSet completeSet) {\n        Map<BomComponentRelId, BomComponentRel> processed = cache.getProcessedBomRels();\n        BomComponentRelId id = new BomComponentRelId(bom.getId(),bom.getRelease_ver(),childComponent.getId(),childComponent.getRelease_ver(),completeSet.getId());\n        BomComponentRel currentTransaction = processed.get(id);\n        if (currentTransaction!=null){\n            currentTransaction.setQuantity(currentTransaction.getQuantity()+quantity);\n        }else {\n            currentTransaction = bomRelRepository.findById(id).or(()->{\n                BomComponentRel relationship = new BomComponentRel();\n                relationship.setParentBomId(bom.getId());\n                relationship.setParentBomReleaseVer(bom.getRelease_ver());\n                relationship.setChildId(childComponent.getId());\n                relationship.setChildReleaseVer(childComponent.getRelease_ver());\n                relationship.setQuantity(quantity);\n                relationship.setCompleteSetId(completeSet.getId());\n                return relationship.optional();\n            }).get();\n        }\n        processed.put(id,bomRelRepository.save(currentTransaction));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomItemPropertyTypeService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.repo.BomItemPropertyTypeRepository;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class BomItemPropertyTypeService {\n    private final BomItemPropertyTypeRepository repository;\n\n    @Autowired\n    public BomItemPropertyTypeService(BomItemPropertyTypeRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public List<BomItemPropertyType> findAll() {\n        return repository.findAll(Sort.by(\"id\"));\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<BomItemPropertyTypeDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(BomItemPropertyTypeDto.class));\n    }\n\n    @Transactional\n    public BomItemPropertyType save(BomItemPropertyType type) {\n        return repository.save(type);\n    }\n\n    @Transactional\n    public void deleteById(Long id) {\n        repository.deleteById(id);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomItemPropertyTypeGroupService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.database.repo.BomItemPropertyTypeGroupRepository;\nimport com.ua.crow.plm.dto.base.BomItemPropertyTypeGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class BomItemPropertyTypeGroupService {\n    private final BomItemPropertyTypeGroupRepository repository;\n\n    @Autowired\n    public BomItemPropertyTypeGroupService(BomItemPropertyTypeGroupRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public List<BomItemPropertyTypeGroup> findAll() {\n        return repository.findAll(Sort.by(\"id\"));\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<BomItemPropertyTypeGroupDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(BomItemPropertyTypeGroupDto.class));\n    }\n\n    @Transactional\n    public BomItemPropertyTypeGroup save(BomItemPropertyTypeGroup group) {\n        return repository.save(group);\n    }\n\n    @Transactional\n    public void deleteById(Long id) {\n        repository.deleteById(id);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/engbom/BomService.java =====\npackage com.ua.crow.plm.service.engbom;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.base.BaseRel;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.released.BomReleased;\nimport com.ua.crow.plm.database.released.ComponentReleased;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.database.repo.BomReleasedRepository;\nimport com.ua.crow.plm.database.repo.ComponentReleasedRepository;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.service.ComponentService;\nimport com.ua.crow.plm.service.QuantitiveComponent;\nimport com.ua.crow.plm.service.fusionbom.CadToEngBomConversionService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.*;\nimport java.util.stream.Stream;\n\n@Service\npublic class BomService {\n    @Autowired\n    private EngineeringBomRepository engineeringBomRepository;\n    @Autowired\n    BomCrudService bomCrudService;\n    @Autowired\n    ComponentService componentService;\n    @Autowired\n    BomReleasedRepository bomReleasedRepository;\n    @Autowired\n    ComponentReleasedRepository componentReleasedRepository;\n    @Autowired\n    CadToEngBomConversionService cadToEngBomConversionService;\n\n    @Transactional(readOnly = true)\n    public java.util.List<com.ua.crow.plm.database.ReleaseVersion> getAllVersions(Long id) {\n        com.ua.crow.plm.database.ReleaseVersion current = new com.ua.crow.plm.database.ReleaseVersion();\n        current.setId(0L);\n        current.setVer(0d);\n        current.setName(\"HEAD\");\n        return java.util.stream.Stream.concat(java.util.stream.Stream.of(current),\n                bomReleasedRepository.findAllBomReleases(id, false).stream()\n                        .map(com.ua.crow.plm.database.released.BomReleased::getReleaseVersion))\n                .toList();\n    }\n\n    @Transactional(readOnly = true)\n    public Stream<BomActiveRelease> findByPartNumber(@NotBlank String partNumber) {\n        return engineeringBomRepository.findByPartNumber(partNumber);\n    }\n    @Transactional(readOnly = true)\n    public List<EngineeringBomWoChildren> listByProductId(@NotNull Long productId, @NotNull Long releaseVer, Pageable pageable, boolean rootOnly) {\n        if (releaseVer == 0L) {\n            if (rootOnly) {\n                return engineeringBomRepository.findRootBomsByProductId(productId, releaseVer, pageable)\n                        .stream().map(b -> b.convert(EngineeringBomWoChildren.class)).toList();\n            }\n            return engineeringBomRepository.findBomsByProductId(productId, releaseVer, pageable)\n                    .stream().map(b -> b.convert(EngineeringBomWoChildren.class)).toList();\n        }\n        if (rootOnly) {\n            return bomReleasedRepository.findRootBomsByProductId(productId, releaseVer, pageable)\n                    .stream().map(this::convertReleasedBom).toList();\n        }\n        return bomReleasedRepository.findBomsByProductId(productId, releaseVer, pageable)\n                .stream().map(this::convertReleasedBom).toList();\n    }\n\n    public Stream<EngineeringBomWoChildren> listOfRootsByProductId(@NotNull Long productId, @NotNull Long releaseVer) {\n        if (releaseVer == 0L) {\n            return engineeringBomRepository.findRootBomsByProductId(productId, releaseVer)\n                    .map(b -> b.convert(EngineeringBomWoChildren.class));\n        }\n        return bomReleasedRepository.findRootBomsByProductId(productId, releaseVer)\n                .map(this::convertReleasedBom);\n    }\n\n    public Optional<EngineeringBomWoChildren> readShortDtoById(Long id, Long release) {\n        if (release == null || release == 0L) {\n            return engineeringBomRepository.findById(ReleasableId.releasableId(id))\n                    .filter(b -> !b.isDeleted())\n                    .map(b -> b.convert(EngineeringBomWoChildren.class));\n        }\n        return bomReleasedRepository.findById(new ReleasableId(id, release))\n                .filter(b -> !b.isDeleted())\n                .map(this::convertReleasedBom);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<BomActiveReleaseDto> readDtoTreeById(Long id, Long release) {\n        if (release == null || release == 0L) {\n            return bomCrudService.readById(id)\n                    .filter(b -> !b.isDeleted())\n                    .map(bom -> {\n                        BomActiveReleaseDto dto = bom.convert(BomActiveReleaseDto.class);\n                        java.util.Set<ComponentActiveReleaseDto> children = bom.getChildren().stream()\n                                .map(rel -> readComponentsrecursive(rel.getChild()))\n                                .collect(java.util.stream.Collectors.toSet());\n                        dto.setChildren(children);\n                        return dto;\n                    });\n        }\n        return bomReleasedRepository.findById(new ReleasableId(id, release))\n                .filter(b -> !b.isDeleted())\n                .map(bom -> {\n                    BomActiveReleaseDto dto = new BomActiveReleaseDto();\n                    dto.setId(bom.getId());\n                    dto.setName(bom.getName());\n                    dto.setPartNumber(bom.getPartNumber());\n                    dto.setDescription(bom.getDescription());\n                    dto.setFusionVersion(bom.getFusionVersion());\n                    dto.setFusionId(bom.getFusionId());\n                    dto.setLibraryItem(bom.isLibraryItem());\n                    dto.setFusionRevisionId(bom.getFusionRevisionId());\n                    dto.setConfiguration(bom.isConfiguration());\n                    dto.setConfiguredDesign(bom.isConfiguredDesign());\n                    dto.setConsistent(bom.isConsistent());\n                    java.util.Set<ComponentActiveReleaseDto> children = componentReleasedRepository\n                            .findByParentBom(id, release)\n                            .stream()\n                            .map(this::readComponentsrecursive)\n                            .collect(java.util.stream.Collectors.toSet());\n                    dto.setChildren(children);\n                    return dto;\n                });\n    }\n\n    @Transactional\n    public List<ComponentActiveReleaseDto> readComponents(Long id, Long release) {\n        if (release == null || release == 0L) {\n            BomActiveRelease bomActiveRelease = bomCrudService.readById(id)\n                    .orElseThrow(() -> new NotFoundException(id, BomActiveRelease.class));\n            List<ComponentActiveReleaseDto> children = bomActiveRelease.getChildren().stream()\n                    .map(c -> readComponentsrecursive(c.getChild()))\n                    .toList();\n            ComponentActiveReleaseDto root = convertBomToComponent(bomActiveRelease, children);\n            return java.util.List.of(root);\n        }\n        BomReleased bom = bomReleasedRepository.findById(new ReleasableId(id, release))\n                .orElseThrow(() -> new NotFoundException(id, BomReleased.class));\n        List<ComponentActiveReleaseDto> children = componentReleasedRepository.findByParentBom(id, release)\n                .stream()\n                .map(this::readComponentsrecursive)\n                .toList();\n        ComponentActiveReleaseDto root = convertBomToComponent(bom, children);\n        return java.util.List.of(root);\n    }\n\n    private ComponentActiveReleaseDto convertBomToComponent(BomActiveRelease bom, java.util.List<ComponentActiveReleaseDto> children) {\n        ComponentActiveReleaseDto dto = new ComponentActiveReleaseDto();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        dto.setDescription(bom.getDescription());\n        dto.setItemType(ItemTypes.BOM.name());\n        dto.setParts(children);\n        return dto;\n    }\n\n    private ComponentActiveReleaseDto convertBomToComponent(BomReleased bom, java.util.List<ComponentActiveReleaseDto> children) {\n        ComponentActiveReleaseDto dto = new ComponentActiveReleaseDto();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        dto.setDescription(bom.getDescription());\n        dto.setItemType(ItemTypes.BOM.name());\n        dto.setParts(children);\n        return dto;\n    }\n\n\n    private ComponentActiveReleaseDto readComponentsrecursive(ComponentActiveRelease comp) {\n        ComponentActiveReleaseDto res = comp.convert(ComponentActiveReleaseDto.class);\n        for (ComponentRel rel : comp.getParts()) {\n            ComponentActiveReleaseDto child = readComponentsrecursive(rel.getChild());\n            child.setQuantity(rel.getQuantity());\n            res.getParts().add(child);\n        }\n        return res;\n    }\n\n    @Transactional\n    public Stream<QuantitiveComponent> shortList(Long id) {\n        HashMap<String, QuantitiveComponent> shortList = new HashMap<>();\n        BomActiveRelease bom = bomCrudService.readById(id).orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        for (BomComponentRel c : bom.getChildren()) {\n            shortList(c, shortList);\n        }\n        return shortList.values().stream();\n    }\n\n\n    private void shortList(BaseRel root, HashMap<String, QuantitiveComponent> shortList) {\n        QuantitiveComponent i = shortList.get(root.getChild().getPartNumber());\n        if (i != null) {\n            i.setQuantity(i.getQuantity() + 1);\n        } else {\n            shortList.put(root.getChild().getPartNumber(), new QuantitiveComponent(root.getChild(), root.getQuantity()));\n        }\n        for (ComponentRel item : root.getChild().getParts()) {\n            shortList(item, shortList);\n        }\n    }\n\n    @Transactional\n    public BomActiveRelease importFusionBom(FusionId id) {\n        return cadToEngBomConversionService.importFusionBom(id);\n    }\n\n    @Transactional\n    public Optional<BomActiveReleaseDto> readDtoById(Long id) {\n        return bomCrudService.readById(id).orElseThrow(()->new NotFoundException(id,BomActiveRelease.class)).convert(BomActiveReleaseDto.class).optional();\n    }\n\n    private EngineeringBomWoChildren convertReleasedBom(BomReleased bom) {\n        EngineeringBomWoChildren dto = new EngineeringBomWoChildren();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        return dto;\n    }\n\n    private ComponentActiveReleaseDto readComponentsrecursive(ComponentReleased comp) {\n        ComponentActiveReleaseDto res = new ComponentActiveReleaseDto();\n        res.setId(comp.getId());\n        res.setName(comp.getName());\n        res.setPartNumber(comp.getPartNumber());\n        if (comp.getParts() != null) {\n            List<ComponentActiveReleaseDto> children = comp.getParts().stream()\n                    .map(this::readComponentsrecursive).toList();\n            res.setParts(children);\n        }\n        return res;\n    }\n\n    @Transactional\n    public BomActiveRelease softDelete(Long id, boolean deleteComponents) {\n        BomActiveRelease bom = bomCrudService.readById(id)\n                .orElseThrow(() -> new NotFoundException(id, BomActiveRelease.class));\n        if (deleteComponents) {\n            // Use a defensive copy to avoid ConcurrentModificationException when\n            // Hibernate flushes updates while iterating over the collection\n            for (BomComponentRel rel : new java.util.ArrayList<>(bom.getChildren())) {\n                ComponentActiveRelease child = rel.getChild();\n                if (child != null && !child.isDeleted()) {\n                    child.setDeleted(true);\n                    componentService.save(child);\n                }\n            }\n        }\n        bom.setDeleted(true);\n        engineeringBomRepository.save(bom);\n        return bom;\n    }\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/ItemTypeNameMappingService.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.database.repo.ItemTypeNameMappingRepository;\nimport com.ua.crow.plm.dto.base.ItemTypeNameMappingDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.StreamSupport;\n\n@Service\npublic class ItemTypeNameMappingService {\n    private final ItemTypeNameMappingRepository repository;\n\n    @Autowired\n    public ItemTypeNameMappingService(ItemTypeNameMappingRepository repository) {\n        this.repository = repository;\n    }\n\n    @Transactional(readOnly = true)\n    public List<ItemTypeNameMapping> findAll() {\n        return StreamSupport.stream(repository.findAll().spliterator(), false).toList();\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<ItemTypeNameMappingDto> findById(Long id) {\n        return repository.findById(id).map(e -> e.convert(ItemTypeNameMappingDto.class));\n    }\n\n    @Transactional\n    public ItemTypeNameMapping save(ItemTypeNameMapping mapping) {\n        return repository.save(mapping);\n    }\n\n    @Transactional\n    public void deleteById(Long id) {\n        repository.deleteById(id);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/ComponentService.java =====\npackage com.ua.crow.plm.service;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.ComponentRelRepository;\nimport com.ua.crow.plm.database.repo.ComponentRepository;\nimport com.ua.crow.plm.database.repo.ComponentPropertiesRepository;\nimport com.ua.crow.plm.dto.requests.ComponentRequestDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.service.product.ProductService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Stream;\n\n@Service\npublic class ComponentService {\n    @Autowired\n    ComponentRepository componentRepository;\n\n    @Autowired\n    ComponentPropertiesRepository propertiesRepository;\n\n    @Autowired\n    ProductService productService;\n    @Autowired\n    private ComponentRelRepository componentRelRepo;\n\n\n    @Transactional\n    public Stream<ComponentActiveRelease> findByPartNumber(String partNumber) {\n        return componentRepository.findByPartNumber(partNumber);\n    }\n\n\n    @Transactional\n    public ComponentActiveRelease merge(@NotNull Long itemId, @NotNull Set<Long> items) {\n        ComponentActiveRelease item = componentRepository.findById(ReleasableId.releasableId(itemId))\n                .orElseThrow(() -> new NotFoundException(itemId, FusionComponent.class));\n        Double qty = 1d + items.size();\n        for (Long i : items) {\n            ComponentActiveRelease itemToMerge = componentRepository.findById(ReleasableId.releasableId(i))\n                    .orElseThrow(() -> new NotFoundException(itemId, FusionComponent.class));\n            itemToMerge.setDescription(item.getDescription());\n            itemToMerge.setPartNumber(item.getPartNumber());\n            itemToMerge.setName(item.getName());\n            itemToMerge.setItemType(item.getItemType());\n            componentRepository.save(itemToMerge);\n        }\n        return item;\n    }\n\n    @Transactional\n    public Optional<ComponentActiveRelease> findByPartNumberAndBomId(String partNumber, Long id) {\n        return componentRepository.findByPartNumberAndBomId(partNumber, id);\n    }\n\n    public Stream<ComponentActiveReleaseDto> list(ComponentRequestDto req) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Transactional\n    public ComponentActiveRelease save(ComponentActiveRelease child) {\n        return componentRepository.save(child);\n    }\n\n    @Autowired\n    RelationshipCache cache;\n\n\n    @Transactional\n    public void addChild(ComponentActiveRelease parent, ComponentActiveRelease child, double quantity, BomActiveRelease bom) {\n        addChild(parent, child, quantity, bom, productService.getDefaultCompleteSet(bom.getProduct().getId()));\n    }\n\n\n    private void addChild(ComponentActiveRelease parent, ComponentActiveRelease child, double quantity, BomActiveRelease bom, CompleteSet completeSet) {\n        Map<ComponentPartRelationshipId, ComponentRel> processed = cache.getProcessedComponentRels();\n        if (bom == null || bom.getId() == null || completeSet == null) {\n            throw new RuntimeException(\"Complete set and bom should not be empty\");\n        }\n\n\n        ComponentPartRelationshipId id = new ComponentPartRelationshipId(parent.getId(), parent.getRelease_ver(),\n                child.getId(), child.getRelease_ver(), bom.getId(), bom.getRelease_ver(), completeSet.getId());\n        ComponentRel existingTransactionRel = processed.get(id);\n\n        if (existingTransactionRel != null) {\n            existingTransactionRel.setQuantity(existingTransactionRel.getQuantity() + quantity);\n        } else if (existingTransactionRel == null) {\n            existingTransactionRel = componentRelRepo.findById(id).or(() -> {\n                ComponentRel relationship = new ComponentRel();\n                relationship.setBomId(bom.getId());\n                relationship.setBomVersion(bom.getRelease_ver());\n                relationship.setCompleteSetId(completeSet.getId());\n                relationship.setParent(parent);\n                relationship.setParentId(parent.getId());\n                relationship.setParentReleaseVer(parent.getRelease_ver());\n                relationship.setChildId(child.getId());\n                relationship.setChildReleaseVer(child.getRelease_ver());\n                relationship.setQuantity(quantity);\n                return Optional.of(relationship);\n            }).get();\n        }\n\n\n        processed.put(id, componentRelRepo.save(existingTransactionRel));\n\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomFileService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.service.minio.MinioService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\n\n@Service\npublic class FusionBomFileService {\n\n    private static final String STEP_NAME = \"model.step\";\n\n    @Autowired\n    private MinioService minioService;\n\n    @Autowired\n    private FusionBomRepository fusionBomRepository;\n\n    private String getFolder(FusionId id) {\n        return new StringBuilder()\n                .append(\"fusionbom/\")\n                .append(id.getFusionId())\n                .append('_')\n                .append(id.getRevisionId())\n                .append('/')\n                .toString();\n    }\n\n    public void uploadStepFile(FusionId id, MultipartFile file) throws IOException {\n        String objectName = getFolder(id) + STEP_NAME;\n        minioService.put(Buckets.cad, objectName, file.getInputStream(), file.getSize(), file.getContentType());\n    }\n\n    public String getStepFileUrl(FusionBom bom) {\n        String objectName = getFolder(FusionId.id(bom.getFusionId(), bom.getRevisionId())) + STEP_NAME;\n        if (!minioService.exist(Buckets.cad, objectName)) {\n            return null;\n        }\n        return minioService.sign(Buckets.cad, objectName);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomTreeService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionComponentRel;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.HashSet;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Stream;\nimport java.util.stream.Collectors;\n\n@Service\n@Validated\npublic class FusionBomTreeService {\n\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n    @Autowired\n    FusionComponentRelRepository componentRelRepository;\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId){\n        return readFullTree(fusionId, false);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId, boolean includeBodies){\n        return fusionBomRepository.findById(fusionId)\n            .filter(fb -> !fb.isDeleted() && fb.isConsistent())\n            .map(fb -> buildFullTreeDto(fb, includeBodies));\n    }\n\n    public Stream<FusionComponentRel> findChildrenForBom(FusionComponent parent, @NotNull FusionBom bom) {\n        return componentRelRepository.findChildrenForBom(parent.getFusionId(),parent.getRevisionId(), bom.getFusionId(),bom.getRevisionId());\n    }\n\n    private FusionBomDto buildFullTreeDto(FusionBom fusionBom, boolean includeBodies) {\n        FusionBomDto dto = fusionBom.convert(FusionBomDto.class);\n        FusionComponent rootComponent = fusionBom.getRoot();\n        dto.setRootPart(convertComponentTree(rootComponent, fusionBom, new HashSet<>(), includeBodies));\n        return dto;\n    }\n\n    private FusionComponentDto convertComponentTree(FusionComponent component, FusionBom bom, Set<String> visited, boolean includeBodies) {\n        if (visited.contains(component.getFusionId())) {\n            throw new IllegalStateException(\"Cycle detected for component ID: \" + component.getFusionId());\n        }\n        visited.add(component.getFusionId());\n        FusionComponentDto componentDto = component.convert(FusionComponentDto.class);\n        if (includeBodies) {\n            componentDto.setBodies(component.getPhysicalProperties().stream()\n                    .map(p -> p.convert(Body.class))\n                    .collect(Collectors.toSet()));\n        }\n        fusionBomItemService.getChildren(component, bom).forEach(childRel -> {\n            FusionComponentDto childDto = convertComponentTree(childRel.getChild(), bom, visited, includeBodies);\n            childDto.setQuantity(childRel.getQuantity());\n            componentDto.addChild(childDto);\n        });\n\n        visited.remove(component.getFusionId());\n        return componentDto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomImportService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.ResourceAlreadyExist;\nimport jakarta.validation.constraints.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n\n@Service\npublic class FusionBomImportService {\n    @Autowired\n    FusionBomManagementService fusionBomService;\n    @Autowired\n    FusionBomFacadeService fusionBomFacadeService;\n\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n\n    @Autowired\n    FusionComponentRelRepository fusionComponentRelRepository;\n\n    private static final Logger logger = LoggerFactory.getLogger(FusionBomImportService.class);\n    private static final int TRANSACTION_TIMEOUT_SECONDS = 60;  // Example timeout duration\n\n\n    @Autowired\n    private JpaTransactionManager tm;\n\n\n    @Transactional(propagation = Propagation.REQUIRED)\n    public FusionBomDto save(@NotNull FusionBomDto dto) {\n        FusionId fusionId = FusionId.id(dto.getFusionId(), dto.getRevisionId());\n        Optional<FusionBom> fbo = checkIfExists(fusionId);\n        if (fbo.isPresent()) {\n            FusionBom existing = fbo.get();\n            if (dto.getProduct() != null) {\n                existing.setProduct(dto.getProduct().convert(ProductActiveRelease.class));\n            }\n            existing.setDocumentName(dto.getDocumentName());\n            existing.setVersion(dto.getVersion());\n            existing.setProcessed(dto.isProcessed());\n            existing.setEngineeringBomId(dto.getEngineeringBomId());\n            existing.setDescription(dto.getDescription());\n            existing.setLibraryItem(dto.isLibraryItem());\n            existing.setPartNumber(dto.getPartNumber());\n            existing.setConfiguration(dto.isConfiguration());\n            existing.setConfiguredDesign(dto.isConfiguredDesign());\n            existing.setDeleted(dto.isDeleted());\n            existing.setName(dto.getName());\n            if (dto.getRootPart() != null) {\n                FusionComponentDto rootDto = dto.getRootPart();\n                rootDto.setRoot(true);\n                FusionComponent root = fusionBomService.updateItem(rootDto.convert(FusionComponent.class), true);\n                existing.setRoot(root);\n            }\n            FusionBom saved = fusionBomRepository.save(existing);\n            fusionBomService.ensureBomRelations(saved);\n            return saved.convert(FusionBomDto.class);\n        } else {\n            return fusionBomFacadeService.create(dto);\n        }\n    }\n\n    @Transactional\n    public Optional<FusionBom> checkIfExists(FusionId fusionId) {\n        Optional<FusionBom> bom = fusionBomRepository.findById(fusionId);\n        return bom;\n\n    }\n\n    public FusionComponent saveItem(FusionComponentDto dto) {\n        FusionId componentId = FusionId.id(dto.getFusionId(), dto.getRevisionId());\n        Optional<FusionComponent> existing = fusionBomService.fusionComponentRepository.findById(componentId);\n        if (existing.isPresent()) {\n            return fusionBomService.updateItem(dto.convert(FusionComponent.class), true);\n        }\n        return fusionBomService.createItem(dto);\n\n    }\n\n\n    public FusionComponent addChildItem(AddChildRequest dto) {\n        return fusionBomService.addChildItem(dto);\n    }\n\n    public FusionBom delete(FusionId id) {\n        return fusionBomService.hardDeleteBomRelations(id);\n    }\n\n    public FusionBomDto commitTransaction(FusionId id) {\n        return fusionBomService.commit(id).convert(FusionBomDto.class);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/CadToEngBomConversionService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.active.*;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionComponentRel;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.fusion.FusionBomEngineeringBom;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.service.engbom.BomCrudService;\nimport com.ua.crow.plm.service.ComponentService;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport com.ua.crow.plm.service.RelationshipCache;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CadToEngBomConversionService {\n    @Autowired\n    FusionBomManagementService fusionBomService;\n\n    @Autowired\n    FusionBomTreeService fusionBomTreeService;\n\n    @Autowired\n    FusionBomItemService fusionBomItemService;\n\n    @Autowired\n    private EngineeringBomRepository engineeringBomRepository;\n\n    @Autowired\n    BomCrudService bomCrudService;\n\n    @Autowired\n    ComponentService componentService;\n\n    @Autowired\n    RelationshipCache relationshipCache;\n\n    private double toQuantity(Double quantity) {\n        return quantity == null ? 1d : quantity;\n    }\n\n    @Transactional\n    public BomActiveRelease importFusionBom(@NotNull FusionId id) {\n\n        FusionBom fb = fusionBomService.readById(id).orElseThrow(() -> new NotFoundException(id, FusionComponent.class));\n        BomActiveRelease ebom = bomCrudService.create(fb.convert(BomActiveRelease.class));\n        fb.setEngineeringBomId(ebom.getId());\n        ebom.getFusionBoms()\n            .add(new FusionBomEngineeringBom(fb, ebom,\n                \"Engineering BOM creation using Fusion 360 model\"));\n        fusionBomService.save(fb);\n        ebom.setRoot(true);\n        fusionBomItemService.getChildren(fb.getRoot(), fb).forEach(c -> {\n            ComponentActiveRelease component = convertToEngineeringBomItemRecursive(ebom, c, fb);\n            if (component != null) {\n                component.setParentBom(ebom);\n                bomCrudService.addChildToBom(ebom, component, toQuantity(c.getQuantity()));\n            }\n        });\n        ebom.setConsistent(true);\n        return engineeringBomRepository.save(ebom);\n    }\n\n    @Transactional(propagation = Propagation.REQUIRED)\n    public ComponentActiveRelease convertToEngineeringBomItemRecursive(BomActiveRelease bomParent,  FusionComponentRel fusionComponentRel, @NotNull FusionBom fusionBom) {\n        FusionComponent fusionComponent = fusionComponentRel.getChild();\n\n        if (fusionComponent.getType() == ItemTypes.NONE) {\n            return null;\n        }\n\n        ComponentActiveRelease component = componentService\n                .findByPartNumberAndBomId(fusionComponent.getPartNumber(), bomParent.getId())\n                .orElse(componentService.save(fusionComponent.convert(ComponentActiveRelease.class)));\n        component.setParentBom(bomParent);\n        switch (fusionComponent.getType()) {\n            case BOM -> {\n                BomActiveRelease childBom = fusionComponent.convert(BomActiveRelease.class);\n                childBom.setProduct(fusionBom.getProduct());\n                childBom.setParentComponent(component);\n                childBom = bomCrudService.create( childBom);\n                List<FusionComponentRel> children = fusionBomTreeService.findChildrenForBom(fusionComponent, fusionBom).collect(Collectors.toList());\n                for (FusionComponentRel f : children) {\n                    ComponentActiveRelease c = convertToEngineeringBomItemRecursive(childBom, f, fusionBom);\n                    if (c != null) {\n                        bomCrudService.addChildToBom(childBom, c, toQuantity(f.getQuantity()));\n                        componentService.addChild(component, c, toQuantity(f.getQuantity()), childBom);\n                    }\n                }\n                childBom = bomCrudService.create(childBom);\n                component.setChildBom(childBom);\n                //create new bom\n            }\n            case THRDPARTY, FASTENER -> {\n                //leaf components without child BOMs\n            }\n            case PART, COMPONENT -> {\n                fusionBomItemService.getChildren(fusionComponent, fusionBom).forEach(fbiRel -> {\n                    ComponentActiveRelease child = convertToEngineeringBomItemRecursive(bomParent, fbiRel, fusionBom);\n                    if (child != null) {\n                        double qty = toQuantity(fbiRel.getQuantity());\n                        componentService.addChild(component, child, qty, bomParent);\n                        bomCrudService.addChildToBom(bomParent, child, qty);\n                    }\n                });\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Merges the structure of the given Fusion BOM into an existing Engineering BOM.\n     * Components are created if missing and appended to the target BOM root.\n     */\n    @Transactional\n    public BomActiveRelease mergeFusionIntoEngineeringBom(@NotNull FusionId id, @NotNull Long engineeringBomId) {\n        FusionBom fb = fusionBomService.readById(id)\n                .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        BomActiveRelease ebom = bomCrudService.readById(engineeringBomId)\n                .orElseThrow(() -> new NotFoundException(engineeringBomId, BomActiveRelease.class));\n\n        fusionBomItemService.getChildren(fb.getRoot(), fb).forEach(rel -> {\n            ComponentActiveRelease component = convertToEngineeringBomItemRecursive(ebom, rel, fb);\n            if (component != null) {\n                component.setParentBom(ebom);\n                bomCrudService.addChildToBom(ebom, component, toQuantity(rel.getQuantity()));\n            }\n        });\n\n        return engineeringBomRepository.save(ebom);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomManagementService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.active.ProductActiveRelease;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionBomRel;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.ActiveReleaseProductRepository;\nimport com.ua.crow.plm.database.repo.FusionBomRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRelRepository;\nimport com.ua.crow.plm.database.repo.FusionComponentRepository;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.plm.service.fusionbomitem.FusionBomItemService;\nimport com.ua.crow.service.NotFoundException;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\n@Service\n@Validated\npublic class FusionBomManagementService {\n\n    @Autowired\n    FusionBomRepository fusionBomRepository;\n\n    @Autowired\n    FusionComponentRepository fusionComponentRepository;\n\n    @Autowired\n    FusionComponentRelRepository fusionComponentRelRepository;\n\n    @Autowired\n    com.ua.crow.plm.database.repo.FusionBomRelRepository fusionBomRelRepository;\n\n    @Autowired\n    ActiveReleaseProductRepository productRepository;\n\n    @Autowired\n    FusionBomItemService itemService;\n\n    /**\n     * Ensures that BOM-to-BOM relations exist for the given BOM. When a BOM is\n     * created after its parent assemblies were uploaded, the relations to those\n     * parent BOMs are not created automatically. This method scans all\n     * {@link com.ua.crow.plm.database.fusion.FusionComponentRel} entries where\n     * the current BOM's root component is used as a child and creates the\n     * corresponding {@link com.ua.crow.plm.database.fusion.FusionBomRel}\n     * relations if they are missing.\n     */\n    @Transactional\n    public void ensureBomRelations(@NotNull FusionBom bom) {\n        FusionComponent root = bom.getRoot();\n        if (root == null) {\n            return;\n        }\n\n        fusionComponentRelRepository\n            .findByChild(root.getFusionId(), root.getRevisionId())\n            .forEach(rel -> {\n                FusionId parentId = new FusionId(rel.getBomId(), rel.getBomRevisionId());\n                fusionBomRepository.findById(parentId).ifPresent(parentBom -> {\n                    // Skip relation to itself\n                    if (parentBom.getFusionId().equals(bom.getFusionId()) &&\n                        parentBom.getRevisionId().equals(bom.getRevisionId())) {\n                        return;\n                    }\n\n                    fusionBomRelRepository\n                        .findRelation(parentBom.getFusionId(), parentBom.getRevisionId(),\n                                       bom.getFusionId(), bom.getRevisionId())\n                        .map(existing -> {\n                            existing.setQuantity(rel.getQuantity());\n                            return fusionBomRelRepository.save(existing);\n                        })\n                        .orElseGet(() -> {\n                            FusionBomRel r = new FusionBomRel();\n                            r.setParentBom(parentBom);\n                            r.setChildBom(bom);\n                            r.setQuantity(rel.getQuantity());\n                            return fusionBomRelRepository.save(r);\n                        });\n                });\n            });\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBom> readById(@NotNull FusionId fusionId) {\n        return fusionBomRepository.findById(fusionId).filter(fb -> !fb.isDeleted() && fb.isConsistent());\n    }\n    @Transactional\n    public FusionBom create(@NotNull FusionBom bom, FusionComponentDto dtoRoot) {\n        bom = fusionBomRepository.save(bom);\n        bom.setRoot(itemService.create(dtoRoot, bom));\n        // If this BOM's root component already exists in other assemblies,\n        // create corresponding BOM hierarchy relations immediately.\n        ensureBomRelations(bom);\n        return bom;\n    }\n\n    @Transactional\n    public FusionBom commit(@NotNull FusionId id) {\n        FusionBom bom = fusionBomRepository.findById(id)\n            .filter(f->!f.isDeleted())\n            .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        bom.setConsistent(true);\n        return fusionBomRepository.save(bom);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readDtoById(@NotNull FusionId fusionId) {\n        return fusionBomRepository.findById(fusionId)\n            .filter(fb -> !fb.isDeleted() && fb.isConsistent())\n            .map(f->f.convert(FusionBomDto.class));\n    }\n\n    @Transactional(readOnly = true)\n    public Stream<FusionBom> readAll() {\n        return fusionBomRepository.findNotDeleted();\n    }\n\n\n    @Transactional\n    public FusionComponent updateItem(FusionComponent updatedComponent, boolean updatePhysicalProperties) {\n        FusionComponent existingComponent = fusionComponentRepository\n                .findById(new FusionId(updatedComponent.getFusionId(), updatedComponent.getRevisionId()))\n                .orElseThrow(() -> new NotFoundException(updatedComponent.getFusionId(), FusionComponent.class));\n        existingComponent.setType(updatedComponent.getType());\n        existingComponent.setPartName(updatedComponent.getPartName());\n        existingComponent.setPartNumber(updatedComponent.getPartNumber());\n        existingComponent.setDescription(updatedComponent.getDescription());\n        existingComponent.setSourceFile(updatedComponent.getSourceFile());\n        existingComponent.setPath(updatedComponent.getPath());\n        existingComponent.setRoot(updatedComponent.isRoot());\n        existingComponent.setTenantId(updatedComponent.getTenantId());\n        existingComponent.setDeleted(updatedComponent.isDeleted());\n        if (updatePhysicalProperties) {\n            existingComponent.getPhysicalProperties().clear();\n            existingComponent.getPhysicalProperties().addAll(updatedComponent.getPhysicalProperties());\n\n        }\n        FusionComponent savedComponent = fusionComponentRepository.save(existingComponent);\n        return savedComponent;\n    }\n\n    @Transactional\n    public FusionComponent addChildItem(@NotNull AddChildRequest dto) {\n        FusionBom fusionBom = fusionBomRepository.findById(dto.getBomId())\n            .orElseThrow(() -> new NotFoundException(dto.getBomId(), FusionBom.class));\n\n        return itemService.addChildById(fusionBom, dto.getChildId(), dto.getParentId());\n    }\n\n    @Transactional\n    public FusionBom hardDeleteBomRelations(@NotNull FusionId id) {\n        FusionBom fb = fusionBomRepository.findById(id)\n            .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        fusionComponentRelRepository.hardDeleteBomRelations(id.getFusionId(), id.getRevisionId());\n        fusionBomRepository.delete(fb);\n        return fb;\n    }\n\n    @Transactional\n    public void unlinkFromParents(@NotNull FusionId id) {\n        fusionBomRelRepository.findParents(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionBomRelRepository::delete);\n        fusionComponentRelRepository.findByChild(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionComponentRelRepository::delete);\n    }\n\n    @Transactional\n    public FusionBom softDelete(@NotNull FusionId id) {\n        unlinkFromParents(id);\n        FusionBom fb = fusionBomRepository.findById(id)\n                .orElseThrow(() -> new NotFoundException(id, FusionBom.class));\n        fb.setDeleted(true);\n        return fusionBomRepository.save(fb);\n    }\n\n    @Transactional\n    public FusionComponent createItem(@NotNull FusionComponentDto bomItemDto) {\n        FusionId fusionId = FusionId.id(bomItemDto.getParentBom().getFusionId(), bomItemDto.getParentBom().getRevisionId());\n        FusionBom bom = fusionBomRepository.findById(fusionId)\n                .orElseThrow(() -> new NotFoundException(fusionId, FusionBom.class));\n\n        return itemService.create(bomItemDto, bom);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readUnprocessedBomsByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findUnprocessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readProcessedBomsByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findProcessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findByProductIdAndReleaseVerConsistentNotDeleted(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readRootUnprocessedByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findRootUnprocessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readRootProcessedByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findRootProcessedByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBom> readRootByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return fusionBomRepository.findRootByProductId(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public Stream<FusionBom> readRootAll() {\n        return fusionBomRepository.findRootNotDeleted();\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> buildBomTree(java.util.List<FusionBom> boms, java.util.List<FusionBom> roots) {\n        java.util.Map<com.ua.crow.plm.database.fusion.FusionId, FusionBomDto> map = boms.stream()\n                .collect(java.util.stream.Collectors.toMap(\n                        b -> new FusionId(b.getFusionId(), b.getRevisionId()),\n                        b -> b.convert(FusionBomDto.class)));\n\n        boms.forEach(b -> {\n            java.util.List<com.ua.crow.plm.database.fusion.FusionBomRel> rels =\n                    fusionBomRelRepository.findChildren(b.getFusionId(), b.getRevisionId());\n            FusionBomDto parentDto = map.get(new FusionId(b.getFusionId(), b.getRevisionId()));\n            rels.forEach(r -> {\n                com.ua.crow.plm.database.fusion.FusionId cid = new FusionId(r.getChildBomId(), r.getChildBomRevisionId());\n                FusionBomDto childDto = map.get(cid);\n                if (childDto != null) {\n                    if (parentDto.getChildren().isEmpty()) {\n                        parentDto.setChildren(new java.util.ArrayList<>());\n                    }\n                    parentDto.getChildren().add(copyDto(childDto));\n                }\n            });\n        });\n\n        java.util.Set<com.ua.crow.plm.database.fusion.FusionId> rootIds = roots.stream()\n                .map(r -> new FusionId(r.getFusionId(), r.getRevisionId()))\n                .collect(java.util.stream.Collectors.toSet());\n\n        return rootIds.stream()\n                .map(map::get)\n                .filter(java.util.Objects::nonNull)\n                .collect(java.util.stream.Collectors.toList());\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> readUnprocessedBomTreeByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        java.util.List<FusionBom> all = readUnprocessedBomsByProduct(productId, releaseVer);\n        java.util.List<FusionBom> roots = readRootUnprocessedByProduct(productId, releaseVer);\n        return buildBomTree(all, roots);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> readProcessedBomTreeByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        java.util.List<FusionBom> all = readProcessedBomsByProduct(productId, releaseVer);\n        java.util.List<FusionBom> roots = readRootProcessedByProduct(productId, releaseVer);\n        return buildBomTree(all, roots);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<FusionBomDto> readBomTreeByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        java.util.List<FusionBom> all = readByProduct(productId, releaseVer);\n        java.util.List<FusionBom> roots = readRootByProduct(productId, releaseVer);\n        return buildBomTree(all, roots);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> readRevisionDtos(\n            @NotNull Long productId,\n            @NotNull Long releaseVer,\n            @NotBlank String fusionId) {\n        java.util.List<FusionBom> list = readByProduct(productId, releaseVer)\n                .stream()\n                .filter(b -> fusionId.equals(b.getFusionId()))\n                .sorted(java.util.Comparator.comparing(FusionBom::getCreatedAt))\n                .toList();\n\n        java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> result = new java.util.ArrayList<>();\n        int num = 1;\n        for (FusionBom b : list) {\n            com.ua.crow.plm.dto.fusion.FusionRevisionDto dto = new com.ua.crow.plm.dto.fusion.FusionRevisionDto();\n            dto.setRevisionId(b.getRevisionId());\n            dto.setNumber(num++);\n            result.add(dto);\n        }\n        return result;\n    }\n\n    @Transactional\n    public FusionBom mapProduct(@NotNull FusionId fusionId, @NotNull Long productId) {\n        ProductActiveRelease product = productRepository.findById(ReleasableId.releasableId(productId))\n                .orElseThrow(() -> new NotFoundException(productId, ProductActiveRelease.class));\n\n        FusionBom bom = fusionBomRepository.findById(fusionId)\n                .orElseThrow(() -> new NotFoundException(fusionId, FusionBom.class));\n\n        bom.setProduct(product);\n        return fusionBomRepository.save(bom);\n    }\n\n    @Transactional\n    public Stream<FusionBom> readByPartNumber(@NotBlank String partNumber) {\n        return fusionBomRepository.findByPartNumber(partNumber);\n    }\n\n    @Transactional\n    public FusionBom save(FusionBom bom) {\n        return fusionBomRepository.save(bom);\n    }\n\n    @Transactional\n    public void deleteComponent(@NotNull FusionId id) {\n        fusionBomRepository.findByRoot(id.getFusionId(), id.getRevisionId())\n                .ifPresent(b -> { throw new com.ua.crow.service.BadRequest(\"Cannot delete root component of a BOM\"); });\n\n        fusionComponentRelRepository.findByChild(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionComponentRelRepository::delete);\n        fusionComponentRelRepository.findByParent(id.getFusionId(), id.getRevisionId())\n                .forEach(fusionComponentRelRepository::delete);\n\n        fusionComponentRepository.deleteById(id);\n    }\n\n    private FusionBomDto copyDto(FusionBomDto source) {\n        FusionBomDto target = new FusionBomDto();\n        org.springframework.beans.BeanUtils.copyProperties(source, target);\n        if (source.getChildren() != null && !source.getChildren().isEmpty()) {\n            java.util.List<FusionBomDto> children = new java.util.ArrayList<>();\n            for (FusionBomDto child : source.getChildren()) {\n                children.add(copyDto(child));\n            }\n            target.setChildren(children);\n        } else {\n            target.setChildren(null);\n        }\n        return target;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/fusionbom/FusionBomFacadeService.java =====\npackage com.ua.crow.plm.service.fusionbom;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.fusion.FusionBom;\nimport com.ua.crow.plm.database.fusion.FusionComponent;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.AddChildRequest;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.conversion.Convertable;\nimport com.ua.crow.views.components.fusionbom.edit.FusionComponentTreeGrid;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.plm.dto.merge.MergeBomTreesDto;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport com.ua.crow.plm.database.released.ReleasableId;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport com.ua.crow.plm.service.engbom.BomCrudService;\nimport jakarta.validation.constraints.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.validation.annotation.Validated;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@Validated\npublic class FusionBomFacadeService {\n\n    @Autowired\n    FusionBomTreeService treeService;\n\n    @Autowired\n    FusionBomManagementService managementService;\n\n    @Autowired\n    CadToEngBomConversionService conversionService;\n\n    @Autowired\n    EngineeringBomRepository engineeringBomRepository;\n\n    @Autowired\n    BomCrudService bomCrudService;\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId) {\n        return treeService.readFullTree(fusionId);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readFullTree(@NotNull FusionId fusionId, boolean includeBodies) {\n        return treeService.readFullTree(fusionId, includeBodies);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<FusionBomDto> readDtoById(@NotNull FusionId fusionId) {\n        return managementService.readDtoById(fusionId);\n    }\n\n    @Transactional\n    public FusionBomDto create(@NotNull FusionBomDto dto) {\n        FusionBom bom = dto.convert(FusionBom.class);\n        FusionComponentDto dtoRoot = dto.getRootPart();\n        dtoRoot.setRoot(true);\n        return managementService.create(bom,dtoRoot).convert(FusionBomDto.class);\n    }\n\n\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readAllTreeDto() {\n        java.util.List<com.ua.crow.plm.database.fusion.FusionBom> all = managementService.readAll().collect(java.util.stream.Collectors.toList());\n        java.util.List<com.ua.crow.plm.database.fusion.FusionBom> roots = managementService.readRootAll().collect(java.util.stream.Collectors.toList());\n        return managementService.buildBomTree(all, roots);\n    }\n\n    @Transactional\n    public FusionComponentDto updateItem(FusionComponentDto dto, boolean updatePhysicalProperties) {\n        FusionComponent updatedComponent = dto.convert(FusionComponent.class);\n        FusionComponent bom = managementService.updateItem(updatedComponent, updatePhysicalProperties);\n        return bom.convert(FusionComponentDto.class);\n    }\n\n    @Transactional\n    public FusionComponent addChildItem(@NotNull AddChildRequest dto) {\n        return managementService.addChildItem(dto);\n    }\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readUnprocessedBomTreeDtosByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return managementService.readUnprocessedBomTreeByProduct(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readProcessedBomTreeDtosByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return managementService.readProcessedBomTreeByProduct(productId, releaseVer);\n    }\n\n    @Transactional(readOnly = true)\n    public List<FusionBomDto> readBomTreeDtoByProduct(@NotNull Long productId, @NotNull Long releaseVer) {\n        return managementService.readBomTreeByProduct(productId, releaseVer);\n    }\n\n    public FusionComponentDto updateItemType(String id, String revId, ItemTypes type) {\n        return managementService.itemService.updateType(id, revId, type).convert(FusionComponentDto.class);\n    }\n    @Transactional\n    public FusionBomDto mapProduct(@NotNull FusionId fusionId, @NotNull Long productId) {\n        return managementService.mapProduct(fusionId, productId).convert(FusionBomDto.class);\n    }\n\n    /**\n     * Merge a Fusion BOM into an existing Engineering BOM.\n     */\n    @Transactional\n    public BomActiveRelease mergeFusionIntoEngineeringBom(@NotNull FusionId fusionId, @NotNull Long engineeringBomId) {\n        return conversionService.mergeFusionIntoEngineeringBom(fusionId, engineeringBomId);\n    }\n\n    @Transactional(readOnly = true)\n    public java.util.List<com.ua.crow.plm.dto.fusion.FusionRevisionDto> readRevisionDtos(\n            @NotNull String fusionId,\n            @NotNull Long productId,\n            @NotNull Long releaseVer) {\n        return managementService.readRevisionDtos(productId, releaseVer, fusionId);\n    }\n\n    /**\n     * Find a mergeable Engineering BOM for the given Fusion BOM.\n     */\n    @Transactional(readOnly = true)\n    public Optional<EngineeringBomWoChildren> findMergeableEngineeringBom(@NotNull FusionId fusionId) {\n        return managementService.readById(fusionId).flatMap(fb -> {\n            if (fb.getEngineeringBomId() != null) {\n                return engineeringBomRepository.findById(ReleasableId.releasableId(fb.getEngineeringBomId()))\n                        .map(b -> b.convert(EngineeringBomWoChildren.class));\n            }\n            if (fb.getProduct() == null) {\n                return Optional.empty();\n            }\n            List<BomActiveRelease> list = engineeringBomRepository.findBomsByProductId(fb.getProduct().getId(),0L, Pageable.unpaged());\n            return list.stream()\n                    .max(java.util.Comparator.comparing(BomActiveRelease::getCreatedAt))\n                    .map(b -> b.convert(EngineeringBomWoChildren.class));\n        });\n    }\n\n    /**\n     * Load both Fusion and Engineering BOM trees for merge UI.\n     */\n    @Transactional(readOnly = true)\n    public Optional<MergeBomTreesDto> loadMergeTrees(@NotNull FusionId fusionId, @NotNull Long engineeringBomId) {\n        Optional<FusionBomDto> fusion = treeService.readFullTree(fusionId);\n        Optional<BomActiveReleaseDto> eff = bomCrudService.readById(engineeringBomId)\n                .map(b -> b.convert(BomActiveReleaseDto.class));\n        if (fusion.isPresent() && eff.isPresent()) {\n            MergeBomTreesDto dto = new MergeBomTreesDto();\n            dto.setFusionBom(fusion.get());\n            dto.setEngineeringBom(eff.get());\n            return Optional.of(dto);\n        }\n        return Optional.empty();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/plm/service/UriEncodingService.java =====\npackage com.ua.crow.plm.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.util.UriComponents;\nimport org.springframework.web.util.UriComponentsBuilder;\n\n@Service\npublic class UriEncodingService {\n\n    public String encodeUrl(String url) {\n        // Parse the URL\n        UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(url).build();\n\n        // Rebuild and encode the URL\n        UriComponents encodedUriComponents = UriComponentsBuilder.newInstance()\n                .scheme(uriComponents.getScheme())\n                .host(uriComponents.getHost())\n                .port(uriComponents.getPort())\n                .path(uriComponents.getPath())\n                .query(uriComponents.getQuery())\n                .build()\n                .encode();\n\n        return encodedUriComponents.toUriString();\n    }\n\n    public String encodeUrlWithParams(String url, String paramName, String paramValue) {\n        // Parse the URL and add query parameters\n        UriComponents encodedUriComponents = UriComponentsBuilder.fromHttpUrl(url)\n                .queryParam(paramName, paramValue)\n                .build()\n                .encode();\n\n        return encodedUriComponents.toUriString();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/Application.java =====\npackage com.ua.crow;\n\nimport com.vaadin.flow.component.page.AppShellConfigurator;\nimport com.vaadin.flow.component.page.Push;\nimport com.vaadin.flow.shared.communication.PushMode;\nimport com.vaadin.flow.shared.ui.Transport;\nimport com.vaadin.flow.spring.VaadinMVCWebAppInitializer;\nimport com.vaadin.flow.spring.annotation.EnableVaadin;\nimport com.vaadin.flow.theme.Theme;\nimport com.vaadin.flow.theme.lumo.Lumo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n/**\n * The entry point of the Spring Boot application.\n *\n * Use the @PWA annotation make the application installable on phones, tablets\n * and some desktop browsers.\n *\n */\n@SpringBootApplication\n@EnableJpaRepositories\n@EnableTransactionManagement\n@ComponentScan(basePackages = { \"com.ua.crow\" })\npublic class Application extends SpringBootServletInitializer {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/util/SecurityContext.java =====\npackage com.ua.crow.util;\n\nimport java.util.Optional;\nimport java.util.function.Predicate;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\n\npublic class SecurityContext {\n\n    private static Optional<User> getUser() {\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        if (auth == null || auth.getPrincipal() == null) {\n            return Optional.empty();\n        }\n        User userDetails = (User) auth.getPrincipal();\n        return Optional.of(userDetails);\n    }\n\n    private static Optional<String> getUserName() {\n        Predicate<UserDetails> userAccountIsEnabled = userDetails ->\n                userDetails.isAccountNonLocked() && userDetails.isAccountNonExpired() && userDetails.isEnabled();\n\n        Predicate<UserDetails> usernameExistsAndNonEmpty = userDetails ->\n                userDetails.getUsername() != null && !userDetails.getUsername().isEmpty();\n\n        return getUser().flatMap(userDetails -> {\n            if (userAccountIsEnabled.and(usernameExistsAndNonEmpty).test(userDetails)) {\n                return Optional.of(userDetails.getUsername());\n            }\n            return Optional.empty();\n        });\n    }\n\n    public static String getUsernameOrElseThrow() throws RuntimeException {\n        return getUserName().orElse(\"user\");\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/util/SpringContext.java =====\npackage com.ua.crow.util;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringContext implements ApplicationContextAware {\n\n    private static ApplicationContext context;\n\n    public static ConversionService getConversionService() {\n        return getBean(\"mvcConversionService\",ConversionService.class);\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) {\n        context = applicationContext;\n    }\n\n    public static ApplicationContext getApplicationContext() {\n        return context;\n    }\n\n\n\n    public static <T> T getBean(Class<T> beanClass) {\n        return context.getBean(beanClass);\n    }\n\n    public static <T> T getBean(String name, Class<T> beanClass) {\n        return context.getBean(name, beanClass);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/Conversion.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.Map;\n\n@Configuration\npublic class Conversion implements WebMvcConfigurer {\n\n    private final ApplicationContext applicationContext;\n\n\n    @Autowired\n    public Conversion(ApplicationContext applicationContext) {\n        this.applicationContext = applicationContext;\n    }\n\n    @Override\n    public void addFormatters(FormatterRegistry registry) {\n        // Получение всех бинов, которые реализуют Converter\n        Map<String, Converter> converters = applicationContext.getBeansOfType(Converter.class);\n        for (Converter<?, ?> converter : converters.values()) {\n            // Проверка, что бин находится в пакете com.ua.converters\n            if (converter.getClass().getPackage().getName().startsWith(\"com.ua.crow.plm.converters\")) {\n                registry.addConverter(converter);\n            }\n        }\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/Minio.java =====\npackage com.ua.crow.config;\n\n\nimport io.minio.MinioClient;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\n@Getter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Minio {\n\n    private MinioClient client;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/AuditConfig.java =====\npackage com.ua.crow.config;\n\nimport com.ua.crow.util.SecurityContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.domain.AuditorAware;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n\nimport java.util.Optional;\n\n@Configuration\n@EnableJpaAuditing(auditorAwareRef = \"auditorProvider\")\npublic class AuditConfig {\n    @Bean\n    public AuditorAware<String> auditorProvider() {\n        return () -> Optional.ofNullable(SecurityContext.getUsernameOrElseThrow()); // Замените на актуальное получение текущего пользователя\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/SecurityConfig.java =====\npackage com.ua.crow.config;\n\nimport com.ua.crow.views.pages.LoginView;\nimport com.vaadin.flow.spring.security.VaadinWebSecurity;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport com.ua.crow.service.CrowUserService;\nimport org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;\nimport org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\nimport javax.sql.DataSource;\n\n@EnableWebSecurity // <1>\n@Configuration\npublic class SecurityConfig extends VaadinWebSecurity { // <2>\n    private final CrowUserService userService;\n    private final PasswordEncoder passwordEncoder;\n    private final DataSource dataSource;\n\n    public SecurityConfig(CrowUserService crowUserService, PasswordEncoder passwordEncoder, DataSource dataSource) {\n        this.userService = crowUserService;\n        this.passwordEncoder = passwordEncoder;\n        this.dataSource = dataSource;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        http.authorizeHttpRequests(auth ->\n                auth.requestMatchers(\n                        AntPathRequestMatcher.antMatcher(HttpMethod.GET, \"/images/*\")\n                ).permitAll());\n        super.configure(http);\n\n        http.rememberMe(rm -> rm\n                .userDetailsService(userService)\n                .tokenValiditySeconds(60 * 60 * 24 * 14)\n                .tokenRepository(persistentTokenRepository())\n                .key(\"remember-me\"));\n\n        setLoginView(http, LoginView.class); // <4>\n    }\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        // Customize your WebSecurity configuration.\n        web.ignoring()\n                .requestMatchers(\n                        AntPathRequestMatcher.antMatcher( \"/fusion/*\"),\n                        AntPathRequestMatcher.antMatcher( \"/fusionbom/*\"),\n                        AntPathRequestMatcher.antMatcher( \"/fusionbomitem/*\")\n                );\n        super.configure(web);\n    }\n\n    @Bean\n    public PersistentTokenRepository persistentTokenRepository() {\n        JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();\n        tokenRepository.setDataSource(dataSource);\n        if (!persistentLoginsExists()) {\n            tokenRepository.setCreateTableOnStartup(true);\n        }\n        return tokenRepository;\n    }\n\n    private boolean persistentLoginsExists() {\n        try (var connection = dataSource.getConnection()) {\n            var metaData = connection.getMetaData();\n            try (var rs = metaData.getTables(null, null, \"persistent_logins\", null)) {\n                if (rs.next()) {\n                    return true;\n                }\n            }\n            // Some databases (e.g. PostgreSQL) store table names in upper case\n            try (var rs = metaData.getTables(null, null, \"PERSISTENT_LOGINS\", null)) {\n                return rs.next();\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n\n\n\n\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/I18nConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\nimport java.util.Locale;\n\n@Configuration\npublic class I18nConfig implements WebMvcConfigurer {\n\n    @Bean\n    public MessageSource messageSource() {\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n        messageSource.setBasename(\"messages\");\n        messageSource.setDefaultEncoding(\"UTF-8\");\n        return messageSource;\n    }\n\n    @Bean\n    public LocaleResolver localeResolver() {\n        SessionLocaleResolver slr = new SessionLocaleResolver();\n        slr.setDefaultLocale(Locale.ENGLISH);\n        return slr;\n    }\n\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();\n        interceptor.setParamName(\"lang\");\n        return interceptor;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/AsyncConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n@Configuration\n@EnableAsync\npublic class AsyncConfig implements AsyncConfigurer {\n    @Override\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(500);\n        executor.setThreadNamePrefix(\"Async-\");\n        executor.initialize();\n        return executor;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/LocaleServiceInitListener.java =====\npackage com.ua.crow.config;\n\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.server.ServiceInitEvent;\nimport com.vaadin.flow.server.VaadinServiceInitListener;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class LocaleServiceInitListener implements VaadinServiceInitListener {\n\n    @Override\n    public void serviceInit(ServiceInitEvent event) {\n        event.getSource().addUIInitListener(uiInitEvent ->\n                uiInitEvent.getUI().addBeforeEnterListener(e ->\n                        UI.getCurrent().setLocale(LocaleContextHolder.getLocale())\n                )\n        );\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/SecurityService.java =====\npackage com.ua.crow.config;\n\nimport com.vaadin.flow.spring.security.AuthenticationContext;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SecurityService {\n\n    private final AuthenticationContext authenticationContext;\n\n    public SecurityService(AuthenticationContext authenticationContext) {\n        this.authenticationContext = authenticationContext;\n    }\n\n    public UserDetails getAuthenticatedUser() {\n        return authenticationContext.getAuthenticatedUser(UserDetails.class).get();\n    }\n\n    public void logout() {\n        authenticationContext.logout();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/PasswordEncoderConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class PasswordEncoderConfig {\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/cad/fusion/ItemTypeNameMappingInitializer.java =====\npackage com.ua.crow.config.cad.fusion;\n\nimport com.ua.crow.plm.database.ItemTypeNameMapping;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.database.repo.ItemTypeNameMappingRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.beans.factory.InitializingBean;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@Component\npublic class ItemTypeNameMappingInitializer implements InitializingBean {\n\n    @Autowired\n    private ItemTypeNameMappingRepository itemTypeNameMappingRepository;\n\n    @Override\n    public void afterPropertiesSet() {\n        initializeItemTypes();\n    }\n\n    private void initializeItemTypes() {\n        List<String> fastenerNames = Arrays.asList(\"bolt\", \"nut\", \"washer\", \"screw\", \"бовт\", \"гайка\", \"шайба\", \"гвинт\");\n\n        saveItemTypes(ItemTypes.FASTENER, fastenerNames);\n    }\n\n    private void saveItemTypes(ItemTypes type, List<String> names) {\n        for (String name : names) {\n            saveItemType(type, name);\n        }\n    }\n\n    private void saveItemType(ItemTypes type, String name) {\n        if (!itemTypeNameMappingRepository.findByName(name).isPresent()) {\n            ItemTypeNameMapping itemTypeNameMapping = new ItemTypeNameMapping();\n            itemTypeNameMapping.setType(type);\n            itemTypeNameMapping.setName(name);\n            itemTypeNameMappingRepository.save(itemTypeNameMapping);\n            System.out.println(\"Created item type: \" + name);\n        } else {\n            System.out.println(\"Item type already exists: \" + name);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/cad/fusion/EngineeringBomItemPropertyTypeInitializer.java =====\npackage com.ua.crow.config.cad.fusion;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.BomItemPropertyTypeGroup;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeGroupRepository;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeRepository;\nimport com.ua.crow.database.repository.UnitsRepository;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.stereotype.Component;\n\n@Component\n@DependsOn(\"unitInitializer\")\npublic class EngineeringBomItemPropertyTypeInitializer implements ApplicationContextAware {\n\n    private EngineeringBomItemPropertyTypeRepository propertyTypeRepository;\n    private EngineeringBomItemPropertyTypeGroupRepository propertyTypeGroupRepository;\n    private UnitsRepository unitsRepository;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.propertyTypeRepository = applicationContext.getBean(EngineeringBomItemPropertyTypeRepository.class);\n        this.propertyTypeGroupRepository = applicationContext.getBean(EngineeringBomItemPropertyTypeGroupRepository.class);\n        this.unitsRepository = applicationContext.getBean(UnitsRepository.class);\n        initializePropertyTypes();\n    }\n\n    private void initializePropertyTypes() {\n        BomItemPropertyTypeGroup group = initializeGroup(\"Dimensional Values\", \"Вимірювальні значення\");\n        initializePropertyType(\"widthMm\", \"ширина мм\", \"mm\", group);\n        initializePropertyType(\"lengthMm\", \"довжина мм\", \"mm\", group);\n        initializePropertyType(\"heightMm\", \"висота мм\", \"mm\", group);\n        initializePropertyType(\"volumeCm3\", \"об'єм см³\", \"cm³\", group);\n        initializePropertyType(\"areaCm2\", \"площа см²\", \"cm²\", group);\n        initializePropertyType(\"massKg\", \"маса кг\", \"kg\", group);\n        initializePropertyType(\"densityKgCm3\", \"щільність кг/см³\", \"kg/cm³\", group);\n    }\n\n    private BomItemPropertyTypeGroup initializeGroup(String name, String ukrName) {\n        return propertyTypeGroupRepository.findByName(name)\n            .orElseGet(() -> {\n                BomItemPropertyTypeGroup group = new BomItemPropertyTypeGroup();\n                group.setName(name);\n                group.setUkrName(ukrName);\n                return propertyTypeGroupRepository.save(group);\n            });\n    }\n\n    private void initializePropertyType(String name, String ukrName, String unitShortName, BomItemPropertyTypeGroup group) {\n        if (!propertyTypeRepository.findByName(name).isPresent()) {\n            Units unit = unitsRepository.findByShortName(unitShortName)\n                .orElseThrow(() -> new RuntimeException(\"Unit not found: \" + unitShortName));\n            \n            BomItemPropertyType propertyType = new BomItemPropertyType();\n            propertyType.setName(name);\n            propertyType.setUkrName(ukrName);\n            propertyType.setUnits(unit);\n            propertyType.setGroup(group);\n            propertyType.setDataType(DataTypes.NUMBER);\n            propertyTypeRepository.save(propertyType);\n            System.out.println(\"Created property type with name: \" + name + \", ukrName: \" + ukrName + \", unit: \" + unitShortName);\n        } else {\n            System.out.println(\"Property type with name: \" + name + \" already exists.\");\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/cad/fusion/FusionEngineeringBomItemPropertyTypeConfig.java =====\npackage com.ua.crow.config.cad.fusion;\n\nimport com.ua.crow.plm.database.BomItemPropertyType;\nimport com.ua.crow.plm.database.repo.EngineeringBomItemPropertyTypeRepository;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\n\n@Configuration\npublic class FusionEngineeringBomItemPropertyTypeConfig {\n\n    private final EngineeringBomItemPropertyTypeRepository propertyTypeRepository;\n\n    public FusionEngineeringBomItemPropertyTypeConfig(EngineeringBomItemPropertyTypeRepository propertyTypeRepository) {\n        this.propertyTypeRepository = propertyTypeRepository;\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType widthMm() {\n        return propertyTypeRepository.findByName(\"widthMm\")\n            .orElseThrow(() -> new RuntimeException(\"widthMm not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType lengthMm() {\n        return propertyTypeRepository.findByName(\"lengthMm\")\n            .orElseThrow(() -> new RuntimeException(\"lengthMm not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType heightMm() {\n        return propertyTypeRepository.findByName(\"heightMm\")\n            .orElseThrow(() -> new RuntimeException(\"heightMm not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType volumeCm3() {\n        return propertyTypeRepository.findByName(\"volumeCm3\")\n            .orElseThrow(() -> new RuntimeException(\"volumeCm3 not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType areaCm2() {\n        return propertyTypeRepository.findByName(\"areaCm2\")\n            .orElseThrow(() -> new RuntimeException(\"areaCm2 not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType massKg() {\n        return propertyTypeRepository.findByName(\"massKg\")\n            .orElseThrow(() -> new RuntimeException(\"massKg not found\"));\n    }\n\n    @Bean\n    @DependsOn(\"engineeringBomItemPropertyTypeInitializer\")\n    public BomItemPropertyType densityKgCm3() {\n        return propertyTypeRepository.findByName(\"densityKgCm3\")\n            .orElseThrow(() -> new RuntimeException(\"densityKgCm3 not found\"));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/MinioConfiguration.java =====\npackage com.ua.crow.config;\n\nimport io.minio.BucketExistsArgs;\nimport io.minio.MakeBucketArgs;\nimport io.minio.MinioClient;\nimport io.minio.errors.*;\nimport io.minio.messages.Bucket;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class MinioConfiguration {\n\n    @Value(\"${minio.url}\")\n    String miniourl;\n\n    @Value(\"${minio.accesskey}\")\n    String minioaccesskey;\n\n    @Value(\"${minio.secret}\")\n    String miniosecret;\n\n    @Bean(\"minio\")\n    Minio minio() {\n        return new Minio(MinioClient.builder()\n                .endpoint(miniourl)\n                .credentials(minioaccesskey, miniosecret)\n                .build());\n    }\n    @Bean\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/ConversionConfig.java =====\npackage com.ua.crow.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ConversionServiceFactoryBean;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.converter.Converter;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Configuration\npublic class ConversionConfig {\n\n    @Bean\n    public ConversionService conversionService(@Autowired Set<Converter<?, ?>> converters) {\n        ConversionServiceFactoryBean factoryBean = new ConversionServiceFactoryBean();\n        factoryBean.setConverters(converters);\n        factoryBean.afterPropertiesSet();\n\n        return factoryBean.getObject();\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/Buckets.java =====\npackage com.ua.crow.config;\n\npublic enum Buckets {\n    products,\n    components,\n    cad;\n\n    public String getDirectory() {\n        return this.name();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/FusionComponentTypeConstraintUpdater.java =====\npackage com.ua.crow.config.dbinit;\n\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\n/**\n * Ensures that the fusion_component type check constraint\n * allows the NONE value.\n */\n@Component\npublic class FusionComponentTypeConstraintUpdater {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    public FusionComponentTypeConstraintUpdater(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @PostConstruct\n    public void updateConstraint() {\n        try {\n            jdbcTemplate.execute(\n                \"ALTER TABLE fusion_component DROP CONSTRAINT IF EXISTS fusion_component_type_check\");\n            jdbcTemplate.execute(\n                \"ALTER TABLE fusion_component ADD CONSTRAINT fusion_component_type_check \" +\n                \"CHECK (type in ('COMPONENT','PART','BOM','FASTENER','THRDPARTY','NONE'))\");\n        } catch (Exception ex) {\n            System.err.println(\n                \"Unable to update fusion_component_type_check constraint: \" + ex.getMessage());\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/MinioInit.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.config.Minio;\nimport io.minio.BucketExistsArgs;\nimport io.minio.MakeBucketArgs;\nimport io.minio.errors.*;\nimport jakarta.annotation.PostConstruct;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n@Component\n@DependsOn(\"minio\")\npublic class MinioInit implements ApplicationContextAware {\n    Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    Minio minio;\n\n    @PostConstruct\n    public void minioBucket() throws ServerException, InsufficientDataException, ErrorResponseException, IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException, InternalException {\n\n        String[] list = new String[]{\"products\",\"components\",\"cad\"};\n\n        // Make 'asiatrip' bucket if not exist.\n        for (Buckets bucket : Buckets.values()) {\n            boolean found = minio.getClient().bucketExists(BucketExistsArgs.builder().bucket(bucket.name()).build());\n            if (!found) {\n                minio.getClient().makeBucket(MakeBucketArgs.builder().bucket(bucket.name()).build());\n                logger.info(\"Bucket '\"+bucket.name()+\"' created.\");\n            } else {\n                logger.info(\"Bucket '\"+bucket.name()+\"' already exists.\");\n            }\n        }\n\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.minio = applicationContext.getBean(Minio.class);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/DatabaseFeeder.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.inventory.repo.ItemRepository;\nimport com.ua.crow.inventory.repo.ToolTypeRepository;\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.database.repository.*;\nimport com.ua.crow.mes.repo.TaskRepository;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.mes.repo.TaskTypeRepository;\nimport com.ua.crow.plm.database.repo.ComponentRepository;\nimport com.ua.crow.plm.database.repo.EngineeringBomRepository;\nimport jakarta.annotation.PostConstruct;\nimport jakarta.transaction.Transactional;\nimport java.util.*;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DatabaseFeeder {\n    final TaskRepository taskRepository;\n\n    private final TaskStatusRepository taskStatusRepository;\n\n    final UserRepository userRepository;\n\n    private final EngineeringBomRepository engineeringBomRepository;\n\n    private final ComponentRepository bomItemRepository;\n\n    private final ItemRepository itemRepository;\n\n    private final UnitsRepository unitsRepository;\n\n    private final ToolTypeRepository toolTypeRepository;\n\n\n    final TaskTypeRepository taskTypeRepository;\n\n    public DatabaseFeeder(\n            TaskRepository taskRepository,\n            TaskStatusRepository taskStatusRepository,\n            EngineeringBomRepository engineeringBomRepository,\n            ComponentRepository bomItemRepository,\n            ItemRepository itemRepository,\n            UnitsRepository unitsRepository,\n            ToolTypeRepository toolTypeRepository,\n\n            TaskTypeRepository taskTypeRepository,\n            UserRepository userRepository) {\n        this.taskRepository = taskRepository;\n        this.taskStatusRepository = taskStatusRepository;\n        this.engineeringBomRepository = engineeringBomRepository;\n        this.bomItemRepository = bomItemRepository;\n        this.itemRepository = itemRepository;\n        this.unitsRepository = unitsRepository;\n        this.toolTypeRepository = toolTypeRepository;\n\n        this.taskTypeRepository = taskTypeRepository;\n        this.userRepository = userRepository;\n    }\n\n    @PostConstruct\n    @Transactional\n    public void postConstruct() {\n        taskStatusRepository.findById(3L).map(taskStatus -> {\n            List<TaskStatus> availableNextStatuses = new ArrayList<>();\n            availableNextStatuses.add(taskStatusRepository.findById(2L).get());\n            taskStatus.setAvailableNextStatuses(availableNextStatuses);\n            taskStatusRepository.save(taskStatus);\n            return taskStatus;\n        });\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/UnitInitializer.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.database.models.common.TypeOfUnits;\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.database.repository.UnitsRepository;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class UnitInitializer implements ApplicationContextAware {\n\n    private UnitsRepository unitsRepository;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.unitsRepository = applicationContext.getBean(UnitsRepository.class);\n\n    }\n\n\n    @PostConstruct\n    private void initializeUnits() {\n        initializeUnit(\"Square Meter\", \"m²\", TypeOfUnits.SQUARE);\n        initializeUnit(\"Square Centimeter\", \"cm²\", TypeOfUnits.SQUARE);\n        initializeUnit(\"Square Millimeter\", \"mm²\", TypeOfUnits.SQUARE);\n        initializeUnit(\"Square Foot\", \"ft²\", TypeOfUnits.SQUARE);\n\n        // Единицы длины\n        initializeUnit(\"Meter\", \"m\", TypeOfUnits.UNITS_LENGTH);\n        initializeUnit(\"Millimeter\", \"mm\", TypeOfUnits.UNITS_LENGTH);\n        initializeUnit(\"Foot\", \"ft\", TypeOfUnits.UNITS_LENGTH);\n        // Единицы веса\n        initializeUnit(\"Kilogram\", \"kg\", TypeOfUnits.MASS);\n        initializeUnit(\"Gram\", \"g\", TypeOfUnits.MASS);\n        initializeUnit(\"Pound\", \"lb\", TypeOfUnits.MASS);\n        // Единицы объема\n        initializeUnit(\"Liter\", \"l\", TypeOfUnits.VOLUME);\n        initializeUnit(\"Milliliter\", \"ml\", TypeOfUnits.VOLUME);\n        initializeUnit(\"Cubic Meter\", \"m³\", TypeOfUnits.VOLUME);\n        initializeUnit(\"Cubic Centimeter\", \"cm³\", TypeOfUnits.VOLUME);\n\n        // Единицы плотности\n        initializeUnit(\"Kilogram per Cubic Meter\", \"kg/m³\", TypeOfUnits.DENSITY);\n        initializeUnit(\"Kilogram per Cubic Centimeter\", \"kg/cm³\", TypeOfUnits.DENSITY);\n        initializeUnit(\"Gram per Cubic Centimeter\", \"g/cm³\", TypeOfUnits.DENSITY);\n        initializeUnit(\"Pound per Cubic Foot\", \"lb/ft³\", TypeOfUnits.DENSITY);\n\n        // Единицы давления\n        initializeUnit(\"Pascal\", \"Pa\", TypeOfUnits.PRESSURE);\n        initializeUnit(\"Bar\", \"bar\", TypeOfUnits.PRESSURE);\n        initializeUnit(\"Pound per Square Inch\", \"psi\", TypeOfUnits.PRESSURE);\n\n        // Единицы температуры\n        initializeUnit(\"Celsius\", \"°C\", TypeOfUnits.TEMPERATURE);\n        initializeUnit(\"Fahrenheit\", \"°F\", TypeOfUnits.TEMPERATURE);\n        initializeUnit(\"Kelvin\", \"K\", TypeOfUnits.TEMPERATURE);\n\n    }\n\n    private void initializeUnit(String name, String shortName, TypeOfUnits type) {\n        if (!unitsRepository.findByShortName(shortName).isPresent()) {\n            Units unit = new Units();\n            unit.setName(name);\n            unit.setShortName(shortName);\n            unit.setType(type);\n            unitsRepository.save(unit);\n            System.out.println(\"Created unit with name: \" + name + \", shortName: \" + shortName + \" and type: \" + type);\n        } else {\n            System.out.println(\"Unit with shortName: \" + shortName + \" already exists.\");\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/dbinit/DefaultUserFeeder.java =====\npackage com.ua.crow.config.dbinit;\n\nimport com.ua.crow.database.models.auth.Role;\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.auth.UserRole;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.database.repository.UserRoleRepository;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DefaultUserFeeder {\n    final UserRepository userRepository;\n    final UserRoleRepository userRoleRepository;\n    final PasswordEncoder passwordEncoder;\n\n    public DefaultUserFeeder(UserRepository userRepository,\n                             UserRoleRepository userRoleRepository,PasswordEncoder passwordEncoder ) {\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.userRoleRepository = userRoleRepository;\n    }\n\n    @PostConstruct\n    public void init() {\n        createUserIfAbsent(\"admin\", Role.ADMIN);\n        createUserIfAbsent(\"user\", Role.WORKER);\n    }\n\n    private void createUserIfAbsent(String username, Role role) {\n        if (userRepository.findByUsername(username).isPresent()) {\n            return;\n        }\n        UserEntity user = new UserEntity();\n        user.setUsername(username);\n        user.setEnabled(true);\n        user.setAccountNonExpired(true);\n        user.setAccountNonLocked(true);\n        user.setCredentialsNonExpired(true);\n        user.setPassword(passwordEncoder.encode(\"password\"));\n        UserRole userRole = new UserRole(role);\n        userRole.setUser(user);\n        userRepository.save(user);\n        userRole.setUserId(user.getId());\n        userRoleRepository.save(userRole);\n        user.setUserRole(userRole);\n        userRepository.save(user);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/config/AppI18NProvider.java =====\npackage com.ua.crow.config;\n\nimport com.vaadin.flow.i18n.I18NProvider;\nimport org.springframework.stereotype.Component;\n\nimport java.text.MessageFormat;\nimport java.util.*;\n\n@Component\npublic class AppI18NProvider implements I18NProvider {\n\n    private static final String BUNDLE_PREFIX = \"messages\";\n    private final Map<Locale, ResourceBundle> bundles = new HashMap<>();\n\n    public AppI18NProvider() {\n        for (Locale locale : getProvidedLocales()) {\n            bundles.put(locale, ResourceBundle.getBundle(BUNDLE_PREFIX, locale));\n        }\n    }\n\n    @Override\n    public List<Locale> getProvidedLocales() {\n        return List.of(Locale.ENGLISH, new Locale(\"ru\"));\n    }\n\n    @Override\n    public String getTranslation(String key, Locale locale, Object... params) {\n        ResourceBundle bundle = bundles.getOrDefault(locale, bundles.get(Locale.ENGLISH));\n        try {\n            String value = bundle.getString(key);\n            if (params.length > 0) {\n                value = MessageFormat.format(value, params);\n            }\n            return value;\n        } catch (MissingResourceException e) {\n            return key;\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/workspace/WorkspaceType.java =====\npackage com.ua.crow.workspace;\n\npublic enum WorkspaceType {\n    RND,\n    ASSEMBLY,\n    LOGISTICS,\n    ADMIN\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/workspace/Workspace.java =====\npackage com.ua.crow.workspace;\n\nimport java.util.Set;\n\npublic class Workspace {\n    private WorkspaceType type;\n    private String name;\n    private Set<String> permissions;\n\n    public Workspace(WorkspaceType type, String name, Set<String> permissions) {\n        this.type = type;\n        this.name = name;\n        this.permissions = permissions;\n    }\n\n    public WorkspaceType getType() {\n        return type;\n    }\n\n    public void setType(WorkspaceType type) {\n        this.type = type;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Set<String> getPermissions() {\n        return permissions;\n    }\n\n    public void setPermissions(Set<String> permissions) {\n        this.permissions = permissions;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TimeLogDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.Date;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class TimeLogDto extends NamedBasicEntityWithNumericIdDto {\n    private Long taskId;\n    private double amount;\n    private UserDto loggedBy;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date date;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskRef.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class TaskRef extends NamedBasicEntityWithNumericIdDto {\n    private TaskStatusDto status;\n    private TaskTypeDto type;\n    private UserDto assignee;\n    private UserDto reporter;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskTypeDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedNumericIdEntityDto;\n\npublic class TaskTypeDto extends NamedNumericIdEntityDto {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/Exception.java =====\npackage com.ua.crow.mes.dto;\n\npublic record Exception(String msg) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/AttachmentDto.java =====\npackage com.ua.crow.mes.dto;\n\npublic record AttachmentDto(String url) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/PasswordChangeDto.java =====\npackage com.ua.crow.mes.dto;\n\npublic record PasswordChangeDto(String password) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/BasicEntityWithNumericId.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.Date;\n\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class BasicEntityWithNumericId extends NumericIdEntityDto {\n    private String creator = null;\n\n    private String modifier = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date createdAt = null;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date modifiedAt = null;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport java.util.*;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.plm.dto.BomDtoShort;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class TaskDto extends NamedBasicEntityWithNumericIdDto {\n    private UserDto assignee;\n    private boolean isSubtask;\n    private UserDto reporter;\n    private String description;\n    private BomDtoShort bom;\n    private TaskStatusDto status;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date start;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date end;\n\n    private List<TimeLogDto> hoursLogged;\n    private List<CommentDto> comments;\n    private List<AttachmentDto> attachments;\n    private Set<SubtaskDto> subtasks = new TreeSet<>(Comparator.comparing(SubtaskDto::getSequence));\n    private SeverityDto severity;\n    private TaskTypeDto taskType;\n    private String audioUrl;\n    private Double totalHoursLogged;\n    private int subtasksCount;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/CreateUserDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class CreateUserDto {\n    private String username;\n    private String name;\n    private String password;\n    private boolean enabled = true;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/CreateTaskRequest.java =====\npackage com.ua.crow.mes.dto;\n\nimport java.util.Date;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class CreateTaskRequest {\n\n    String name;\n\n    String description;\n\n    Date start;\n\n    Date end;\n\n    Long assignee;\n\n    Long reporter;\n\n    Long parent;\n\n    Long taskType;\n\n    Integer severity;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/SubtaskDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class SubtaskDto extends NamedBasicEntityWithNumericIdDto {\n    private Integer sequence;\n    private TaskRef task;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/SeverityDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class SeverityDto {\n    private String name;\n    private String color;\n    private int value;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/UserDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class UserDto extends NumericIdEntityDto {\n    private String username;\n    private boolean enabled;\n    private String name;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/UpdateTaskRequest.java =====\npackage com.ua.crow.mes.dto;\n\nimport lombok.*;\n\n@Getter\n@Setter\npublic class UpdateTaskRequest extends CreateTaskRequest {\n    private Long status;\n\n    public UpdateTaskRequest() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/FileUploadRequest.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.FileTypes;\nimport org.springframework.web.multipart.MultipartFile;\n\npublic record FileUploadRequest(Long taskId, Boolean isPrimaryAudio, FileTypes fileType, MultipartFile file) {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/TaskStatusDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedNumericIdEntityDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class TaskStatusDto extends NamedNumericIdEntityDto {\n    private TaskTypeDto taskType;\n    boolean initialStatus;\n    private boolean terminatedStatus;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/dto/CommentDto.java =====\npackage com.ua.crow.mes.dto;\n\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport lombok.*;\n\n@Getter\n@Setter\npublic class CommentDto extends NamedBasicEntityWithNumericIdDto {\n\n    private String imageUrl;\n\n    private String audioUrl;\n\n    private UserDto author;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/TaskStatus.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport jakarta.persistence.*;\nimport java.util.List;\nimport java.util.Objects;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class TaskStatus extends NamedNumericIdEntity {\n\n    @ManyToMany\n    @JoinTable(\n            name = \"available_next_statuses\",\n            joinColumns = @JoinColumn(name = \"status_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"next_status_id\"))\n    private List<TaskStatus> availableNextStatuses;\n\n    @ManyToOne\n    private TaskType taskType;\n\n    private boolean initialStatus;\n\n    private boolean terminatedStatus;\n\n    private boolean plannedStatus;\n\n    private boolean inProgressStatus;\n\n    private boolean backlogStatus;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof TaskStatus that)) return false;\n        return Objects.equals(availableNextStatuses, that.availableNextStatuses)\n                && Objects.equals(taskType, that.taskType);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(availableNextStatuses, taskType);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/TaskType.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport jakarta.persistence.Entity;\n\n@Entity\npublic class TaskType extends NamedNumericIdEntity {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Severity.java =====\npackage com.ua.crow.mes.database;\n\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\n\npublic enum Severity {\n    EXTRAHIGHT(50, \"#b91c1c\"),\n    HIGHT(40, \"#eab308\"),\n    MEDIUM(30, \"#3b82f6\"),\n    LOW(20, \"#22c55e\"),\n    EXTRALOW(10, \"#71717a\");\n\n    @Getter\n    private final Integer value;\n\n    @Getter\n    private final String color;\n\n    Severity(@NotNull int value, @NotNull String color) {\n        this.value = value;\n        this.color = color;\n    }\n\n    public static Severity fromValue() {\n        return MEDIUM;\n    }\n\n    public static Severity fromValue(@NotNull Integer value) throws IllegalArgumentException {\n        for (Severity severity : Severity.values()) {\n            if (severity.getValue().equals(value)) {\n                return severity;\n            }\n        }\n        throw new IllegalArgumentException(\"No severity with value \" + value);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Comment.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class Comment extends NamedBasicEntityWithNumericId {\n\n    private String imageUrl;\n\n    private String audioUrl;\n\n    @ManyToOne\n    private UserEntity author;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Task.java =====\npackage com.ua.crow.mes.database;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.plm.database.active.BomActiveRelease;\nimport jakarta.persistence.Convert;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToMany;\nimport java.util.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Task extends NamedBasicEntityWithNumericId {\n\n    @ManyToOne\n    private UserEntity assignee;\n\n    private boolean isSubtask;\n\n    @ManyToOne\n    private UserEntity reporter;\n\n    private String description;\n\n    @ManyToOne\n    private BomActiveRelease bomActiveRelease;\n\n    @ManyToOne\n    private TaskStatus status;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date start;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private Date endTime;\n\n    @OneToMany\n    private List<TimeLog> hoursLogged;\n\n    @OneToMany\n    private List<Comment> comments;\n\n    @OneToMany\n    private Set<Subtask> subtasks = new TreeSet<>(Comparator.comparing(Subtask::getSequence));\n\n    @Convert(converter = SeverityConverter.class)\n    private Severity severity;\n\n    @ManyToOne\n    private TaskType taskType;\n\n    public Task() {}\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/TimeLog.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Date;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class TimeLog extends NamedBasicEntityWithNumericId {\n\n    @ManyToOne\n    @JoinColumn(name = \"task_id\")\n    Task task;\n\n    private double amount;\n\n    @ManyToOne\n    @JoinColumn(name = \"loggedBy\")\n    private UserEntity loggedBy;\n\n    private Date date;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/SeverityConverter.java =====\npackage com.ua.crow.mes.database;\n\nimport jakarta.persistence.AttributeConverter;\nimport org.springframework.lang.NonNull;\n\npublic class SeverityConverter implements AttributeConverter<Severity, Integer> {\n    @Override\n    public Integer convertToDatabaseColumn(@NonNull Severity severity) {\n        return severity.getValue();\n    }\n\n    @Override\n    public Severity convertToEntityAttribute(@NonNull Integer integer) {\n        return Severity.fromValue(integer);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/database/Subtask.java =====\npackage com.ua.crow.mes.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Subtask extends NamedBasicEntityWithNumericId {\n    @ManyToOne\n    @JoinColumn(name = \"task_id\")\n    private Task task;\n\n    private Integer sequence;\n\n    public Subtask() {}\n\n    public Subtask(Task task, int sequence) {\n        this.task = task;\n        this.sequence = sequence;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/CommentsMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Comment;\nimport com.ua.crow.mes.dto.CommentDto;\nimport java.util.List;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class CommentsMapper {\n    public abstract CommentDto toDto(Comment comment);\n    public abstract List<CommentDto> map(List<Comment> comments);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/SubtaskMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Subtask;\nimport com.ua.crow.mes.dto.SubtaskDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(\n        componentModel = \"spring\",\n        uses = {TaskMapper.class})\npublic abstract class SubtaskMapper {\n    public abstract SubtaskDto toDto(Subtask severity);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TaskTypeMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskType;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class TaskTypeMapper {\n    public abstract TaskTypeDto toDto(TaskType taskType);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TimeLogMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class TimeLogMapper {\n    public abstract TimeLogDto toDto(TimeLog timeLog);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/UserEntityMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.dto.UserDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class UserEntityMapper {\n    public abstract UserDto toDto(UserEntity user);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/SeverityMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Severity;\nimport com.ua.crow.mes.dto.SeverityDto;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\n@Mapper(componentModel = \"spring\")\npublic abstract class SeverityMapper {\n    @Mapping(target = \"name\", expression = \"java(severity.toString())\")\n    public abstract SeverityDto toDto(Severity severity);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TaskMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.TaskRef;\nimport com.ua.crow.plm.converters.mappers.BomShortMapper;\nimport com.ua.crow.mes.service.TaskService;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Mapper(\n        unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN,\n        componentModel = \"spring\",\n        uses = {\n            TaskTypeMapper.class,\n            UserEntityMapper.class,\n            CommentsMapper.class,\n            SeverityMapper.class,\n            TimeLogMapper.class,\n            BomShortMapper.class,\n            TaskService.class\n        })\npublic abstract class TaskMapper {\n\n    @Autowired\n    protected TaskService taskService;\n\n    @Mapping(target = \"totalHoursLogged\", expression = \"java(taskService.computeTotalHoursLogged(task))\")\n    @Mapping(target = \"subtasksCount\", expression = \"java(taskService.getSubtasksCount(task))\")\n    public abstract TaskDto toDto(Task task);\n\n    @Mapping(source = \"taskType\", target = \"type\")\n    public abstract TaskRef toRef(Task task);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/conversion/TaskStatusMapper.java =====\npackage com.ua.crow.mes.conversion;\n\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport org.mapstruct.Mapper;\n\n@Mapper(unmappedTargetPolicy = org.mapstruct.ReportingPolicy.WARN, componentModel = \"spring\")\npublic abstract class TaskStatusMapper {\n    public abstract TaskStatusDto toDto(TaskStatus task);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/service/WorkLogService.java =====\npackage com.ua.crow.mes.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.database.TimeLog;\nimport com.ua.crow.mes.repo.TaskRepository;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.mes.repo.WorklogRepository;\nimport com.ua.crow.util.SecurityContext;\nimport jakarta.transaction.Transactional;\nimport java.util.Date;\nimport java.util.List;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class WorkLogService {\n    final TaskRepository taskRepository;\n    final UserRepository userRepository;\n    final WorklogRepository worklogRepository;\n\n    public WorkLogService(\n            TaskRepository taskRepository, UserRepository userRepository, WorklogRepository worklogRepository) {\n        this.taskRepository = taskRepository;\n        this.userRepository = userRepository;\n        this.worklogRepository = worklogRepository;\n    }\n\n    @Transactional\n    public Task logWork(Date date, Double amount, Long taskId) {\n        Task task = taskRepository.findById(taskId).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        UserEntity user = userRepository\n                .findByUsername(SecurityContext.getUsernameOrElseThrow())\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n        if (task.getHoursLogged() == null) {\n            task.setHoursLogged(List.of());\n        }\n\n        TimeLog timeLog = new TimeLog();\n        timeLog.setAmount(amount);\n        timeLog.setDate(date);\n        timeLog.setLoggedBy(user);\n        timeLog.setCreatedAt(new Date());\n        timeLog.setCreator(user.getUsername());\n\n        task.getHoursLogged().add(timeLog);\n\n        timeLog.setTask(task);\n\n        worklogRepository.save(timeLog);\n\n        return task;\n    }\n\n    @Transactional\n    public Task deleteWorkLog(Long timeLogId, Long taskId) {\n        Task task = taskRepository.findById(taskId).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        TimeLog timeLog =\n                worklogRepository.findById(timeLogId).orElseThrow(() -> new RuntimeException(\"Time log not found\"));\n\n        task.getHoursLogged().remove(timeLog);\n\n        worklogRepository.delete(timeLog);\n        taskRepository.save(task);\n\n        return task;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/service/CurrentUserTaskSearchService.java =====\npackage com.ua.crow.mes.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.repo.TaskSearchRepository;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.util.SecurityContext;\nimport jakarta.transaction.Transactional;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.function.Supplier;\nimport lombok.SneakyThrows;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CurrentUserTaskSearchService {\n    final TaskSearchRepository taskSearchRepository;\n    final TaskStatusRepository taskStatusRepository;\n    final UserRepository userRepository;\n\n    public CurrentUserTaskSearchService(\n            TaskSearchRepository taskRepository,\n            TaskStatusRepository taskStatusRepository,\n            UserRepository userRepository) {\n        this.taskSearchRepository = taskRepository;\n        this.taskStatusRepository = taskStatusRepository;\n        this.userRepository = userRepository;\n    }\n\n    @Transactional\n    public Page<Task> getPlannedForTodayTasksOfUser(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByPlannedStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdInForToday(\n                user.getId(), false, statuses, LocalDateTime.now(), pageable);\n    }\n\n    @Transactional\n    public Page<Task> getInProgressTasksOfUser(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByInProgressStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n                user.getId(), false, statuses, pageable);\n    }\n\n    @Transactional\n    public Page<Task> getPlannedTasksOfUser(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByPlannedStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n                user.getId(), false, statuses, pageable);\n    }\n\n    @Transactional\n    public Page<Task> computeBacklog(Pageable pageable) {\n        UserEntity user = detectCurrentUser();\n\n        List<Long> statuses = taskStatusRepository\n                .findByBacklogStatusIsTrue()\n                .map(NumericIdEntity::getId)\n                .toList();\n\n        return taskSearchRepository.findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n                user.getId(), false, statuses, pageable);\n    }\n\n    @SneakyThrows\n    private UserEntity detectCurrentUser() {\n        return userRepository\n                .findByUsername(SecurityContext.getUsernameOrElseThrow())\n                .orElseThrow((Supplier<Throwable>) () -> new UsernameNotFoundException(\"User not found\"));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/service/TaskService.java =====\npackage com.ua.crow.mes.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.repository.*;\nimport com.ua.crow.mes.dto.CreateTaskRequest;\nimport com.ua.crow.mes.dto.UpdateTaskRequest;\nimport com.ua.crow.mes.database.*;\nimport com.ua.crow.mes.repo.SubTaskRepository;\nimport com.ua.crow.mes.repo.TaskRepository;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.mes.repo.TaskTypeRepository;\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.service.BadRequest;\nimport com.ua.crow.util.SecurityContext;\nimport jakarta.transaction.Transactional;\nimport java.util.*;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TaskService {\n    final TaskRepository taskRepository;\n    final CrowUserService crowUserService;\n    final TaskTypeRepository taskTypeRepository;\n    final TaskStatusRepository taskStatusRepository;\n    final UserRepository userRepository;\n    final SubTaskRepository subTaskRepository;\n\n    public TaskService(\n            TaskRepository taskRepository,\n            CrowUserService crowUserService,\n            TaskTypeRepository taskTypeRepository,\n            TaskStatusRepository taskStatusRepository,\n            UserRepository userRepository,\n            SubTaskRepository subTaskRepository\n            ) {\n        this.taskRepository = taskRepository;\n        this.crowUserService = crowUserService;\n        this.taskTypeRepository = taskTypeRepository;\n        this.taskStatusRepository = taskStatusRepository;\n        this.userRepository = userRepository;\n        this.subTaskRepository = subTaskRepository;\n    }\n\n    @Transactional\n    public Task createTask(CreateTaskRequest taskRequest) {\n        if (taskRequest.getName() == null || taskRequest.getName().isEmpty()) {\n            throw new BadRequest(\"Name is required\");\n        }\n        if (taskRequest.getAssignee() == null) {\n            throw new BadRequest(\"Assignee is required\");\n        }\n\n        UserEntity appsmithUserAssignee = crowUserService.getUserEntity(taskRequest.getAssignee());\n        UserEntity assignee = userRepository\n                .findByUsername(appsmithUserAssignee.getUsername())\n                .orElseThrow(() -> new BadRequest(\"Assignee login not found\"));\n\n        UserEntity appsmithUserCurrent = crowUserService.getUserEntity(SecurityContext.getUsernameOrElseThrow());\n\n        UserEntity appsmithUserReporter = crowUserService.getUserEntity(taskRequest.getReporter());\n        UserEntity reporter = taskRequest.getReporter() == null ? appsmithUserCurrent : appsmithUserReporter;\n\n        Long taskTypeId = taskRequest.getTaskType() != null ? taskRequest.getTaskType() : 1L;\n        TaskType taskType =\n                taskTypeRepository.findById(taskTypeId).orElseThrow(() -> new BadRequest(\"Task type not found\"));\n\n        TaskStatus taskStatus = taskStatusRepository\n                .findByTaskTypeAndInitialStatusIsTrue(taskType)\n                .findFirst()\n                .orElseThrow(() -> new RuntimeException(\"Initial Task status for type is not defined\"));\n\n        Severity severity =\n                taskRequest.getSeverity() == null ? Severity.MEDIUM : Severity.fromValue(taskRequest.getSeverity());\n\n        Task task = new Task();\n\n        task.setName(taskRequest.getName());\n        task.setDescription(taskRequest.getDescription());\n        task.setAssignee(assignee);\n        task.setReporter(reporter);\n        task.setStart(taskRequest.getStart());\n        task.setEndTime(taskRequest.getEnd());\n        task.setCreator(appsmithUserCurrent.getUsername());\n        task.setCreatedAt(new Date());\n        task.setTaskType(taskType);\n        task.setStatus(taskStatus);\n        task.setSeverity(severity);\n\n        if (taskRequest.getParent() != null) {\n            task.setSubtask(true);\n\n            Subtask subtask = new Subtask();\n            subtask.setTask(task);\n            subtask.setCreator(appsmithUserCurrent.getUsername());\n            subtask.setCreatedAt(new Date());\n\n            Task parentTask = taskRepository\n                    .findById(taskRequest.getParent())\n                    .orElseThrow(() -> new BadRequest(\"Parent task not found\"));\n\n            Set<Subtask> subtasks = parentTask.getSubtasks();\n            if (subtasks == null) {\n                subtasks = Set.of(subtask);\n            }\n\n            subtasks.add(subtask);\n            parentTask.setSubtasks(subtasks);\n            subTaskRepository.save(subtask);\n            taskRepository.save(parentTask);\n        }\n        return taskRepository.save(task);\n    }\n\n    @Transactional\n    public Optional<Task> getTaskById(long id) {\n        return taskRepository.findById(id);\n    }\n\n    @Transactional\n    public void deleteTask(long id) {\n        Task task = taskRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        task.setDeleted(true);\n        taskRepository.save(task);\n    }\n\n    @Transactional\n    public Task updateName(String name, Long id) {\n        Task task = taskRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Task not found\"));\n        task.setName(name);\n        taskRepository.save(task);\n        return task;\n    }\n\n    @Transactional\n    public Task updateTaskProperty(UpdateTaskRequest request, Long id) {\n        boolean updateStatus = false;\n        Task task = taskRepository.findById(id).orElseThrow(() -> new BadRequest(\"Task not found\"));\n        if (request.getStatus() != null) {\n            task = changeStatus(request.getStatus(), task);\n            updateStatus = true;\n        }\n        if (request.getSeverity() != null) {\n            task.setSeverity(Severity.fromValue(request.getSeverity()));\n            updateStatus = true;\n        }\n        if (request.getName() != null) {\n            task.setName(request.getName());\n            updateStatus = true;\n        }\n        if (request.getDescription() != null) {\n            task.setDescription(request.getDescription());\n            updateStatus = true;\n        }\n        if (request.getAssignee() != null) {\n            task.setAssignee(crowUserService.getUserEntity(request.getAssignee()));\n            updateStatus = true;\n        }\n        if (request.getReporter() != null) {\n            task.setReporter(crowUserService.getUserEntity(request.getReporter()));\n            updateStatus = true;\n        }\n        if (request.getParent() != null) {\n            Task parent = taskRepository\n                    .findById(request.getParent())\n                    .orElseThrow(() -> new RuntimeException(\"Parent task not found\"));\n            Set<Subtask> subtasks = parent.getSubtasks();\n            if (subtasks == null) {\n                subtasks = Set.of();\n            }\n            Task finalTask = task;\n            if (subtasks.stream().anyMatch(subtask -> subtask.getTask().getId().equals(finalTask.getId()))) {\n                throw new BadRequest(\"Task already in subtasks\");\n            }\n            Optional<Subtask> max = subtasks.stream().max(Comparator.comparing(Subtask::getSequence));\n            Subtask subtask = new Subtask();\n            subtask.setTask(task);\n            subtask.setSequence(max.map(value -> value.getSequence() + 10).orElse(1));\n            subtasks.add(subtask);\n            parent.setSubtasks(subtasks);\n            taskRepository.save(parent);\n            task.setSubtask(true);\n            taskRepository.save(task);\n        }\n        if (request.getTaskType() != null) {\n            task.setTaskType(taskTypeRepository\n                    .findById(request.getTaskType())\n                    .orElseThrow(() -> new RuntimeException(\"Task type not found\")));\n            updateStatus = true;\n        }\n        if (request.getEnd() != null) {\n            task.setEndTime(request.getEnd());\n            updateStatus = true;\n        }\n        if (request.getStart() != null) {\n            task.setStart(request.getStart());\n            updateStatus = true;\n        }\n        if (updateStatus) {\n            task.setModifiedAt(new Date());\n            task.setModifier(SecurityContext.getUsernameOrElseThrow());\n            taskRepository.save(task);\n        }\n        return task;\n    }\n\n    private Task changeStatus(Long status, Task task) {\n        TaskStatus currentStatus = task.getStatus();\n        if (currentStatus == null) {\n            throw new BadRequest(\"Task status is not defined. Unable to determine next status\");\n        }\n        if (currentStatus.getId().equals(status)) {\n            return task;\n        }\n        // getting object with all fields\n        currentStatus = taskStatusRepository\n                .findById(currentStatus.getId())\n                .orElseThrow(() -> new RuntimeException(\"Task status not found\"));\n        if (currentStatus.getAvailableNextStatuses() == null\n                || currentStatus.getAvailableNextStatuses().isEmpty()) {\n            throw new BadRequest(\"Task status is not defined. Unable to determine next status\");\n        }\n        if (currentStatus.getAvailableNextStatuses().stream()\n                .noneMatch(taskStatus -> taskStatus.getId().equals(status))) {\n            throw new BadRequest(\"Unable to perform status transition\");\n        }\n        TaskStatus newStatus =\n                taskStatusRepository.findById(status).orElseThrow(() -> new RuntimeException(\"Task status not found\"));\n        task.setStatus(newStatus);\n        return task;\n    }\n\n    public Double computeTotalHoursLogged(Task task) {\n        if (task != null && task.getHoursLogged() != null) {\n            return task.getHoursLogged().stream().map(TimeLog::getAmount).reduce(0d, Double::sum);\n        }\n        return null;\n    }\n\n    public int getSubtasksCount(Task task) {\n        if (task != null && task.getSubtasks() != null) {\n            return task.getSubtasks().size();\n        }\n        return 0;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/WorkLogController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.conversion.TaskMapper;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.TimeLogDto;\nimport com.ua.crow.mes.service.WorkLogService;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"worklogs\")\npublic class WorkLogController {\n    final WorkLogService workLogService;\n    final TaskMapper taskMapper;\n\n    public WorkLogController(WorkLogService workLogService, TaskMapper taskMapper) {\n        this.workLogService = workLogService;\n        this.taskMapper = taskMapper;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PostMapping\n    public TaskDto logWork(@RequestBody TimeLogDto timeLogDto) {\n        if (timeLogDto.getTaskId() == null) {\n            throw new RuntimeException(\"Task id is required\");\n        }\n\n        Task task = workLogService.logWork(timeLogDto.getDate(), timeLogDto.getAmount(), timeLogDto.getTaskId());\n        return taskMapper.toDto(task);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @DeleteMapping(\"{timeLogId}/task/{taskId}\")\n    public TaskDto deleteWorkLog(@PathVariable Long timeLogId, @PathVariable Long taskId) {\n        if (taskId == null) {\n            throw new RuntimeException(\"Task id is required\");\n        }\n        if (timeLogId == null) {\n            throw new RuntimeException(\"Time log id is required\");\n        }\n        Task task = workLogService.deleteWorkLog(timeLogId, taskId);\n        return taskMapper.toDto(task);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/TaskController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.conversion.TaskMapper;\nimport com.ua.crow.mes.dto.CreateTaskRequest;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.mes.dto.UpdateTaskRequest;\nimport com.ua.crow.mes.service.TaskService;\nimport jakarta.annotation.security.RolesAllowed;\nimport java.util.Optional;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController()\n@RequestMapping(\"tasks\")\npublic class TaskController {\n\n    final TaskService taskService;\n    final TaskMapper taskMapper;\n\n    public TaskController(TaskService taskService, TaskMapper taskMapper) {\n        this.taskService = taskService;\n        this.taskMapper = taskMapper;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(value = \"{id}\", produces = \"application/json\")\n    public ResponseEntity<TaskDto> getTask(@PathVariable Long id) {\n        Optional<Task> task = taskService.getTaskById(id);\n//        FileSearchService.TaskFiles files = fileSearchService.getFilesForTask(id);\n        return task.map(value -> {\n                    TaskDto taskDto = taskMapper.toDto(value);\n//                    taskDto.setAudioUrl(files.primaryAudio());\n//                    taskDto.setAttachments(files.attachments());\n                    return ResponseEntity.ok(taskDto);\n                })\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PostMapping(produces = \"application/json\")\n    public ResponseEntity<TaskDto> createTask(@RequestBody CreateTaskRequest taskRequest) {\n        Task task = taskService.createTask(taskRequest);\n        return ResponseEntity.ok(taskMapper.toDto(task));\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PatchMapping(\"{id}\")\n    public TaskDto updateTask(@RequestBody UpdateTaskRequest request, @PathVariable Long id) {\n        return taskMapper.toDto(taskService.updateTaskProperty(request, id));\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @DeleteMapping(value = \"{id}\", produces = \"application/json\")\n    public ResponseEntity<?> deleteTask(@PathVariable Long id) {\n        taskService.deleteTask(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @ExceptionHandler({Exception.class})\n    public ResponseEntity<?> handleException(Exception exception) {\n        return ResponseEntity.badRequest().body(new Exception(exception.getMessage()));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/FileUploadController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.dto.FileTypes;\nimport com.ua.crow.mes.dto.AttachmentDto;\nimport com.ua.crow.mes.dto.Exception;\nimport com.ua.crow.mes.dto.FileUploadRequest;\nimport com.ua.crow.exceptions.FileUploadException;\nimport jakarta.annotation.security.RolesAllowed;\nimport jakarta.servlet.http.HttpServletRequest;\n\nimport java.io.IOException;\nimport java.security.InvalidParameterException;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"files\")\npublic class FileUploadController {\n\n    public FileUploadController( ) {\n\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @PostMapping(\"/upload\")\n    public ResponseEntity<AttachmentDto> upload(@ModelAttribute FileUploadRequest request, ModelMap modelMap)\n            throws IOException, InvalidParameterException {\n        modelMap.addAttribute(request);\n\n        if (request.taskId() == null) throw new FileUploadException(\"Missing task Id\");\n        if (request.fileType().equals(FileTypes.AUDIO)\n                && request.isPrimaryAudio().equals(null))\n            throw new FileUploadException(\"Missing audioUploadSettings parameter\");\n\n//        String path = fileUploadService.uploadFile(\n//                request.taskId(), request.fileType(), request.isPrimaryAudio(), request.file());\n        return ResponseEntity.ok(new AttachmentDto(\"\"));\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/s3/**\")\n    public @ResponseBody byte[] download(HttpServletRequest request) throws IOException {\n        String filePath = request.getRequestURL().toString().split(\"s3/\")[1];\n        return null;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @DeleteMapping(\"/s3/**\")\n    public ResponseEntity<?> delete(HttpServletRequest request) {\n        String filePath = request.getRequestURL().toString().split(\"s3/\")[1];\n//        fileUploadService.deleteFile(filePath);\n        return ResponseEntity.ok().build();\n    }\n\n    @ExceptionHandler({FileUploadException.class})\n    public ResponseEntity<?> handleInvalidParameterException(FileUploadException ex) {\n        return ResponseEntity.badRequest().body(new Exception(ex.getMessage()));\n    }\n\n    @ExceptionHandler({IOException.class})\n    public ResponseEntity<?> handleIOException(IOException ex) {\n        return ResponseEntity.internalServerError().body(new Exception(ex.getMessage()));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/ReferenceController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Severity;\nimport com.ua.crow.mes.repo.TaskStatusRepository;\nimport com.ua.crow.mes.repo.TaskTypeRepository;\nimport com.ua.crow.mes.conversion.SeverityMapper;\nimport com.ua.crow.mes.conversion.TaskStatusMapper;\nimport com.ua.crow.mes.conversion.TaskTypeMapper;\nimport com.ua.crow.mes.dto.SeverityDto;\nimport com.ua.crow.mes.dto.TaskStatusDto;\nimport com.ua.crow.mes.dto.TaskTypeDto;\nimport jakarta.annotation.security.RolesAllowed;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@RequestMapping(\"references\")\npublic class ReferenceController {\n    final TaskStatusRepository taskStatusRepository;\n    final TaskTypeRepository taskTypeRepository;\n    final SeverityMapper severityMapper;\n    final TaskStatusMapper taskStatusMapper;\n    final TaskTypeMapper taskTypeMapper;\n\n    public ReferenceController(\n            TaskStatusRepository taskStatusRepository,\n            TaskTypeRepository taskTypeRepository,\n            SeverityMapper severityMapper,\n            TaskStatusMapper taskStatusMapper,\n            TaskTypeMapper taskTypeMapper) {\n        this.taskStatusRepository = taskStatusRepository;\n        this.taskTypeRepository = taskTypeRepository;\n        this.severityMapper = severityMapper;\n        this.taskStatusMapper = taskStatusMapper;\n        this.taskTypeMapper = taskTypeMapper;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/severityList\")\n    public List<SeverityDto> severityList() {\n        return Stream.of(Severity.values()).map(severityMapper::toDto).toList();\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/taskStatusList\")\n    public List<TaskStatusDto> taskStatusList() {\n        List<TaskStatusDto> list = new LinkedList<>();\n        taskStatusRepository.findAll().forEach(taskStatus -> list.add(taskStatusMapper.toDto(taskStatus)));\n        return list;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/nextStatusList\")\n    public List<TaskStatusDto> nextStatusList(@RequestParam Long id) {\n        List<TaskStatusDto> list = new LinkedList<>();\n        taskStatusRepository.findById(id).ifPresent(taskStatus -> taskStatus\n                .getAvailableNextStatuses()\n                .forEach(status -> list.add(taskStatusMapper.toDto(status))));\n        return list;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/task-types\")\n    public List<TaskTypeDto> getTaskTypes() {\n        return StreamSupport.stream(taskTypeRepository.findAll().spliterator(), false)\n                .filter(taskType -> !taskType.isDeleted())\n                .map(taskTypeMapper::toDto)\n                .toList();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/controllers/CurrentUserTaskController.java =====\npackage com.ua.crow.mes.controllers;\n\nimport com.ua.crow.mes.database.Task;\nimport com.ua.crow.mes.conversion.TaskMapper;\nimport com.ua.crow.mes.dto.TaskDto;\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.mes.service.CurrentUserTaskSearchService;\nimport com.ua.crow.mes.service.TaskService;\nimport jakarta.annotation.security.RolesAllowed;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.data.web.SortDefault;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"user-tasks\")\npublic class CurrentUserTaskController {\n    final TaskService taskService;\n\n    final CurrentUserTaskSearchService currentUserTaskSearchService;\n\n    final TaskMapper taskMapper;\n\n    final CrowUserService crowUserService;\n\n    public CurrentUserTaskController(\n            TaskService taskService,\n            CurrentUserTaskSearchService currentUserTaskSearchService,\n            TaskMapper taskMapper,\n            CrowUserService crowUserService) {\n        this.taskService = taskService;\n        this.currentUserTaskSearchService = currentUserTaskSearchService;\n        this.taskMapper = taskMapper;\n        this.crowUserService = crowUserService;\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/planned-for-today\")\n    public Page<TaskDto> getMyTodayTasks(\n            @PageableDefault(size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService\n                .getPlannedForTodayTasksOfUser(pageable)\n                .map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/planned\")\n    public Page<TaskDto> getMyPlannedTasks(\n            @PageableDefault(page = 0, size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService.getPlannedTasksOfUser(pageable).map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/in-progress\")\n    public Page<TaskDto> getMyInProgressTasks(\n            @PageableDefault(page = 0, size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService.getInProgressTasksOfUser(pageable).map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping(\"/backlog\")\n    public Page<TaskDto> getMyTasks(\n            @PageableDefault(page = 0, size = 20)\n                    @SortDefault.SortDefaults({@SortDefault(sort = \"severity\", direction = Sort.Direction.DESC)})\n                    Pageable pageable) {\n        return currentUserTaskSearchService.computeBacklog(pageable).map(taskMapper::toDto);\n    }\n\n    @RolesAllowed({\"ADMIN\", \"RESEARCH\", \"WORKER\"})\n    @GetMapping\n    public ResponseEntity<List<TaskDto>> getMyTasks(@RequestParam Long[] ids) {\n        List<Task> list = new ArrayList<>();\n        for (Long id : ids) {\n            Optional<Task> task = taskService.getTaskById(id);\n            if (task.isEmpty()) return ResponseEntity.notFound().build();\n            list.add(task.get());\n        }\n        return ResponseEntity.ok(list.stream().map(taskMapper::toDto).toList());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/WorklogRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.TimeLog;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WorklogRepository extends CrudRepository<TimeLog, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/SubTaskRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.Subtask;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface SubTaskRepository extends CrudRepository<Subtask, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskSearchRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.Task;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.PagingAndSortingRepository;\n\npublic interface TaskSearchRepository extends PagingAndSortingRepository<Task, Long> {\n    @Query(\n            \"select t from Task t where (t.assignee.id = ?1  or t.assignee is null) and t.deleted = false and t.isSubtask = ?2 and t.status.id in(?3) order by t.severity desc\")\n    Page<Task> findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdIn(\n            Long assigneeId, boolean isSubtask, List<Long> taskStatusId, Pageable pageable);\n\n    @Query(\n            \"select t from Task t where (t.assignee.id = ?1  or t.assignee is null) and t.deleted = false and t.isSubtask = ?2 and t.status.id in(?3) and (?4) between t.start and t.endTime order by t.severity desc\")\n    Page<Task> findAllByAssigneeIdOrIsNullAndDeletedAndIsSubtaskAndStatusIdInForToday(\n            Long assigneeId, boolean isSubtask, List<Long> taskStatusId, LocalDateTime today, Pageable pageable);\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.Task;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface TaskRepository extends CrudRepository<Task, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskTypeRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.TaskType;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface TaskTypeRepository extends CrudRepository<TaskType, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/mes/repo/TaskStatusRepository.java =====\npackage com.ua.crow.mes.repo;\n\nimport com.ua.crow.mes.database.TaskStatus;\nimport com.ua.crow.mes.database.TaskType;\nimport java.util.stream.Stream;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface TaskStatusRepository extends CrudRepository<TaskStatus, Long> {\n    Stream<TaskStatus> findByTaskTypeAndInitialStatusIsTrue(TaskType taskType);\n\n    Stream<TaskStatus> findByTaskTypeAndTerminatedStatusIsFalse(TaskType taskType);\n\n    Stream<TaskStatus> findByTerminatedStatusIsFalse();\n\n    Stream<TaskStatus> findByInProgressStatusIsTrue();\n\n    Stream<TaskStatus> findByPlannedStatusIsTrue();\n\n    Stream<TaskStatus> findByBacklogStatusIsTrue();\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/AppShell.java =====\npackage com.ua.crow;\n\nimport com.vaadin.flow.component.page.AppShellConfigurator;\nimport com.vaadin.flow.component.page.Push;\nimport com.vaadin.flow.shared.communication.PushMode;\nimport com.vaadin.flow.shared.ui.Transport;\nimport com.vaadin.flow.theme.Theme;\n\n@Push(value = PushMode.AUTOMATIC, transport = Transport.WEBSOCKET)\n@Theme(value = \"crow\")\n\npublic class AppShell implements AppShellConfigurator {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/exceptions/MinioException.java =====\npackage com.ua.crow.exceptions;\n\npublic class MinioException extends RuntimeException{\n    public MinioException() {\n        super();\n    }\n\n    public MinioException(String message) {\n        super(message);\n    }\n\n    public MinioException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public MinioException(Throwable cause) {\n        super(cause);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/exceptions/FileUploadException.java =====\npackage com.ua.crow.exceptions;\n\nimport java.security.InvalidParameterException;\n\npublic class FileUploadException extends InvalidParameterException {\n    public FileUploadException(String msg) {\n        super(msg);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ItemGroup.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n// screws, nuts, grinders etc customised by customer, any catalogs defined by user\n@Getter\n@Setter\n@Entity\npublic class ItemGroup extends BasicEntityWithNumericId {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ToolType.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.NamedNumericIdEntity;\nimport jakarta.persistence.Entity;\n\n// Matherials\n// Tools managed by the system\n// Electric tools independent on system\n// Manual tools etc\n@Entity\npublic class ToolType extends NamedNumericIdEntity {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ResourceItem.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n@Setter\n@Getter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class ResourceItem extends NamedBasicEntityWithNumericId {\n\n    @Enumerated(EnumType.STRING)\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    private double price;\n\n    @ManyToOne\n    @JoinColumn(name = \"group_id\")\n    private ResourceGroup group;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/InventoryPurchase.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.cashbox.Cashbox;\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.Currency;\nimport com.ua.crow.inventory.database.ToolItem;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n// Add tools withdraw tools from inventory\n\n@Getter\n@Setter\n@Entity\npublic class InventoryPurchase extends BasicEntityWithNumericId {\n    @ManyToOne\n    private ToolItem tool;\n\n    private Double price;\n\n    @ManyToOne\n    private Currency currency;\n\n    @ManyToOne\n    Cashbox cashbox;\n\n    private Double amount;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/InventoryDecomissioning.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ToolItem;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class InventoryDecomissioning extends BasicEntityWithNumericId {\n\n    @ManyToOne\n    private ToolItem item;\n\n    private String reason;\n\n    private Double amount;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/Inventarisation.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport java.util.Date;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Inventarisation extends BasicEntityWithNumericId {\n    private Date inventarisationDateStart;\n    private Date inventarisationDateEnd;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/operations/InventoryCheckIn.java =====\npackage com.ua.crow.inventory.database.operations;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.inventory.database.ToolItem;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Date;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Getter\n@Setter\npublic class InventoryCheckIn extends BasicEntityWithNumericId {\n    @ManyToOne\n    private ToolItem item;\n\n    private Date checkInDate;\n\n    @ManyToOne\n    private Inventarisation inventarisation;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ToolItem.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.Units;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@Entity\npublic class ToolItem extends NamedBasicEntityWithNumericId {\n\n    private boolean participatesInventarisation;\n\n    @ManyToOne\n    private ToolType type;\n\n    private String barcode;\n\n    private String photo;\n\n    @ManyToOne\n    private ItemGroup itemGroup;\n\n    @ManyToOne\n    private Units units;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/InventoryLeftovers.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.NumericIdEntity;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.ManyToOne;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Date;\n\n@Entity\n@Getter\n@Setter\npublic class InventoryLeftovers extends NumericIdEntity {\n    @ManyToOne\n    Stock stock;\n\n    @ManyToOne\n    ToolItem item;\n\n    Double leftover;\n\n    Date effectiveDate;\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/Stock.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport jakarta.persistence.Entity;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Entity\npublic class Stock extends BasicEntityWithNumericId {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/database/ResourceGroup.java =====\npackage com.ua.crow.inventory.database;\n\nimport com.ua.crow.database.models.common.AbstractResourceGroup;\nimport com.ua.crow.plm.database.WithdrawAlgorythm;\nimport com.ua.crow.service.conversion.Convertable;\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.util.List;\n\n@Setter\n@Getter\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class ResourceGroup extends AbstractResourceGroup<ResourceGroup> implements Convertable {\n\n    @Enumerated(EnumType.STRING)\n    private WithdrawAlgorythm withdrawAlgorythm;\n\n    private double minimalUnitToWithdraw;\n\n    @OneToMany(mappedBy = \"group\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    List<ResourceItem> resources;\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/conversion/ResourceGroupDtoToEntity.java =====\npackage com.ua.crow.inventory.conversion;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ResourceGroupDtoToEntity implements Converter<ResourceGroupDto, ResourceGroup> {\n\n    @Override\n    public ResourceGroup convert(ResourceGroupDto source) {\n        return toEntity(source);\n    }\n\n    public ResourceGroup toEntity(ResourceGroupDto dto) {\n        if (dto == null) {\n            return null;\n        }\n\n        ResourceGroup resourceGroup = new ResourceGroup();\n        resourceGroup.setId(dto.getId());\n        resourceGroup.setName(dto.getName());\n        resourceGroup.setCreatedAt(dto.getCreatedAt());\n        resourceGroup.setModifiedAt(dto.getModifiedAt());\n        resourceGroup.setCreator(dto.getCreator());\n        resourceGroup.setModifier(dto.getModifier());\n        resourceGroup.setDeleted(dto.isDeleted());\n        resourceGroup.setUkrName(dto.getUkrName());\n        resourceGroup.setWithdrawAlgorythm(dto.getWithdrawAlgorythm());\n        resourceGroup.setMinimalUnitToWithdraw(dto.getMinimalUnitToWithdraw());\n        resourceGroup.setResources(dto.getResources());\n        resourceGroup.setParent(dto.getParent());\n\n        // Explicitly ignore children\n        resourceGroup.setChildren(null);\n\n        return resourceGroup;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/conversion/ResourceGroupToDto.java =====\npackage com.ua.crow.inventory.conversion;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.plm.converters.mappers.ResourceGroupMapper;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ResourceGroupToDto implements Converter<ResourceGroup, ResourceGroupDto> {\n\n    @Autowired\n    private  ResourceGroupMapper resourceGroupMapper;\n\n    @Override\n    public ResourceGroupDto convert(ResourceGroup source) {\n        return toDto(source);\n    }\n\n    public ResourceGroupDto toDto(ResourceGroup resourceGroup) {\n        if (resourceGroup == null) {\n            return null;\n        }\n\n        ResourceGroupDto dto = new ResourceGroupDto();\n        dto.setId(resourceGroup.getId());\n        dto.setName(resourceGroup.getName());\n        dto.setCreatedAt(resourceGroup.getCreatedAt());\n        dto.setModifiedAt(resourceGroup.getModifiedAt());\n        dto.setCreator(resourceGroup.getCreator());\n        dto.setModifier(resourceGroup.getModifier());\n        dto.setDeleted(resourceGroup.isDeleted());\n        dto.setUkrName(resourceGroup.getUkrName());\n        dto.setWithdrawAlgorythm(resourceGroup.getWithdrawAlgorythm());\n        dto.setMinimalUnitToWithdraw(resourceGroup.getMinimalUnitToWithdraw());\n        dto.setResources(resourceGroup.getResources());\n        dto.setParent(resourceGroup.getParent());\n\n        // Explicitly ignore children\n        dto.setChildren(null);\n\n        return dto;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/service/ResourceGroupService.java =====\npackage com.ua.crow.inventory.service;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport com.ua.crow.inventory.repo.ResourceGroupRepository;\nimport com.ua.crow.plm.dto.ResourceGroupDto;\nimport com.ua.crow.service.graph.AbstractTreeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n\n\n@Service\npublic class ResourceGroupService extends AbstractTreeService<ResourceGroup, Long> {\n\n    private final ResourceGroupRepository resourceGroupRepository;\n\n    @Autowired\n    public ResourceGroupService(ResourceGroupRepository resourceGroupRepository) {\n        this.resourceGroupRepository = resourceGroupRepository;\n\n    }\n\n\n\n    @Transactional(readOnly = true)\n    public Optional<ResourceGroupDto> findById(Long id) {\n        Optional<ResourceGroup> resourceGroup = resourceGroupRepository.findById(id);\n        return resourceGroup.map(e->e.convert(ResourceGroupDto.class));\n    }\n\n\n    @Override\n    protected CrudRepository<ResourceGroup, Long> getRepository() {\n        return resourceGroupRepository;\n    }\n\n//    @Transactional(readOnly = true)\n//    public List<ResourceGroupDto> getTree() {\n//        List<ResourceGroup> allGroups = StreamSupport.stream(resourceGroupRepository.findAll().spliterator(), false)\n//                .collect(Collectors.toList());\n//        List<ResourceGroup> tree = buildTree(allGroups);\n//        return tree.stream().map(resourceGroupMapper::toDto).collect(Collectors.toList());\n//    }\n\n\n\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/repo/ToolTypeRepository.java =====\npackage com.ua.crow.inventory.repo;\n\nimport com.ua.crow.inventory.database.ToolType;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ToolTypeRepository extends CrudRepository<ToolType, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/repo/ResourceGroupRepository.java =====\npackage com.ua.crow.inventory.repo;\n\nimport com.ua.crow.inventory.database.ResourceGroup;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ResourceGroupRepository extends CrudRepository<ResourceGroup, Long> {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/inventory/repo/ItemRepository.java =====\npackage com.ua.crow.inventory.repo;\n\nimport com.ua.crow.inventory.database.ToolItem;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ItemRepository extends CrudRepository<ToolItem, Long> {}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/ResourceAlreadyExist.java =====\npackage com.ua.crow.service;\n\npublic class ResourceAlreadyExist extends RuntimeException{\n\n    public ResourceAlreadyExist() {\n    }\n\n    public ResourceAlreadyExist(String message) {\n        super(message);\n    }\n\n    public ResourceAlreadyExist(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public ResourceAlreadyExist(Throwable cause) {\n        super(cause);\n    }\n\n    public ResourceAlreadyExist(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/BadRequest.java =====\npackage com.ua.crow.service;\n\npublic class BadRequest extends RuntimeException {\n    public BadRequest(String message) {\n        super(message);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/graph/AbstractTreeService.java =====\npackage com.ua.crow.service.graph;\n\nimport com.ua.crow.database.models.common.AbstractResourceGroup;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\npublic abstract class AbstractTreeService<E extends AbstractResourceGroup<E>, ID> {\n\n    protected abstract CrudRepository<E, ID> getRepository();\n\n    @Transactional(readOnly = true)\n    public List<E> findAll() {\n        return StreamSupport.stream(getRepository().findAll().spliterator(), false)\n                .collect(Collectors.toList());\n    }\n\n    @Transactional(readOnly = true)\n    public List<E> getTree() {\n        List<E> allGroups = findAll();\n        return buildTree(allGroups);\n    }\n\n    protected List<E> buildTree(List<E> allGroups) {\n        List<E> roots = allGroups.stream()\n                .filter(group -> group.getParent() == null)\n                .collect(Collectors.toList());\n        roots.forEach(root -> setChildren(root, allGroups));\n        return roots;\n    }\n\n    private void setChildren(E parent, List<E> allGroups) {\n        List<E> children = allGroups.stream()\n                .filter(group -> group.getParent() != null && group.getParent().getId().equals(parent.getId()))\n                .collect(Collectors.toList());\n        parent.setChildren(children);\n        children.forEach(child -> setChildren(child, allGroups));\n    }\n\n    @Transactional\n    public E save(E entity) {\n        return getRepository().save(entity);\n    }\n\n    @Transactional\n    public void deleteById(ID id) {\n        getRepository().deleteById(id);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/minio/MinioService.java =====\npackage com.ua.crow.service.minio;\n\nimport com.ua.crow.config.Buckets;\nimport com.ua.crow.config.Minio;\nimport com.ua.crow.exceptions.MinioException;\nimport com.ua.crow.plm.service.UriEncodingService;\nimport io.minio.*;\nimport io.minio.errors.*;\nimport io.minio.http.Method;\nimport io.minio.messages.Item;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\n@Service\npublic class MinioService {\n    @Autowired\n    Minio minio;\n    @Value(\"${tempdir.url}\")\n    private String tempBufferAddress;\n\n    @Value(\"${minio.url}\")\n    private String url;\n    @Autowired\n    UriEncodingService encodingService;\n\n    @Autowired\n    RestTemplate restTemplate;\n\n    public void createFolder(Buckets bucket, String directoryName) {\n        try {\n            minio.getClient().putObject(\n                    PutObjectArgs.builder()\n                            .bucket(bucket.name())\n                            .object(removeNonLetters(directoryName) + \"/\") // имя \"файла\" с завершающим слэшем указывает на каталог\n                            .stream(new ByteArrayInputStream(new byte[]{}), 0, -1)\n                            .build()\n            );\n        } catch (ServerException | InsufficientDataException | ErrorResponseException | IOException |\n                 NoSuchAlgorithmException | InvalidKeyException | InvalidResponseException | XmlParserException |\n                 InternalException e) {\n            throw new MinioException(e);\n        }\n    }\n\n    public static String removeNonLetters(String input) {\n        if (input == null || input.isEmpty()) {\n            return \"\";\n        }\n        // Используем регулярное выражение для удаления всех символов, кроме букв (латиница и кириллица)\n        String lettersOnly = input.replaceAll(\"[^a-zA-Zа-яА-Я_0-9/]\", \"\");\n        // Преобразуем строку в верхний регистр\n        return lettersOnly;\n    }\n\n    public void uploadFileFromUrl(Buckets bucket, String folder, String thumbnailUrl) {\n        uploadFileFromUrl(bucket, folder, thumbnailUrl, null);\n    }\n\n    public Stream<Result<Item>> list(Buckets bucket, String folder) {\n        return StreamSupport.stream(minio.getClient()\n                .listObjects(ListObjectsArgs.builder().bucket(bucket.name())\n                        .prefix(folder)\n                        .recursive(false)\n                        .build()).spliterator(), false);\n\n    }\n\n    public Optional<String> getSignedUrlForTheFirstObjectInFolder(Buckets bucket, String folder) {\n        return list(bucket, folder).map(i -> get(i)).findFirst().flatMap(i -> Optional.of(sign(bucket, i.objectName())));\n    }\n\n    private Item get(Result<Item> i) {\n        try {\n            return i.get();\n        } catch (Exception e) {\n            throw new MinioException(\"Error occurred while getting signed URL for the first object\", e);\n        }\n    }\n\n\n    public String sign(Buckets bucket, String objectName) {\n        try {\n            return minio.getClient()\n                    .getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()\n                            .method(Method.GET)\n                            .bucket(bucket.name())\n                            .object(objectName)\n                            .expiry(1, TimeUnit.HOURS)\n                            .build());\n        } catch (Exception e) {\n            throw new MinioException(e);\n        }\n    }\n\n    public byte[] getObjectAsBytes(Buckets bucket, String objectName) {\n        try (InputStream stream = minio.getClient().getObject(\n                GetObjectArgs.builder()\n                        .bucket(bucket.name())\n                        .object(objectName)\n                        .build());\n             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {\n\n            byte[] buffer = new byte[8192];\n            int bytesRead;\n            while ((bytesRead = stream.read(buffer)) != -1) {\n                byteArrayOutputStream.write(buffer, 0, bytesRead);\n            }\n            return byteArrayOutputStream.toByteArray();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error occurred while getting object from MinIO\", e);\n        }\n    }\n\n\n    public void uploadFileFromUrl(Buckets bucket, String folder, String thumbnailUrl, String filename) {\n\n        InputStream inputStream;\n        HttpResponse<InputStream> response = httpGet(thumbnailUrl);\n        // Получение InputStream из файла\n        inputStream = response.body();\n\n        if (filename == null) {\n            filename = UUID.randomUUID().toString();\n\n        }\n        // Определение имени объекта для MinIO\n        if (folder == null) {\n            throw new NullPointerException(\"Folder is empty\");\n        }\n        String objectName = folder + \"/\" + filename;\n\n        Optional<String> contentLength = response.headers().firstValue(\"Content-Length\");\n        long length = contentLength.map(Long::parseLong).orElse(-1L);\n\n        // Получение типа содержимого\n        Optional<String> contentType = response.headers().firstValue(\"Content-Type\");\n        String type = contentType.orElse(\"application/octet-stream\");\n\n        // Загрузка файла в MinIO\n        put(bucket, objectName, inputStream, length, type);\n\n\n    }\n\n    public HttpResponse<InputStream> httpGet(String url) {\n        try {\n\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(url))\n                    .GET()\n                    .build();\n\n            HttpResponse<InputStream> response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());\n\n            // Проверка ответа сервера\n            if (response.statusCode() != 200) {\n                throw new RuntimeException(\"Failed to connect to URL: \" + url);\n            }\n            return response;\n        } catch (IOException | InterruptedException e) {\n            throw new RuntimeException(\"Error occurred while downloading the file\", e);\n        }\n\n    }\n\n    public void put(Buckets bucket, String objectName, InputStream inputStream, long length, String type) {\n        try {\n            minio.getClient().putObject(\n                    PutObjectArgs.builder()\n                            .bucket(bucket.name())\n                            .object(objectName)\n                            .stream(inputStream, length, -1)\n                            .contentType(type)\n                            .build());\n        } catch (Exception e) {\n            throw new MinioException(e);\n        }\n    }\n\n    public void uploadFileTemporaryStorage(Buckets buckets, String url, String path) {\n        uploadFileFromUrl(buckets, path, tempBufferAddress + url);\n    }\n\n\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void delete(Buckets buckets, String objectName) {\n        if(exist(buckets,objectName)) {\n            String bucketName = buckets.name();\n            try {\n                minio.getClient().removeObject(\n                        io.minio.RemoveObjectArgs.builder()\n                                .bucket(bucketName)\n                                .object(objectName)\n                                .build()\n                );\n                System.out.println(\"File \" + objectName + \" successfully deleted from bucket \" + bucketName);\n            } catch (Exception e) {\n                throw new MinioException(\"Error occurred while deleting the file\", e);\n            }\n        }\n    }\n\n    public boolean exist(Buckets bucket, String objectName) {\n        try {\n            minio.getClient().statObject(\n                    StatObjectArgs.builder()\n                            .bucket(bucket.name())\n                            .object(objectName)\n                            .build()\n            );\n            return true;\n        } catch (ErrorResponseException e) {\n            if (e.errorResponse().code().equals(\"NoSuchKey\")) {\n                return false;\n            }\n            throw new MinioException(\"Error occurred while checking the file\", e);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error occurred while checking the file\", e);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/conversion/Optionalable.java =====\npackage com.ua.crow.service.conversion;\n\nimport java.util.Optional;\n\npublic interface Optionalable<T> {\n    default Optional<T> optional(){\n        return Optional.of((T)this);\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/conversion/Convertable.java =====\npackage com.ua.crow.service.conversion;\n\nimport com.ua.crow.util.SpringContext;\n\npublic interface Convertable {\n\n   default  <T> T convert(Class<T> type){\n       return SpringContext.getConversionService().convert(this,type);\n   }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/CrowUserService.java =====\npackage com.ua.crow.service;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.database.repository.UserRepository;\nimport com.ua.crow.dto.appsmith.Data;\nimport com.ua.crow.util.SecurityContext;\nimport com.ua.crow.workspace.WorkspaceType;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolderStrategy;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsPasswordService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.provisioning.JdbcUserDetailsManager;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\n\nimport javax.sql.DataSource;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CrowUserService extends JdbcUserDetailsManager implements UserDetailsPasswordService {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n    private SecurityContextHolderStrategy securityContextHolderStrategy;\n    private AuthenticationManager authenticationManager;\n\n\n    @Autowired\n    public CrowUserService(DataSource dataSource, UserRepository userRepository) {\n        super(dataSource);  // Pass DataSource to JdbcUserDetailsManager\n        this.userRepository = userRepository;\n    }\n    public UserEntity getUserEntity(String username) {\n        return userRepository.findByUsername(username)\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found: \" + username));\n    }\n\n    public UserEntity getUserEntity(Long userId) {\n        return userRepository.findById(userId)\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found with ID: \" + userId));\n    }\n\n    public UserEntity updateUserDetailsIfRequired(Data userData) {\n        Optional<UserEntity> optionalUserEntity = userRepository.findByUsername(userData.getUsername());\n        UserEntity existingUser = optionalUserEntity.orElseGet(() -> userRepository.save(convertUser(userData)));\n\n        UserEntity newUserEntity = convertUser(userData);\n        newUserEntity.setId(existingUser.getId());\n\n        if (!newUserEntity.equals(existingUser)) {\n            existingUser = userRepository.save(newUserEntity);\n        }\n\n        return existingUser;\n    }\n\n    private UserEntity convertUser(Data userData) {\n        UserEntity userEntity = new UserEntity();\n        userEntity.setUsername(userData.getUsername());\n        userEntity.setName(userData.getName());\n        userEntity.setEmail(userData.getEmail());\n        userEntity.setAnonymous(userData.isAnonymous());\n        userEntity.setEnabled(userData.isEnabled());\n        userEntity.setAccountNonExpired(userData.isAccountNonExpired());\n        userEntity.setAccountNonLocked(userData.isAccountNonLocked());\n        userEntity.setCredentialsNonExpired(userData.isCredentialsNonExpired());\n        return userEntity;\n    }\n\n    public UserDetails getUserDetails(UserEntity userEntity) {\n        return User.builder()\n                .username(userEntity.getUsername())\n                .password(userEntity.getPassword())\n                .authorities(List.of(new SimpleGrantedAuthority(\"ADMIN\"))) // adjust as necessary\n                .accountExpired(!userEntity.isAccountNonExpired())\n                .accountLocked(!userEntity.isAccountNonLocked())\n                .credentialsExpired(!userEntity.isCredentialsNonExpired())\n                .disabled(!userEntity.isEnabled())\n                .build();\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        UserEntity userEntity = getUserEntity(username);\n        return getUserDetails(userEntity);\n    }\n\n    @Override\n    public boolean userExists(String username) {\n        return userRepository.findByUsername(username).isPresent();\n    }\n\n    @Override\n    public UserDetails updatePassword(UserDetails user, String newPassword) {\n        UserEntity userEntity = getUserEntity(user.getUsername());\n        userEntity.setPassword(newPassword);\n        userRepository.save(userEntity);\n        return getUserDetails(userEntity);\n    }\n\n    public void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n        Assert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n        this.securityContextHolderStrategy = securityContextHolderStrategy;\n    }\n\n    public void setAuthenticationManager(AuthenticationManager authenticationManager) {\n        this.authenticationManager = authenticationManager;\n    }\n\n    public List<UserEntity> findAll() {\n        return userRepository.findAll();\n    }\n\n    public Optional<UserEntity> findById(Long id) {\n        return userRepository.findById(id);\n    }\n\n    public UserEntity create(UserEntity user) {\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        return userRepository.save(user);\n    }\n\n    public UserEntity update(UserEntity user) {\n        return userRepository.save(user);\n    }\n\n    public void delete(Long id) {\n        userRepository.deleteById(id);\n    }\n\n    public UserEntity changePassword(Long id, String newPassword) {\n        UserEntity entity = getUserEntity(id);\n        entity.setPassword(passwordEncoder.encode(newPassword));\n        return userRepository.save(entity);\n    }\n\n    public UserEntity getCurrentUser() {\n        String username = SecurityContext.getUsernameOrElseThrow();\n        return getUserEntity(username);\n    }\n\n    public void switchWorkspace(WorkspaceType workspace) {\n        UserEntity user = getCurrentUser();\n        user.setCurrentWorkspace(workspace);\n        userRepository.save(user);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/service/NotFoundException.java =====\npackage com.ua.crow.service;\n\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport lombok.Getter;\n\n@Getter\npublic class NotFoundException extends RuntimeException {\n    private  Long id;\n    private  Class entityType;\n    private  String searchCriteria;\n    private  FusionId fusionId;\n\n\n    public NotFoundException() {\n        id = null;\n        entityType = null;\n        searchCriteria = null;\n    }\n\n    public NotFoundException(Long id, Class entityType) {\n        super(\"Entity \"+entityType.getName()+\" with id: \"+id+\" not found\");\n        this.id = id;\n        this.entityType = entityType;\n        searchCriteria = null;\n    }\n\n    public NotFoundException(String searchCriteria, Class entityType) {\n        super(\"Entity \"+entityType.getName()+\" with field: \"+searchCriteria+\" not found\");\n        this.searchCriteria = searchCriteria;\n        this.entityType = entityType;\n        this.id = null;\n    }\n\n    public NotFoundException(String errorMessage) {\n        super(errorMessage);\n        this.searchCriteria = null;\n        this.entityType = null;\n        this.id = null;\n    }\n\n    public NotFoundException(FusionId searchCriteria, Class entityType) {\n        super(\"Entity \"+entityType.getName()+\" with field: \"+searchCriteria+\" not found\");\n        this.fusionId = searchCriteria;\n        this.searchCriteria = null;\n        this.entityType = null;\n        this.id = null;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/ExceptionHandlers.java =====\npackage com.ua.crow.controllers;\n\nimport static com.ua.crow.dto.ErrorInfo.createErrorInfo;\n\nimport com.ua.crow.database.models.common.basic.BasicEntityWithNumericId;\nimport com.ua.crow.database.models.common.basic.NamedBasicEntityWithNumericId;\nimport com.ua.crow.dto.basic.NumericIdEntityDto;\nimport com.ua.crow.dto.basic.NamedBasicEntityWithNumericIdDto;\nimport com.ua.crow.dto.ErrorInfo;\nimport com.ua.crow.service.BadRequest;\nimport com.ua.crow.service.NotFoundException;\nimport com.ua.crow.service.ResourceAlreadyExist;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.validation.ConstraintViolationException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class ExceptionHandlers {\n    private static final Logger logger = LoggerFactory.getLogger(ExceptionHandlers.class);\n\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    @ExceptionHandler(NotFoundException.class)\n    @ResponseBody\n    ErrorInfo handle404(HttpServletRequest req, Exception e) {\n        logger.error(e.getMessage());\n        return createErrorInfo(404, e.getMessage(), req.getRequestURI());\n    }\n\n    @ResponseStatus(HttpStatus.CONFLICT)\n    @ExceptionHandler(ResourceAlreadyExist.class)\n    @ResponseBody\n    ErrorInfo handle409(HttpServletRequest req, ResourceAlreadyExist e) {\n        logger.error(e.getMessage(),e);\n        return createErrorInfo(409, e.getMessage(), req.getRequestURI());\n    }\n\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(BadRequest.class)\n    @ResponseBody\n    ErrorInfo handleBadRequest(HttpServletRequest req, Exception e) {\n        logger.error(e.getMessage(),e);\n\n        return createErrorInfo(400, e.getMessage(), req.getRequestURI());\n    }\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(ConstraintViolationException.class)\n    @ResponseBody\n    ErrorInfo handleConstraintViolation(HttpServletRequest req, ConstraintViolationException e){\n        StringBuilder stringBuilder = new StringBuilder();\n        e.getConstraintViolations().forEach(constraintViolation -> {\n            stringBuilder.append(\"Constraint violation exception:\"+constraintViolation.getMessage()).append('\\n')\n                    .append(\"Recieved:\").append(constraintViolation.getInvalidValue()).append(\"\\n\");\n            if(constraintViolation.getRootBean() instanceof NamedBasicEntityWithNumericId) {\n                NamedBasicEntityWithNumericId bean = (NamedBasicEntityWithNumericId) constraintViolation.getRootBean();\n                if (bean.getName() != null && !\"\".equals(bean.getName())) {\n                    stringBuilder.append(\"Invalid object name: \").append(bean.getName()).append(\" ;\");\n                }\n            }\n            if(constraintViolation.getRootBean() instanceof BasicEntityWithNumericId) {\n                BasicEntityWithNumericId bean = (BasicEntityWithNumericId) constraintViolation.getRootBean();\n                if(bean.getId()!=null){\n                    stringBuilder.append(\"Invalid object id: \").append(bean.getId()).append(\" ;\");\n                }\n            }\n\n            if(constraintViolation.getRootBean() instanceof NamedBasicEntityWithNumericIdDto) {\n                NamedBasicEntityWithNumericId bean = (NamedBasicEntityWithNumericId) constraintViolation.getRootBean();\n                if (bean.getName() != null && !\"\".equals(bean.getName())) {\n                    stringBuilder.append(\"Invalid object name: \").append(bean.getName()).append(\" ;\");\n                }\n            }\n            if(constraintViolation.getRootBean() instanceof NumericIdEntityDto) {\n                BasicEntityWithNumericId bean = (BasicEntityWithNumericId) constraintViolation.getRootBean();\n                if(bean.getId()!=null){\n                    stringBuilder.append(\"Invalid object id: \").append(bean.getId()).append(\" ;\");\n                }\n            }\n        });\n        logger.error(e.getMessage(),e);\n        return createErrorInfo(400, stringBuilder.toString(), req.getRequestURI());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/OptionalAspect.java =====\npackage com.ua.crow.controllers;\n\nimport com.ua.crow.service.NotFoundException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Optional;\n\n@Aspect\n@Component\npublic class OptionalAspect {\n\n    // Pointcut для всех методов в контроллерах, аннотированных @RestController\n    @Pointcut(\"within(@org.springframework.web.bind.annotation.RestController *)\")\n    public void restController() {}\n\n    // Pointcut для всех методов, возвращающих Optional, внутри контроллеров\n    @Pointcut(\"execution(java.util.Optional *(..)) && restController()\")\n    public void optionalReturnMethods() {}\n\n    @AfterReturning(pointcut = \"optionalReturnMethods()\", returning = \"result\")\n    public void checkOptionalReturnValue(JoinPoint joinPoint, Object result) {\n\n        if (result instanceof Optional) {\n            Optional<?> optionalResult = (Optional<?>) result;\n            if (optionalResult.isEmpty()) {\n                String className = joinPoint.getTarget().getClass().getName();\n                String methodName = joinPoint.getSignature().getName();\n                Object[] methodArgs = joinPoint.getArgs();\n\n                // Получаем метод\n                Method method = null;\n                for (Method m : joinPoint.getTarget().getClass().getMethods()) {\n                    if (m.getName().equals(methodName) && m.getParameterCount() == methodArgs.length) {\n                        method = m;\n                        break;\n                    }\n                }\n\n                // Получаем значение из @RequestMapping\n                String requestMappingValue = \"\";\n                if (method != null) {\n                    RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);\n                    if (requestMapping != null) {\n                        requestMappingValue = String.join(\", \", requestMapping.value());\n                    }\n                }\n\n                // Конструируем сообщение об ошибке\n                String errorMessage = String.format(\"Class: %s, Method: %s, Params: %s, RequestMapping: %s\",\n                        className, methodName, Arrays.toString(methodArgs), requestMappingValue);\n\n                throw new NotFoundException(errorMessage);\n\n            }\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/TestController.java =====\npackage com.ua.crow.controllers;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\n\n@RestController\n@RequestMapping(\"/test\")\npublic class TestController {\n\n    @GetMapping(\"/example.step\")\n    public ResponseEntity<Resource> getExampleStep() throws IOException {\n        ClassPathResource resource = new ClassPathResource(\"example.step\");\n        return ResponseEntity.ok()\n                .contentType(MediaType.APPLICATION_OCTET_STREAM)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=example.step\")\n                .contentLength(resource.contentLength())\n                .body(resource);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/controllers/UserController.java =====\npackage com.ua.crow.controllers;\n\nimport com.ua.crow.database.models.auth.UserEntity;\nimport com.ua.crow.mes.conversion.UserEntityMapper;\nimport com.ua.crow.mes.dto.CreateUserDto;\nimport com.ua.crow.mes.dto.PasswordChangeDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport com.ua.crow.service.CrowUserService;\nimport jakarta.annotation.security.RolesAllowed;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    private final CrowUserService userService;\n    private final UserEntityMapper mapper;\n\n    public UserController(CrowUserService userService, UserEntityMapper mapper) {\n        this.userService = userService;\n        this.mapper = mapper;\n    }\n\n    @GetMapping\n    @RolesAllowed(\"ADMIN\")\n    public List<UserDto> getAll() {\n        return userService.findAll().stream().map(mapper::toDto).toList();\n    }\n\n    @GetMapping(\"/{id}\")\n    @RolesAllowed(\"ADMIN\")\n    public Optional<UserDto> getById(@PathVariable Long id) {\n        return userService.findById(id).map(mapper::toDto);\n    }\n\n    @PostMapping\n    @RolesAllowed(\"ADMIN\")\n    public UserDto create(@RequestBody CreateUserDto dto) {\n        UserEntity user = new UserEntity();\n        user.setUsername(dto.getUsername());\n        user.setName(dto.getName());\n        user.setEnabled(dto.isEnabled());\n        user.setAccountNonExpired(true);\n        user.setAccountNonLocked(true);\n        user.setCredentialsNonExpired(true);\n        user.setPassword(dto.getPassword());\n        return mapper.toDto(userService.create(user));\n    }\n\n    @PutMapping(\"/{id}\")\n    @RolesAllowed(\"ADMIN\")\n    public UserDto update(@PathVariable Long id, @RequestBody UserDto dto) {\n        UserEntity user = userService.getUserEntity(id);\n        user.setUsername(dto.getUsername());\n        user.setName(dto.getName());\n        user.setEnabled(dto.isEnabled());\n        return mapper.toDto(userService.update(user));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @RolesAllowed(\"ADMIN\")\n    public void delete(@PathVariable Long id) {\n        userService.delete(id);\n    }\n\n    @PostMapping(\"/{id}/password\")\n    @RolesAllowed(\"ADMIN\")\n    public void changePassword(@PathVariable Long id, @RequestBody PasswordChangeDto dto) {\n        userService.changePassword(id, dto.password());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/BreadcrumbBar.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class BreadcrumbBar extends HorizontalLayout {\n\n    private final NavigationHistoryService historyService;\n\n    public BreadcrumbBar(NavigationHistoryService historyService) {\n        this.historyService = historyService;\n\n        setSpacing(true);\n        refresh();\n    }\n\n    public void refresh() {\n        removeAll();\n\n        // 1. Получаем текущую точку входа\n        Optional<HistoryEntry<?>> current = historyService.getLast();\n        if (current.isEmpty()) return;\n\n        // 3. Добавляем кнопки\n        for (HistoryEntry<?> entry : historyService.context) {\n            Button crumb = new Button(entry.getLabel(), click -> UI.getCurrent().navigate(entry.getPath()));\n            add(crumb);\n        }\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationMenuBuilder.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.components.product.views.ProductPage;\nimport com.ua.crow.views.components.product.views.ProductsListView;\nimport com.ua.crow.views.pages.NotFoundView;\nimport com.ua.crow.views.components.settings.MasterDataView;\nimport com.vaadin.flow.component.sidenav.SideNav;\nimport com.vaadin.flow.component.sidenav.SideNavItem;\n\n/**\n * Utility class for building and updating the application side navigation\n * menu based on the current navigation context.\n */\npublic final class NavigationMenuBuilder {\n\n    private NavigationMenuBuilder() {\n        // Utility class\n    }\n\n    /**\n     * Creates a new {@link SideNav} configured according to the given\n     * {@link NavigationHistoryService}.\n     */\n    public static SideNav createSideNav(NavigationHistoryService historyService) {\n        SideNav nav = new SideNav();\n        updateSideNav(nav, historyService);\n        return nav;\n    }\n\n    /**\n     * Updates the given navigation menu to reflect the latest state of the\n     * navigation history.\n     */\n    public static void updateSideNav(SideNav nav, NavigationHistoryService historyService) {\n        java.util.Map<String, Boolean> expanded = captureExpanded(nav.getItems());\n\n        nav.removeAll();\n        nav.addItem(new SideNavItem(\"All products\", ProductsListView.class));\n\n        historyService.getContext(ProductPage.class)\n                .map(entry -> (ProductDto) entry.getContextObject())\n                .ifPresent(product -> addProductNavigation(nav, product));\n\n        SideNavItem settings = new SideNavItem(\"Settings\");\n        settings.addItem(new SideNavItem(\"Mastering data\",\n                com.ua.crow.views.components.settings.MasterDataView.class));\n        settings.addItem(new SideNavItem(\"Users\",\n                com.ua.crow.views.components.settings.UsersView.class));\n        nav.addItem(settings);\n\n        nav.addItem(new SideNavItem(\"CNC\", com.ua.crow.views.pages.CncRndInterfaceView.class));\n        applyExpanded(nav.getItems(), expanded);\n    }\n\n    private static java.util.Map<String, Boolean> captureExpanded(java.util.List<SideNavItem> items) {\n        java.util.Map<String, Boolean> map = new java.util.HashMap<>();\n        for (SideNavItem item : items) {\n            map.put(item.getLabel(), item.isExpanded());\n            map.putAll(captureExpanded(item.getItems()));\n        }\n        return map;\n    }\n\n    private static void applyExpanded(java.util.List<SideNavItem> items, java.util.Map<String, Boolean> state) {\n        for (SideNavItem item : items) {\n            Boolean expanded = state.get(item.getLabel());\n            if (expanded != null) {\n                item.setExpanded(expanded);\n            }\n            applyExpanded(item.getItems(), state);\n        }\n    }\n\n    private static void addProductNavigation(SideNav nav, ProductDto product) {\n        String id = String.valueOf(product.getId());\n\n        SideNavItem productGroup = new SideNavItem(\"Product: \" + product.getName());\n        productGroup.setExpanded(true);\n        productGroup.addItem(new SideNavItem(\"Overview\", \"/product/\" + id));\n        productGroup.addItem(new SideNavItem(\"CAD BOMs\", \"/product/\" + id + \"/newcadboms\"));\n        productGroup.addItem(new SideNavItem(\"Fusion components\", NotFoundView.class));\n        productGroup.addItem(new SideNavItem(\"Engineering Boms\", \"/product/\" + id + \"/engineeringboms\"));\n        productGroup.addItem(new SideNavItem(\"Components\", NotFoundView.class));\n        nav.addItem(productGroup);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationContextAware.java =====\npackage com.ua.crow.views.navigation;\n\n\nimport com.ua.crow.views.service.HistoryEntry;\n\nimport java.util.LinkedList;\nimport java.util.Optional;\n\npublic interface NavigationContextAware {\n\n    NavigationHistoryService getHistoryService();\n\n    HistoryEntry<?> getCurrentContext();\n\n    default HistoryEntry<?> addToHistory() {\n\n        NavigationHistoryService historyService = getHistoryService();\n        HistoryEntry<?> currentContext = getCurrentContext();\n\n        LinkedList<HistoryEntry<?>> history = historyService.context;\n\n        Optional<HistoryEntry<?>> existingEntryOpt = history.stream()\n                .filter(entry -> entry.getPath().equals(currentContext.getPath()))\n                .findFirst();\n\n        if (existingEntryOpt.isPresent()) {\n            // If the entry already exists, remove everything after it\n            int index = history.indexOf(existingEntryOpt.get());\n            history.subList(index + 1, history.size()).clear();\n            history.getLast().setChildContext(null);\n        } else {\n            // If the entry is new, append it\n            Optional<HistoryEntry<?>> parentContextOp = historyService.getLast();\n            currentContext.setParentContext(parentContextOp.orElse(null));\n            history.add(currentContext);\n            if (parentContextOp.isPresent()) {\n                parentContextOp.get().setChildContext(currentContext);\n            }\n        }\n\n        return currentContext;\n    }\n    default void clearHistory() {\n        getHistoryService().clear();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationHistoryService.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.components.product.views.ProductPage;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.spring.annotation.UIScope;\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n@Component\n@UIScope\npublic class NavigationHistoryService {\n    LinkedList<HistoryEntry<?>> context = new LinkedList<>();\n    public Optional<HistoryEntry<?>> getRoot() {\n        if (context.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.of(context.getFirst());\n    }\n    public void clear() {\n        context.clear();\n    }\n    public Optional<HistoryEntry<?>> getLast() {\n        if(context.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.of(context.getLast());\n    }\n\n    public  Optional<HistoryEntry<?>> getContext(Class contextClass) {\n        return context.stream()\n                .filter(entry -> contextClass.equals(entry.getContext()))\n                .findFirst();\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/navigation/NavigationPathUtil.java =====\npackage com.ua.crow.views.navigation;\n\nimport com.ua.crow.views.components.engineeringbom.list.BomActiveReleaseListView;\nimport com.ua.crow.views.components.engineeringbom.tree.BomActiveReleaseTreeView;\nimport com.ua.crow.views.components.fusionbom.edit.CADBomView;\nimport com.ua.crow.views.components.fusionbom.list.CADBomListView;\nimport com.ua.crow.views.components.product.views.ProductPage;\nimport com.ua.crow.views.pages.NotFoundView;\nimport com.vaadin.flow.router.RouteParameters;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * Helper methods for resolving view classes and route parameters\n * from navigation paths.\n */\npublic final class NavigationPathUtil {\n\n    private NavigationPathUtil() {\n        // Utility class\n    }\n\n    /** Normalizes the given path to always start with a forward slash. */\n    public static String normalizePath(String path) {\n        if (path == null || path.isBlank()) {\n            return \"/\";\n        }\n        return path.startsWith(\"/\") ? path : \"/\" + path;\n    }\n\n    /**\n     * Determines the Vaadin view class that corresponds to the given navigation path.\n     */\n    public static Class<?> resolveViewClass(String path) {\n        if (path.startsWith(\"product/\") && (path.contains(\"/newboms\") || path.contains(\"/fusionboms\"))) {\n            return CADBomListView.class;\n        } else if (path.startsWith(\"product/\") && path.contains(\"/eboms\")) {\n            return BomActiveReleaseListView.class;\n        } else if (path.startsWith(\"product/\") && path.contains(\"/ebom/\")) {\n            return BomActiveReleaseTreeView.class;\n        } else if (path.startsWith(\"product/\")) {\n            return ProductPage.class;\n        } else if (path.startsWith(\"fusionbom/\")) {\n            return CADBomView.class;\n        }\n        return NotFoundView.class;\n    }\n\n    /**\n     * Extracts {@link RouteParameters} from the given navigation path.\n     */\n    public static RouteParameters buildRouteParameters(String path) {\n        Map<String, String> map = new LinkedHashMap<>();\n\n        if (path.matches(\"product/\\\\d+\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n        } else if (path.matches(\"product/\\\\d+/(fusionboms|newboms)\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n        } else if (path.matches(\"product/\\\\d+/eboms\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n        } else if (path.matches(\"product/\\\\d+/ebom/\\\\d+\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n            map.put(\"bomId\", parts[3]);\n        } else if (path.matches(\"product/\\\\d+/fusionbom/[^?]+.*\")) {\n            String[] parts = path.split(\"/\");\n            map.put(\"productId\", parts[1]);\n            map.put(\"fusionId\", parts[3]);\n\n            if (path.contains(\"?revisionId=\")) {\n                String revId = path.substring(path.indexOf(\"?revisionId=\") + 12);\n                map.put(\"revisionId\", revId);\n            }\n        }\n\n        return new RouteParameters(map);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/assembly/AssemblyInstructionsView.java =====\npackage com.ua.crow.views.workspaces.assembly;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"assembly/instructions\", layout = MainLayout.class)\n@PageTitle(\"Assembly Instructions\")\n@PermitAll\npublic class AssemblyInstructionsView extends WorkspaceRestrictedView {\n\n    public AssemblyInstructionsView() {\n        add(new Span(\"Assembly Instructions\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.ASSEMBLY;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/assembly/AssemblyChecklistView.java =====\npackage com.ua.crow.views.workspaces.assembly;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"assembly/checklist\", layout = MainLayout.class)\n@PageTitle(\"Checklist\")\n@PermitAll\npublic class AssemblyChecklistView extends WorkspaceRestrictedView {\n\n    public AssemblyChecklistView() {\n        add(new Span(\"Assembly Checklist\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.ASSEMBLY;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/WorkspaceRestrictedView.java =====\npackage com.ua.crow.views.workspaces;\n\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.Set;\n\npublic abstract class WorkspaceRestrictedView extends VerticalLayout implements BeforeEnterObserver {\n\n    @Autowired\n    private CrowUserService userService;\n\n    protected abstract WorkspaceType requiredWorkspace();\n\n    /**\n     * Workspaces allowed to access this view. By default only the\n     * {@link #requiredWorkspace()} is permitted.\n     */\n    protected Set<WorkspaceType> allowedWorkspaces() {\n        WorkspaceType required = requiredWorkspace();\n        return required == null ? Collections.emptySet() : EnumSet.of(required);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        WorkspaceType current = userService.getCurrentUser().getCurrentWorkspace();\n        if (!allowedWorkspaces().contains(current)) {\n            event.rerouteTo(com.ua.crow.views.pages.NotFoundView.class);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/rnd/RndBomView.java =====\npackage com.ua.crow.views.workspaces.rnd;\n\nimport com.ua.crow.views.MainLayout;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"rnd/bom\", layout = MainLayout.class)\n@PageTitle(\"BOM Viewer\")\n@PermitAll\npublic class RndBomView extends RndWorkspaceRestrictedView {\n\n    public RndBomView() {\n        add(new Span(\"BOM Viewer\"));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/rnd/RndWorkspaceRestrictedView.java =====\npackage com.ua.crow.views.workspaces.rnd;\n\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.Set;\n\n/**\n * Base view restricting access to R&D workspace.\n */\npublic abstract class RndWorkspaceRestrictedView extends WorkspaceRestrictedView {\n\n    private final Set<WorkspaceType> allowed;\n\n    protected RndWorkspaceRestrictedView() {\n        this(EnumSet.of(WorkspaceType.RND));\n    }\n\n    protected RndWorkspaceRestrictedView(Set<WorkspaceType> allowed) {\n        this.allowed = allowed == null ? Collections.emptySet() : EnumSet.copyOf(allowed);\n    }\n\n    @Override\n    protected WorkspaceType requiredWorkspace() {\n        return WorkspaceType.RND;\n    }\n\n    @Override\n    protected Set<WorkspaceType> allowedWorkspaces() {\n        return allowed.isEmpty() ? EnumSet.of(WorkspaceType.RND) : allowed;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/rnd/RndCadView.java =====\npackage com.ua.crow.views.workspaces.rnd;\n\nimport com.ua.crow.views.MainLayout;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"rnd/cad\", layout = MainLayout.class)\n@PageTitle(\"CAD Editor\")\n@PermitAll\npublic class RndCadView extends RndWorkspaceRestrictedView {\n\n    public RndCadView() {\n        add(new Span(\"CAD Editor\"));\n    }\n\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/logistics/LogisticsOutgoingView.java =====\npackage com.ua.crow.views.workspaces.logistics;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"logistics/outgoing\", layout = MainLayout.class)\n@PageTitle(\"Outgoing\")\n@PermitAll\npublic class LogisticsOutgoingView extends WorkspaceRestrictedView {\n\n    public LogisticsOutgoingView() {\n        add(new Span(\"Outgoing\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.LOGISTICS;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/workspaces/logistics/LogisticsIncomingView.java =====\npackage com.ua.crow.views.workspaces.logistics;\n\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.workspaces.WorkspaceRestrictedView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"logistics/incoming\", layout = MainLayout.class)\n@PageTitle(\"Incoming\")\n@PermitAll\npublic class LogisticsIncomingView extends WorkspaceRestrictedView {\n\n    public LogisticsIncomingView() {\n        add(new Span(\"Incoming\"));\n    }\n\n    @Override\n    public WorkspaceType requiredWorkspace() {\n        return WorkspaceType.LOGISTICS;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/dashboard/TestService.java =====\npackage com.ua.crow.views.dashboard;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TestService {\n    public String getHello() {\n        return \"Hello from injected service!\";\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/UsersView.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.ua.crow.controllers.UserController;\nimport com.ua.crow.mes.dto.CreateUserDto;\nimport com.ua.crow.mes.dto.PasswordChangeDto;\nimport com.ua.crow.mes.dto.UserDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\n\n@Route(value = UsersView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Users\")\n@PermitAll\npublic class UsersView extends VerticalLayout {\n    public static final String ROUTE = \"settings/users\";\n\n    private final UserController controller;\n    private final Grid<UserDto> grid;\n    private final GridToolbar toolbar;\n\n    public UsersView(UserController controller) {\n        this.controller = controller;\n        this.grid = new Grid<>(UserDto.class, false);\n        grid.addColumn(UserDto::getId).setHeader(\"ID\");\n        grid.addColumn(UserDto::getUsername).setHeader(\"Username\");\n        grid.addColumn(UserDto::getName).setHeader(\"Name\");\n        grid.addColumn(UserDto::isEnabled).setHeader(\"Enabled\");\n        grid.setItems(controller.getAll());\n        this.toolbar = createToolbar();\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        add(toolbar, grid);\n        setSizeFull();\n        setFlexGrow(1, grid);\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar tb = new GridToolbar(true, true, true, false);\n        tb.setAddHandler(b -> openDialog(null));\n        tb.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(this::openDialog));\n        tb.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); refresh();}));\n        tb.addButtonStateHandler(EDIT, b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        tb.addButtonStateHandler(DELETE, b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        return tb;\n    }\n\n    private void openDialog(UserDto dto) {\n        UserForm form = new UserForm();\n        Dialog dialog = createDialog(form, () -> {\n            if (dto == null) {\n                CreateUserDto toCreate = new CreateUserDto();\n                toCreate.setUsername(form.username.getValue());\n                toCreate.setName(form.name.getValue());\n                toCreate.setEnabled(form.enabled.getValue());\n                toCreate.setPassword(form.password.getValue());\n                controller.create(toCreate);\n            } else {\n                UserDto upd = new UserDto();\n                upd.setId(dto.getId());\n                upd.setUsername(form.username.getValue());\n                upd.setName(form.name.getValue());\n                upd.setEnabled(form.enabled.getValue());\n                controller.update(dto.getId(), upd);\n                if (!form.password.getValue().isBlank()) {\n                    controller.changePassword(dto.getId(), new PasswordChangeDto(form.password.getValue()));\n                }\n            }\n            refresh();\n        });\n        if (dto != null) {\n            form.username.setValue(dto.getUsername());\n            form.name.setValue(dto.getName() != null ? dto.getName() : \"\");\n            form.enabled.setValue(dto.isEnabled());\n        }\n        dialog.open();\n    }\n\n    private Dialog createDialog(UserForm form, Runnable saveHandler) {\n        Dialog dialog = new Dialog();\n        Button save = new Button(\"Save\", e -> {saveHandler.run(); dialog.close();});\n        Button cancel = new Button(\"Cancel\", e -> dialog.close());\n        dialog.add(form, new com.vaadin.flow.component.orderedlayout.HorizontalLayout(save, cancel));\n        return dialog;\n    }\n\n    private void refresh() {\n        grid.setItems(controller.getAll());\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/MasterDataView.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.ua.crow.plm.controller.settings.BomItemPropertyTypeController;\nimport com.ua.crow.plm.controller.settings.BomItemPropertyTypeGroupController;\nimport com.ua.crow.plm.controller.settings.ComponentGroupController;\nimport com.ua.crow.plm.controller.settings.ItemTypeNameMappingController;\nimport com.ua.crow.plm.dto.base.*;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.vaadin.flow.component.Component;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.tabs.TabSheet;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = MasterDataView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Mastering data\")\n@PermitAll\npublic class MasterDataView extends VerticalLayout {\n    public static final String ROUTE = \"settings/masterdata\";\n\n    public MasterDataView(BomItemPropertyTypeController typeController,\n                          BomItemPropertyTypeGroupController groupController,\n                          ComponentGroupController componentGroupController,\n                          ItemTypeNameMappingController mappingController) {\n        TabSheet tabs = new TabSheet();\n        tabs.add(\"Property Types\", createPropertyTypeTab(typeController));\n        tabs.add(\"Property Type Groups\", createPropertyTypeGroupTab(groupController));\n        tabs.add(\"Component Groups\", createComponentGroupTab(componentGroupController));\n        tabs.add(\"Item Type Mapping\", createItemTypeMappingTab(mappingController));\n        add(tabs);\n        tabs.setSizeFull();\n        setSizeFull();\n    }\n\n    private Component createPropertyTypeTab(BomItemPropertyTypeController controller) {\n        Grid<BomItemPropertyTypeDto> grid = new Grid<>(BomItemPropertyTypeDto.class, false);\n        grid.addColumn(BomItemPropertyTypeDto::getId).setHeader(\"ID\");\n        grid.addColumn(BomItemPropertyTypeDto::getName).setHeader(\"Name\");\n        grid.addColumn(BomItemPropertyTypeDto::getUkrName).setHeader(\"Ukr Name\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openPropertyTypeDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openPropertyTypeDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n        return layout;\n    }\n\n    private void openPropertyTypeDialog(BomItemPropertyTypeController controller, Grid<BomItemPropertyTypeDto> grid, BomItemPropertyTypeDto dto) {\n        BomItemPropertyTypeForm form = new BomItemPropertyTypeForm();\n        Dialog dialog = createDialog(form, () -> {\n            BomItemPropertyTypeDto toSave = new BomItemPropertyTypeDto();\n            toSave.setName(form.name.getValue());\n            toSave.setUkrName(form.ukrName.getValue());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.ukrName.setValue(dto.getUkrName());\n        }\n        dialog.open();\n    }\n\n    private Component createPropertyTypeGroupTab(BomItemPropertyTypeGroupController controller) {\n        Grid<BomItemPropertyTypeGroupDto> grid = new Grid<>(BomItemPropertyTypeGroupDto.class, false);\n        grid.addColumn(BomItemPropertyTypeGroupDto::getId).setHeader(\"ID\");\n        grid.addColumn(BomItemPropertyTypeGroupDto::getName).setHeader(\"Name\");\n        grid.addColumn(BomItemPropertyTypeGroupDto::getUkrName).setHeader(\"Ukr Name\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openPropertyTypeGroupDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openPropertyTypeGroupDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n        return layout;\n    }\n\n    private void openPropertyTypeGroupDialog(BomItemPropertyTypeGroupController controller, Grid<BomItemPropertyTypeGroupDto> grid, BomItemPropertyTypeGroupDto dto) {\n        BomItemPropertyTypeGroupForm form = new BomItemPropertyTypeGroupForm();\n        Dialog dialog = createDialog(form, () -> {\n            BomItemPropertyTypeGroupDto toSave = new BomItemPropertyTypeGroupDto();\n            toSave.setName(form.name.getValue());\n            toSave.setUkrName(form.ukrName.getValue());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.ukrName.setValue(dto.getUkrName());\n        }\n        dialog.open();\n    }\n\n    private Component createComponentGroupTab(ComponentGroupController controller) {\n        Grid<ComponentGroupDto> grid = new Grid<>(ComponentGroupDto.class, false);\n        grid.addColumn(ComponentGroupDto::getId).setHeader(\"ID\");\n        grid.addColumn(ComponentGroupDto::getName).setHeader(\"Name\");\n        grid.addColumn(ComponentGroupDto::getUkrName).setHeader(\"Ukr Name\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openComponentGroupDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openComponentGroupDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n        return layout;\n    }\n\n    private void openComponentGroupDialog(ComponentGroupController controller, Grid<ComponentGroupDto> grid, ComponentGroupDto dto) {\n        ComponentGroupForm form = new ComponentGroupForm();\n        Dialog dialog = createDialog(form, () -> {\n            ComponentGroupDto toSave = new ComponentGroupDto();\n            toSave.setName(form.name.getValue());\n            toSave.setUkrName(form.ukrName.getValue());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.ukrName.setValue(dto.getUkrName());\n        }\n        dialog.open();\n    }\n\n    private Component createItemTypeMappingTab(ItemTypeNameMappingController controller) {\n        Grid<ItemTypeNameMappingDto> grid = new Grid<>(ItemTypeNameMappingDto.class, false);\n        grid.addColumn(ItemTypeNameMappingDto::getId).setHeader(\"ID\");\n        grid.addColumn(ItemTypeNameMappingDto::getName).setHeader(\"Name\");\n        grid.addColumn(ItemTypeNameMappingDto::getType).setHeader(\"Type\");\n        grid.setItems(controller.getAll());\n        GridToolbar toolbar = createToolbar();\n        toolbar.setAddHandler(b -> openItemTypeMappingDialog(controller, grid, null));\n        toolbar.setEditHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> openItemTypeMappingDialog(controller, grid, dto)));\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(dto -> {controller.delete(dto.getId()); grid.setItems(controller.getAll());}));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        VerticalLayout layout = new VerticalLayout(toolbar, grid);\n        layout.setFlexGrow(1, grid);\n\n        return layout;\n    }\n\n    private void openItemTypeMappingDialog(ItemTypeNameMappingController controller, Grid<ItemTypeNameMappingDto> grid, ItemTypeNameMappingDto dto) {\n        ItemTypeNameMappingForm form = new ItemTypeNameMappingForm();\n        Dialog dialog = createDialog(form, () -> {\n            ItemTypeNameMappingDto toSave = new ItemTypeNameMappingDto();\n            toSave.setName(form.name.getValue());\n            toSave.setType(form.getType());\n            if (dto != null) {\n                toSave.setId(dto.getId());\n                controller.update(dto.getId(), toSave);\n            } else {\n                controller.create(toSave);\n            }\n            grid.setItems(controller.getAll());\n        });\n        if (dto != null) {\n            form.name.setValue(dto.getName());\n            form.setType(dto.getType());\n        }\n        dialog.open();\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar toolbar = new GridToolbar(true, true, true, false);\n        toolbar.addButtonStateHandler(\"EDIT\", b -> b.setEnabled(false));\n        toolbar.addButtonStateHandler(\"DELETE\", b -> b.setEnabled(false));\n        return toolbar;\n    }\n\n    private Dialog createDialog(NamedEntityForm form, Runnable saveHandler) {\n        Dialog dialog = new Dialog();\n        Button save = new Button(\"Save\", e -> { saveHandler.run(); dialog.close(); });\n        Button cancel = new Button(\"Cancel\", e -> dialog.close());\n        dialog.add(form, new com.vaadin.flow.component.orderedlayout.HorizontalLayout(save, cancel));\n        return dialog;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/ItemTypeNameMappingForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.vaadin.flow.component.combobox.ComboBox;\n\npublic class ItemTypeNameMappingForm extends NamedEntityForm {\n    private final ComboBox<ItemTypes> type = new ComboBox<>(\"Type\");\n\n    public ItemTypeNameMappingForm() {\n        super();\n        type.setItems(ItemTypes.values());\n        add(type);\n    }\n\n    public ItemTypes getType() {\n        return type.getValue();\n    }\n\n    public void setType(ItemTypes t) {\n        type.setValue(t);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/ComponentGroupForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.NumberField;\n\npublic class ComponentGroupForm extends NamedEntityForm {\n    private final NumberField parentId = new NumberField(\"Parent ID\");\n\n    public ComponentGroupForm() {\n        super();\n        add(parentId);\n        parentId.setStep(1);\n    }\n\n    public Long getParentId() {\n        return parentId.getValue() != null ? parentId.getValue().longValue() : null;\n    }\n\n    public void setParentId(Long val) {\n        if (val == null) {\n            parentId.clear();\n        } else {\n            parentId.setValue(val.doubleValue());\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/BomItemPropertyTypeForm.java =====\npackage com.ua.crow.views.components.settings;\n\npublic class BomItemPropertyTypeForm extends NamedEntityForm {\n    public BomItemPropertyTypeForm() {\n        super();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/NamedEntityForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.TextField;\n\npublic class NamedEntityForm extends FormLayout {\n    protected final TextField name = new TextField(\"Name\");\n    protected final TextField ukrName = new TextField(\"Ukrainian Name\");\n\n    public NamedEntityForm() {\n        add(name, ukrName);\n    }\n\n    public void clear() {\n        name.clear();\n        ukrName.clear();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/UserForm.java =====\npackage com.ua.crow.views.components.settings;\n\nimport com.vaadin.flow.component.checkbox.Checkbox;\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.PasswordField;\nimport com.vaadin.flow.component.textfield.TextField;\n\npublic class UserForm extends FormLayout {\n    TextField username = new TextField(\"Username\");\n    TextField name = new TextField(\"Name\");\n    PasswordField password = new PasswordField(\"Password\");\n    Checkbox enabled = new Checkbox(\"Enabled\");\n\n    public UserForm() {\n        add(username, name, password, enabled);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/settings/BomItemPropertyTypeGroupForm.java =====\npackage com.ua.crow.views.components.settings;\n\npublic class BomItemPropertyTypeGroupForm extends NamedEntityForm {\n    public BomItemPropertyTypeGroupForm() {\n        super();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/Badge.java =====\npackage com.ua.crow.views.components;\n\nimport com.vaadin.flow.component.icon.Icon;\nimport com.vaadin.flow.component.icon.VaadinIcon;\nimport com.vaadin.flow.component.html.Span;\npublic class Badge extends Span {\n\n    public enum BadgeTypeEnum {\n        PRIMARY, SUCCESS, ERROR, CONTRAST, NORMAL\n    }\n\n    public Badge(String text, BadgeTypeEnum type, VaadinIcon vaadinIcon) {\n        getElement().getThemeList().add(\"badge \" + type.name().toLowerCase());\n        getStyle().set(\"padding\", \"var(--lumo-space-xs)\");\n\n        if (vaadinIcon != null) {\n            Icon icon = createIcon(vaadinIcon, text != null ? text : \"\");\n            add(icon);\n        }\n\n        if (text != null && !text.isEmpty()) {\n            Span label = new Span(text);\n            label.getStyle().set(\"padding-left\", \"var(--lumo-space-xs)\");\n            add(label);\n        }\n    }\n\n    private Icon createIcon(VaadinIcon vaadinIcon, String label) {\n        Icon icon = vaadinIcon.create();\n        icon.getStyle().set(\"padding\", \"var(--lumo-space-xs)\");\n        icon.getElement().setAttribute(\"aria-label\", label);\n        icon.getElement().setAttribute(\"title\", label);\n        return icon;\n    }\n\n    public Badge(String text, BadgeTypeEnum type) {\n        this(text, type, null);\n    }\n\n    public static Badge confirmedBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.SUCCESS, VaadinIcon.CHECK);\n    }\n\n    public static Badge cancelledBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.ERROR, VaadinIcon.CLOSE_SMALL);\n    }\n\n    public static Badge pendingBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.PRIMARY, null);\n    }\n\n    public static Badge contrastBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.CONTRAST, null);\n    }\n\n    public static Badge normalBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.NORMAL, null);\n    }\n\n    public static Badge addedItemsBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.SUCCESS, VaadinIcon.PLUS);\n    }\n\n    public static Badge removedItemsBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.ERROR, VaadinIcon.MINUS);\n    }\n\n    public static Badge modifiedItemsBadge(String text) {\n        return new Badge(text, BadgeTypeEnum.CONTRAST, VaadinIcon.EDIT);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/toolbar/ButtonKeys.java =====\npackage com.ua.crow.views.components.toolbar;\n\n/**\n * String constants identifying common toolbar buttons.\n */\npublic final class ButtonKeys {\n    private ButtonKeys() {}\n\n    public static final String ADD = \"add\";\n    public static final String EDIT = \"edit\";\n    public static final String DELETE = \"delete\";\n    public static final String REFRESH = \"refresh\";\n\n    public static final String EXPAND_ALL = \"expandAll\";\n    public static final String COLLAPSE_ALL = \"collapseAll\";\n    public static final String COMPONENT = \"component\";\n    public static final String CONVERT = \"convert\";\n    public static final String SAVE = \"save\";\n    public static final String CANCEL = \"cancel\";\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/toolbar/GridToolbar.java =====\npackage com.ua.crow.views.components.toolbar;\n\nimport com.vaadin.flow.component.contextmenu.MenuItem;\nimport com.vaadin.flow.component.icon.Icon;\nimport com.vaadin.flow.component.menubar.MenuBar;\nimport com.vaadin.flow.theme.lumo.LumoIcon;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.function.Consumer;\n\npublic class GridToolbar extends MenuBar {\n    private MenuItem addButton;\n    private MenuItem editButton;\n    private MenuItem deleteButton;\n    private MenuItem refreshButton;\n    private final Map<String, MenuItem> customButtons = new HashMap<>();\n    private final Map<String, List<Consumer<MenuItem>>> buttonStateHandlers = new HashMap<>();\n\n\n    public GridToolbar(boolean add, boolean edit, boolean delete, boolean refresh) {\n        setWidthFull();\n        setHeight(\"50px\");\n        addClassName(\"grid-toolbar\");\n\n        if (add) {\n            addButton = createItem(\"Add\", LumoIcon.PLUS.create());\n        }\n        if (edit) {\n            editButton = createItem(\"Edit\", LumoIcon.EDIT.create());\n        }\n        if (delete) {\n            deleteButton = createItem(\"Delete\", LumoIcon.CROSS.create());\n        }\n        if (refresh) {\n            refreshButton = createItem(\"Refresh\", LumoIcon.REDO.create());\n        }\n    }\n\n    private MenuItem createItem(String label, Icon icon) {\n        MenuItem item = addItem(shortenLabel(label));\n        item.addComponentAsFirst(icon);\n        return item;\n    }\n\n    private String shortenLabel(String label) {\n        int spaceIdx = label.indexOf(' ');\n        return spaceIdx > 0 ? label.substring(0, spaceIdx) : label;\n    }\n\n    public void setAddHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(addButton, handler);\n    }\n\n    public void setEditHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(editButton, handler);\n    }\n\n    public void setDeleteHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(deleteButton, handler);\n    }\n\n    public void setRefreshHandler(Consumer<MenuItem> handler) {\n        setButtonHandler(refreshButton, handler);\n    }\n\n    private void setButtonHandler(MenuItem button, Consumer<MenuItem> handler) {\n        if (button != null) {\n            button.addClickListener(event -> handler.accept(button));\n        }\n    }\n\n    public MenuItem addCustomButton(String key, String label, Icon icon, Consumer<MenuItem> handler) {\n        MenuItem button = createItem(label, icon);\n        button.addClickListener(e -> handler.accept(button));\n        customButtons.put(key, button);\n        return button;\n    }\n\n    public void setButtonVisibility(String key, boolean visible) {\n        MenuItem button = customButtons.get(key);\n        if (button != null) {\n            button.setVisible(visible);\n        }\n    }\n\n    public void setButtonEnabled(String key, boolean enabled) {\n        MenuItem button = customButtons.get(key);\n        if (button != null) {\n            button.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Enables or disables one of the default toolbar buttons by key.\n     * Supported keys are defined in {@link ButtonKeys}.\n     */\n    public void setDefaultButtonEnabled(String key, boolean enabled) {\n        MenuItem target = getButtonByKey(key);\n        if (target != null) {\n            target.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Registers a handler that will be invoked when {@link #refreshButtonsStates()} is called.\n     * The handler receives a reference to the button identified by {@code key}.\n     *\n     * @param key      identifier of the button (use constants from {@link ButtonKeys} or custom key)\n     * @param handler  handler to invoke for the button\n     */\n    public void addButtonStateHandler(String key, Consumer<MenuItem> handler) {\n        buttonStateHandlers.computeIfAbsent(key, k -> new ArrayList<>()).add(handler);\n    }\n\n    /**\n     * Invokes all registered state handlers for their respective buttons.\n     * Missing buttons are ignored.\n     */\n    public void refreshButtonsStates() {\n        buttonStateHandlers.forEach((key, handlers) -> {\n            MenuItem btn = getButtonByKey(key);\n            if (btn != null) {\n                handlers.forEach(h -> h.accept(btn));\n            }\n        });\n    }\n\n    private MenuItem getButtonByKey(String key) {\n        return switch (key) {\n            case ADD -> addButton;\n            case EDIT -> editButton;\n            case DELETE -> deleteButton;\n            case REFRESH -> refreshButton;\n            default -> customButtons.get(key);\n        };\n    }\n\n    public void addSpacer() {\n        MenuItem spacer = addItem(\"\");\n        spacer.getElement().getStyle().set(\"flexGrow\", \"1\");\n        spacer.setEnabled(false);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/toolbar/TreeGridToolbar.java =====\npackage com.ua.crow.views.components.toolbar;\n\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.theme.lumo.LumoIcon;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\n\n/**\n * Toolbar for {@link TreeGrid} components. Provides expand and collapse buttons\n * in addition to the standard toolbar functionality.\n */\npublic class TreeGridToolbar extends GridToolbar {\n\n    public TreeGridToolbar(boolean add, boolean edit, boolean delete, boolean refresh) {\n        super(add, edit, delete, refresh);\n    }\n\n    /**\n     * Adds expand/collapse management for the provided {@link TreeGrid}. Two\n     * additional buttons \"Expand All\" and \"Collapse All\" are appended and will\n     * operate on the currently selected node. The buttons are disabled when no\n     * selection exists.\n     *\n     * @param grid the {@link TreeGrid} instance to manage\n     * @param <T>  grid item type\n     */\n    public <T> void manageTreeGrid(TreeGrid<T> grid) {\n        addCustomButton(EXPAND_ALL, \"Expand All\", LumoIcon.ANGLE_DOWN.create(),\n                btn -> adjustTreeGrid(grid, true));\n        addCustomButton(COLLAPSE_ALL, \"Collapse All\", LumoIcon.ANGLE_RIGHT.create(),\n                btn -> adjustTreeGrid(grid, false));\n\n        addButtonStateHandler(EXPAND_ALL,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        addButtonStateHandler(COLLAPSE_ALL,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        grid.addSelectionListener(e -> refreshButtonsStates());\n        refreshButtonsStates();\n    }\n\n    private static <T> void adjustTreeGrid(TreeGrid<T> grid, boolean expand) {\n        T selected = grid.asSingleSelect().getValue();\n        Collection<T> targets = selected != null\n                ? List.of(selected)\n                : grid.getTreeData().getRootItems();\n\n        if (expand) {\n            grid.expandRecursively(targets, Integer.MAX_VALUE);\n        } else {\n            grid.collapseRecursively(targets, Integer.MAX_VALUE);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/Online3DViewer.java =====\npackage com.ua.crow.views.components;\n\nimport com.vaadin.flow.component.AttachEvent;\nimport com.vaadin.flow.component.Tag;\nimport com.vaadin.flow.component.dependency.JsModule;\nimport com.vaadin.flow.component.dependency.NpmPackage;\nimport com.vaadin.flow.component.html.Div;\n\n@Tag(\"div\")\n@JsModule(\"./online-viewer.ts\")\n@NpmPackage(value = \"online-3d-viewer\", version = \"^0.16.0\")\npublic class Online3DViewer extends Div {\n\n    private String modelUrl;\n\n    public Online3DViewer() {\n        setId(\"online_3d_viewer\");\n        setSizeFull();\n    }\n\n    @Override\n    protected void onAttach(AttachEvent attachEvent) {\n        super.onAttach(attachEvent);\n        getElement().executeJs(\"window.initViewer($0)\", getElement());\n        if (modelUrl != null) {\n            getElement().executeJs(\"window.updateViewer($0)\", modelUrl);\n        }\n    }\n\n    public void loadModel(String url) {\n        if (url == null) {\n            return;\n        }\n        this.modelUrl = url;\n        if (isAttached()) {\n            getElement().executeJs(\"window.updateViewer($0)\", url);\n        }\n    }\n\n    public void highlightComponent(String path) {\n        if (isAttached()) {\n            getElement().executeJs(\"window.highlightComponent($0)\", path);\n        }\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/itemtype/ItemTypeComponent.java =====\npackage com.ua.crow.views.components.itemtype;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.html.Image;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\n\nimport java.util.EnumMap;\nimport java.util.Map;\n\npublic class ItemTypeComponent extends HorizontalLayout {\n\n    private static final Map<ItemTypes, String> ICONS = new EnumMap<>(ItemTypes.class);\n    static {\n        ICONS.put(ItemTypes.COMPONENT, \"Component icon.jpg\");\n        ICONS.put(ItemTypes.PART, \"Part icon.jpg\");\n        ICONS.put(ItemTypes.BOM, \"BomIcon copy.jpg\");\n        ICONS.put(ItemTypes.FASTENER, \"Nut icon copy.jpg\");\n        ICONS.put(ItemTypes.THRDPARTY, \"3rd-partyicon.jpg\");\n        ICONS.put(ItemTypes.NONE, \"nonetype icon.jpg\");\n    }\n\n    public ItemTypeComponent(ItemTypes type) {\n        setSpacing(true);\n        setPadding(false);\n        if (type == null) {\n            return;\n        }\n        String path = \"images/componenttypes/\" + ICONS.getOrDefault(type, \"nonetype icon.jpg\");\n        Image icon = new Image(path, type.name());\n        icon.setWidth(\"20px\");\n        icon.setHeight(\"20px\");\n        Span label = new Span(UI.getCurrent().getTranslation(\"itemType.\" + type.name().toLowerCase()));\n        add(icon, label);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/itemtype/ItemTypeSelect.java =====\npackage com.ua.crow.views.components.itemtype;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.combobox.ComboBox;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\n\npublic class ItemTypeSelect extends ComboBox<ItemTypes> {\n\n    public ItemTypeSelect() {\n        setItems(ItemTypes.values());\n        setItemLabelGenerator(type -> UI.getCurrent().getTranslation(\"itemType.\" + type.name().toLowerCase()));\n        setRenderer(new ComponentRenderer<>(ItemTypeComponent::new));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/grids/ProjectListGrid.java =====\npackage com.ua.crow.views.components.product.grids;\n\nimport com.flowingcode.vaadin.addons.gridhelpers.GridHelper;\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.data.provider.CallbackDataProvider;\n\npublic class ProjectListGrid extends Grid<ProductActiveReleaseDto> {\n    private final ProductController controller;\n    public ProjectListGrid(ProductController controller) {\n        super(ProductActiveReleaseDto.class);\n        this.controller = controller;\n        removeAllColumns();\n        addColumn(ProductActiveReleaseDto::getId).setHeader(\"ID\");\n        addColumn(ProductActiveReleaseDto::getName).setHeader(\"Name\");\n        addColumn(ProductActiveReleaseDto::getUkrName).setHeader(\"Ukrainian Name\");\n        addColumn(ProductActiveReleaseDto::getCreator).setHeader(\"Creator\");\n        addColumn(ProductActiveReleaseDto::getModifier).setHeader(\"Modifier\");\n        addColumn(ProductActiveReleaseDto::getCreatedAt).setHeader(\"Created At\");\n        addColumn(ProductActiveReleaseDto::getModifiedAt).setHeader(\"Modified At\");\n        GridHelper.setSelectOnClick(this, true);\n        setSelectionMode(SelectionMode.SINGLE);\n        GridHelper.setSelectionColumnHidden(this, true);\n        setDataProvider(new CallbackDataProvider<>(\n                query -> controller.getAllProducts().stream()\n                        .skip(query.getOffset())\n                        .limit(query.getLimit()),\n                query -> controller.getAllProducts().size()\n        ));\n    }\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/items/ProductForm.java =====\npackage com.ua.crow.views.components.product.items;\n\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.textfield.TextField;\n\npublic class ProductForm extends FormLayout {\n\n    private final TextField name = new TextField(\"Name\");\n    private final TextField ukrName = new TextField(\"Ukrainian Name\");\n    private final TextField thumbnailUrl = new TextField(\"Thumbnail URL\");\n\n    public ProductForm() {\n        add(name, ukrName, thumbnailUrl);\n    }\n\n    public void setProduct(ProductActiveReleaseDto productDto) {\n        name.setValue(productDto.getName() != null ? productDto.getName() : \"\");\n        ukrName.setValue(productDto.getUkrName() != null ? productDto.getUkrName() : \"\");\n        thumbnailUrl.setValue(productDto.getThumbnailUrl() != null ? productDto.getThumbnailUrl() : \"\");\n    }\n\n    public ProductActiveReleaseDto getProductDto() {\n        ProductActiveReleaseDto p = new ProductActiveReleaseDto();\n        p.setName(name.getValue().trim());\n        p.setUkrName(ukrName.getValue().trim());\n        p.setThumbnailUrl(\"\".equals(thumbnailUrl.getValue().trim())?null:thumbnailUrl.getValue().trim());\n        return p;\n\n    }\n\n    public void clear() {\n        name.clear();\n        ukrName.clear();\n        thumbnailUrl.clear();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/items/ProductCreatePopup.java =====\npackage com.ua.crow.views.components.product.items;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.active.ProductActiveReleaseDto;\nimport com.vaadin.componentfactory.EnhancedDialog;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.button.ButtonVariant;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.orderedlayout.FlexComponent;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.notification.Notification;\n\n\npublic class ProductCreatePopup extends Dialog {\n\n    private final ProductForm productForm;\n    private final ProductController productController;\n\n    public ProductCreatePopup(ProductController productController) {\n        super();\n        this.productController = productController;\n        this.productForm = new ProductForm();\n        initLayout();\n    }\n\n    private void initLayout() {\n        setWidth(\"400px\");\n        setHeight(\"auto\");\n        setCloseOnEsc(true);\n        setCloseOnOutsideClick(true);\n        setModal(true);\n        setDraggable(true);\n        Button saveButton = new Button(\"Save\", e -> save());\n        saveButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);\n\n        Button cancelButton = new Button(\"Cancel\", e -> close());\n\n        HorizontalLayout footer = new HorizontalLayout(saveButton, cancelButton);\n        footer.setJustifyContentMode(FlexComponent.JustifyContentMode.END);\n\n        getHeader().add(new Span(\"Create New Product\"));\n\n        add(productForm);\n        getFooter().add(footer);\n    }\n\n    @Override\n    public void open() {\n        productForm.clear();\n        super.open();\n    }\n\n    private void save() {\n        ProductActiveReleaseDto productDto = productForm.getProductDto();\n\n        if (productDto.getName().isEmpty()) {\n            Notification.show(\"Name is required!\", 3000, Notification.Position.TOP_CENTER);\n            return;\n        }\n\n        productController.createProduct(productDto);\n        Notification.show(\"Product saved successfully.\", 2000, Notification.Position.TOP_CENTER);\n        close();\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/views/ProductsListView.java =====\npackage com.ua.crow.views.components.product.views;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.product.grids.ProjectListGrid;\nimport com.ua.crow.views.components.product.items.ProductCreatePopup;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\n\n@Route(value = \"\", layout = MainLayout.class)\n@PageTitle(\"Products\")\n@PermitAll\npublic class ProductsListView extends RndWorkspaceRestrictedView implements BeforeEnterObserver , NavigationContextAware {\n    private final ProductController productController;\n    private final ProjectListGrid grid;\n    private final GridToolbar toolbar;\n    private final ProductCreatePopup productCreatePopup;\n\n    private final NavigationHistoryService historyService;\n\n    public ProductsListView(ProductController productController, NavigationHistoryService historyService) {\n        this.productController = productController;\n        productCreatePopup = new ProductCreatePopup(productController);\n        grid = new ProjectListGrid(productController);\n        this.historyService = historyService;\n        toolbar = createToolbar();\n        grid.addItemDoubleClickListener(event -> {\n            Long id = event.getItem().getId(); // Предполагаем, что ProductDto имеет getId()\n            UI.getCurrent().navigate(\"product/\" + id);\n        });\n        setSizeFull();\n        add(toolbar, grid);\n        setFlexGrow(1, grid);\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar toolbar = new GridToolbar(true,true,true,true);\n        toolbar.setRefreshHandler(b->grid.refresh());\n        toolbar.setAddHandler(b->productCreatePopup.open());\n        toolbar.setEditHandler((b) -> {/* Implement edit logic */});\n        toolbar.setDeleteHandler((b) -> {/* Implement delete logic */});\n        toolbar.addButtonStateHandler(EDIT,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n\n        return toolbar;\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        // Очищаем старую структуру и создаём новый корень контекста\n        historyService.clear();\n        addToHistory();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(ProductsListView.class,\n                \"Products\",\n                \"\",\n                null,\n                () -> null);\n\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/product/views/ProductPage.java =====\npackage com.ua.crow.views.components.product.views;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.*;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = ProductPage.ROUTE, layout = MainLayout.class)\n@PermitAll\npublic class ProductPage extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId\";\n    public static final String PRODUCT_ROUTE_PREFIX = \"product/\";\n\n    private final ProductController productController;\n    private final BreadcrumbBar breadcrumbBar;\n    private final NavigationHistoryService historyService;\n    private Long productId;\n    private ProductDto product;\n\n    public ProductPage(ProductController productController, NavigationHistoryService historyService) {\n        this.productController = productController;\n        this.historyService = historyService;\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n        add(breadcrumbBar);\n        setSizeFull();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<ProductDto> getCurrentContext() {\n        return new HistoryEntry<>(ProductPage.class,\n                product.getName(),\n                PRODUCT_ROUTE_PREFIX + product.getId(),\n                product, ()-> productController.getProductById(product.getId()).orElseThrow());\n    }\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n\n        if (productId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        try {\n            product = productController.getProductById(productId).orElseThrow();\n            addToHistory();\n        } catch (Exception e) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        breadcrumbBar.refresh();\n        add(new H2(\"Product: \" + product.getName()));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/bomitem/FusionComponentPanel.java =====\npackage com.ua.crow.views.components.fusionbom.bomitem;\n\nimport com.ua.crow.plm.dto.fusion.Body;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.grid.editor.Editor;\nimport com.vaadin.flow.component.orderedlayout.FlexLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.textfield.TextArea;\nimport com.vaadin.flow.component.textfield.TextField;\nimport com.vaadin.flow.data.binder.Binder;\nimport com.vaadin.flow.data.provider.ListDataProvider;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic class FusionComponentPanel extends VerticalLayout {\n\n    private final boolean enableCrud;\n    private GridToolbar toolbar;\n    private final Binder<Body> binder = new Binder<>(Body.class);\n    private final Editor<Body> editor;\n    private ListDataProvider<Body> dataProvider;\n\n    private final TextField partName = new TextField(\"Part Name\");\n    private final TextField partNumber = new TextField(\"Part Number\");\n    private final TextArea description = new TextArea(\"Description\");\n    private final TextField sourceFile = new TextField(\"Source File\");\n    private final TextField path = new TextField(\"Path\");\n\n    private final Grid<Body> bodyGrid = new Grid<>();\n\n    public FusionComponentPanel() {\n        this(false);\n    }\n\n    public FusionComponentPanel(boolean enableCrud) {\n        this.enableCrud = enableCrud;\n        this.editor = bodyGrid.getEditor();\n\n        setWidthFull();\n        partNumber.setReadOnly(true);\n        sourceFile.setReadOnly(true);\n        path.setReadOnly(true);\n\n        FlexLayout fieldsLayout = new FlexLayout();\n        fieldsLayout.setFlexWrap(FlexLayout.FlexWrap.WRAP);\n        fieldsLayout.setWidthFull();\n        fieldsLayout.setAlignItems(Alignment.END);\n        fieldsLayout.setJustifyContentMode(JustifyContentMode.START);\n        fieldsLayout.getStyle().set(\"gap\", \"10px\");\n        fieldsLayout.add(partName, partNumber, description, sourceFile, path);\n\n        add(fieldsLayout);\n\n        if (enableCrud) {\n            toolbar = new GridToolbar(true, true, true, false);\n            add(toolbar);\n            configureToolbar();\n        }\n\n        add(bodyGrid);\n        setupBodyGrid();\n    }\n\n    private void setupBodyGrid() {\n        bodyGrid.setWidthFull();\n        // Use a mutable collection as ListDataProvider modifies the backing list\n        dataProvider = new ListDataProvider<>(new java.util.ArrayList<>());\n        bodyGrid.setDataProvider(dataProvider);\n\n        var nameCol = bodyGrid.addColumn(Body::getBodyName).setHeader(\"Body Name\");\n        var descCol = bodyGrid.addColumn(Body::getDescription).setHeader(\"Description\");\n        bodyGrid.addColumn(Body::getWidthMm).setHeader(\"Width (mm)\");\n        bodyGrid.addColumn(Body::getLengthMm).setHeader(\"Length (mm)\");\n        bodyGrid.addColumn(Body::getHeightMm).setHeader(\"Height (mm)\");\n        bodyGrid.addColumn(Body::getVolumeCm3).setHeader(\"Volume (cm³)\");\n        bodyGrid.addColumn(Body::getAreaCm2).setHeader(\"Area (cm²)\");\n        bodyGrid.addColumn(Body::getMassKg).setHeader(\"Mass (kg)\");\n        bodyGrid.addColumn(b -> b.getMaterial() != null ? b.getMaterial().getName() : \"\").setHeader(\"Material\");\n\n        if (enableCrud) {\n            editor.setBinder(binder);\n            editor.setBuffered(true);\n\n            TextField nameField = new TextField();\n            binder.forField(nameField).bind(Body::getBodyName, Body::setBodyName);\n            nameCol.setEditorComponent(nameField);\n\n            TextField descField = new TextField();\n            binder.forField(descField).bind(Body::getDescription, Body::setDescription);\n            descCol.setEditorComponent(descField);\n\n            bodyGrid.addItemDoubleClickListener(e -> {\n                if (editor.isOpen()) {\n                    editor.cancel();\n                }\n                editor.editItem(e.getItem());\n            });\n        }\n    }\n\n    private void configureToolbar() {\n        toolbar.setAddHandler(b -> {\n            Body body = new Body();\n            dataProvider.getItems().add(body);\n            dataProvider.refreshAll();\n            bodyGrid.select(body);\n            editor.editItem(body);\n        });\n\n        toolbar.setEditHandler(b -> {\n            Body selected = bodyGrid.asSingleSelect().getValue();\n            if (selected != null) {\n                editor.editItem(selected);\n            }\n        });\n\n        toolbar.setDeleteHandler(b -> {\n            Body selected = bodyGrid.asSingleSelect().getValue();\n            if (selected != null) {\n                editor.cancel();\n                dataProvider.getItems().remove(selected);\n                dataProvider.refreshAll();\n            }\n        });\n\n        toolbar.addButtonStateHandler(EDIT,\n                btn -> btn.setEnabled(!bodyGrid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                btn -> btn.setEnabled(!bodyGrid.getSelectedItems().isEmpty()));\n        bodyGrid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n    }\n\n    public void setComponent(FusionComponentDto componentDto) {\n        partName.setValue(componentDto.getPartName() != null ? componentDto.getPartName() : \"\");\n        partNumber.setValue(componentDto.getPartNumber() != null ? componentDto.getPartNumber() : \"\");\n        description.setValue(componentDto.getDescription() != null ? componentDto.getDescription() : \"\");\n        sourceFile.setValue(componentDto.getSourceFile() != null ? componentDto.getSourceFile() : \"\");\n        path.setValue(componentDto.getPath() != null ? componentDto.getPath() : \"\");\n        List<Body> bodies = componentDto.getBodies() == null ? List.of() : List.copyOf(componentDto.getBodies());\n        dataProvider.getItems().clear();\n        dataProvider.getItems().addAll(bodies);\n        dataProvider.refreshAll();\n    }\n\n    public FusionComponentDto getUpdatedComponent(FusionComponentDto original) {\n        original.setPartName(partName.getValue());\n        original.setDescription(description.getValue());\n        if (enableCrud) {\n            original.setBodies(Set.copyOf(dataProvider.getItems()));\n        }\n        // partNumber, sourceFile, and path remain unchanged due to readonly.\n        return original;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/bomitem/ComponentView.java =====\npackage com.ua.crow.views.components.fusionbom.bomitem;\n\nimport com.ua.crow.plm.controller.fusion.FusionBomItemController;\nimport com.ua.crow.plm.database.fusion.FusionId;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.views.MainLayout;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"comp/:id/compver/:compver\", layout = MainLayout.class)\n@PageTitle(\"Component View\")\n@PermitAll\npublic class ComponentView extends RndWorkspaceRestrictedView implements BeforeEnterObserver {\n\n    private final FusionBomItemController itemController;\n\n    private String componentId;\n    private String componentVersion;\n\n    public ComponentView(FusionBomItemController itemController) {\n        this.itemController = itemController;\n        setSizeFull();\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        componentId = event.getRouteParameters().get(\"id\").orElse(null);\n        componentVersion = event.getRouteParameters().get(\"compver\").orElse(null);\n        if (componentId == null || componentVersion == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        FusionComponentDto component = itemController.readById(componentId, componentVersion,false);\n        if (component == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        removeAll();\n        add(new H2(\"Component: \" + component.getPartName()));\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/util/FusionComponentUtils.java =====\npackage com.ua.crow.views.components.fusionbom.util;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\n\nimport java.lang.reflect.Type;\n\n/**\n * Utility methods for processing Fusion BOM components.\n */\npublic final class FusionComponentUtils {\n\n    private FusionComponentUtils() {\n        // Utility class\n    }\n\n    /**\n     * Checks if the given component has multiple bodies and the type is either\n     * COMPONENT or BOM. Only such components are considered problematic.\n     */\n    public static boolean hasMultipleBodiesIssue(FusionComponentDto component) {\n        if (component == null) {\n            return false;\n        }\n        ItemTypes type = component.getType();\n        boolean problematicType = type == ItemTypes.COMPONENT || type == ItemTypes.BOM|| type == ItemTypes.PART;\n        return problematicType && component.getBodies() != null && component.getBodies().size() > 1;\n    }\n\n    /**\n     * Recursively checks if the given component or any of its children have the\n     * multiple bodies issue.\n     */\n    public static boolean containsMultipleBodiesIssue(FusionComponentDto component) {\n        if (component == null) {\n            return false;\n        }\n        if (hasMultipleBodiesIssue(component)) {\n            return true;\n        }\n        for (FusionComponentDto child : component.getChildren()) {\n            if (containsMultipleBodiesIssue(child)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/MergeGridItem.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Row item combining CAD and Engineering BOM data for merge grid.\n */\n@Getter\n@Setter\npublic class MergeGridItem {\n    private String cadName;\n    private String cadPartNumber;\n    private ItemTypes cadType;\n    private Double cadQty;\n\n    private String engName;\n    private String engPartNumber;\n    private ItemTypes engType;\n    private Double engQty;\n    private int engLevel;\n\n    private boolean toAdd;\n    private boolean toDelete;\n\n    private List<MergeGridItem> children = new ArrayList<>();\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/FusionBomMergeView.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.ua.crow.views.components.fusionbom.merge.UiMergeService;\nimport com.ua.crow.views.components.fusionbom.merge.MergeGridItem;\nimport com.vaadin.flow.router.*;\nimport jakarta.annotation.security.PermitAll;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n\n/**\n * View for comparing and merging Fusion and Engineering BOMs using a single TreeGrid.\n */\n@Route(value = FusionBomMergeView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Merge BOMs\")\n@PermitAll\npublic class FusionBomMergeView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/fusionbom/:fusionId/rev/:revId/merge/:engineeringBomId\";\n\n    private final FusionBomController fusionBomController;\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final UiMergeService uiMergeService;\n\n    private final MergeTreeGrid treeGrid;\n    private final TreeGridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n\n    private Long productId;\n    private String fusionId;\n    private String revisionId;\n    private Long engineeringBomId;\n\n    @Autowired\n    public FusionBomMergeView(FusionBomController fusionBomController,\n                              EngineeringBomController engineeringBomController,\n                              NavigationHistoryService historyService,\n                              UiMergeService uiMergeService) {\n        this.fusionBomController = fusionBomController;\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.uiMergeService = uiMergeService;\n        this.treeGrid = new MergeTreeGrid();\n        this.toolbar = new TreeGridToolbar(false, false, false, true);\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n\n        toolbar.manageTreeGrid(treeGrid);\n        toolbar.setRefreshHandler(b -> loadData());\n\n        setSizeFull();\n        add(breadcrumbBar, toolbar, treeGrid);\n        setFlexGrow(1, treeGrid);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters().get(\"productId\").map(Long::parseLong).orElse(null);\n        fusionId = event.getRouteParameters().get(\"fusionId\").orElse(null);\n        revisionId = event.getRouteParameters().get(\"revId\").orElse(null);\n        engineeringBomId = event.getRouteParameters().get(\"engineeringBomId\").map(Long::parseLong).orElse(null);\n        if (fusionId == null || revisionId == null || engineeringBomId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        addToHistory();\n        loadData();\n    }\n\n    private void loadData() {\n        FusionBomDto fusion = fusionBomController.getFusionBomTree(fusionId, revisionId, false).orElse(null);\n        BomActiveReleaseDto engBom = engineeringBomController.byIdTree(engineeringBomId, 0L).orElse(null);\n        if (fusion != null && fusion.getRootPart() != null) {\n            MergeGridItem root = uiMergeService.buildGridData(fusion.getRootPart(), engBom);\n            treeGrid.setData(root);\n        }\n        breadcrumbBar.refresh();\n        toolbar.refreshButtonsStates();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(\n                FusionBomMergeView.class,\n                \"Merge BOMs\",\n                \"product/\" + productId + \"/fusionbom/\" + fusionId + \"/rev/\" + revisionId + \"/merge/\" + engineeringBomId,\n                null,\n                null\n        );\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/UiMergeService.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.active.BomActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * Service preparing data for {@link MergeTreeGrid}.\n */\n@Service\npublic class UiMergeService {\n\n    private static class EngInfo {\n        ComponentActiveReleaseDto dto;\n        int level;\n    }\n\n    public MergeGridItem buildGridData(FusionComponentDto fusionRoot, BomActiveReleaseDto engBom) {\n        if (engBom == null) {\n            return buildGridData(fusionRoot, Collections.emptyList());\n        }\n        ComponentActiveReleaseDto root = convertBomToComponent(engBom);\n        return buildGridData(fusionRoot, List.of(root));\n    }\n\n    public MergeGridItem buildGridData(FusionComponentDto fusionRoot, Collection<ComponentActiveReleaseDto> engRoots) {\n        Map<String, EngInfo> engIndex = indexEngineering(engRoots);\n        FusionComponentDto rootCopy = fusionRoot.convert(FusionComponentDto.class);\n        insertDeletionItems(rootCopy, engRoots);\n        return convert(rootCopy, engIndex);\n    }\n\n    private MergeGridItem convert(FusionComponentDto cad, Map<String, EngInfo> engIndex) {\n        MergeGridItem item = new MergeGridItem();\n\n        boolean cadExists = cad.getFusionId() != null;\n        EngInfo info = cad.getPartNumber() == null ? null : engIndex.get(cad.getPartNumber());\n        boolean engExists = info != null;\n\n        if (cadExists) {\n            item.setCadName(cad.getPartName());\n            item.setCadPartNumber(cad.getPartNumber());\n            item.setCadType(cad.getType());\n            item.setCadQty(cad.getQuantity());\n        }\n\n        if (engExists) {\n            item.setEngName(info.dto.getName());\n            item.setEngPartNumber(info.dto.getPartNumber());\n            if (info.dto.getItemType() != null) {\n                item.setEngType(ItemTypes.valueOf(info.dto.getItemType()));\n            }\n            item.setEngQty(info.dto.getQuantity());\n            item.setEngLevel(info.level);\n        }\n\n        item.setToDelete(!cadExists && engExists);\n        item.setToAdd(cadExists && !engExists);\n\n        if (cad.getChildren() != null) {\n            for (FusionComponentDto child : cad.getChildren()) {\n                item.getChildren().add(convert(child, engIndex));\n            }\n        }\n        return item;\n    }\n\n    private ComponentActiveReleaseDto convertBomToComponent(BomActiveReleaseDto bom) {\n        ComponentActiveReleaseDto dto = new ComponentActiveReleaseDto();\n        dto.setId(bom.getId());\n        dto.setName(bom.getName());\n        dto.setPartNumber(bom.getPartNumber());\n        dto.setItemType(ItemTypes.BOM.name());\n        if (bom.getChildren() != null) {\n            dto.setParts(new ArrayList<>(bom.getChildren()));\n        }\n        return dto;\n    }\n\n    private Map<String, EngInfo> indexEngineering(Collection<ComponentActiveReleaseDto> roots) {\n        Map<String, EngInfo> map = new HashMap<>();\n        if (roots == null) return map;\n        Deque<Map.Entry<ComponentActiveReleaseDto, Integer>> stack = new ArrayDeque<>();\n        for (ComponentActiveReleaseDto r : roots) {\n            stack.push(new AbstractMap.SimpleEntry<>(r, 0));\n        }\n        while (!stack.isEmpty()) {\n            Map.Entry<ComponentActiveReleaseDto, Integer> entry = stack.pop();\n            ComponentActiveReleaseDto item = entry.getKey();\n            int level = entry.getValue();\n            if (item.getPartNumber() != null) {\n                EngInfo info = new EngInfo();\n                info.dto = item;\n                info.level = level;\n                map.put(item.getPartNumber(), info);\n            }\n            if (item.getParts() != null) {\n                for (ComponentActiveReleaseDto child : item.getParts()) {\n                    stack.push(new AbstractMap.SimpleEntry<>(child, level + 1));\n                }\n            }\n        }\n        return map;\n    }\n\n    private void insertDeletionItems(FusionComponentDto fusionRoot, Collection<ComponentActiveReleaseDto> engRoots) {\n        for (ComponentActiveReleaseDto engRoot : engRoots) {\n            processChildren(fusionRoot, engRoot.getParts());\n        }\n    }\n\n    private void processChildren(FusionComponentDto fusionParent, Collection<ComponentActiveReleaseDto> engChildren) {\n        if (engChildren == null) return;\n        Map<String, FusionComponentDto> childMap = fusionParent.getChildren().stream()\n                .filter(f -> f.getPartNumber() != null)\n                .collect(Collectors.toMap(FusionComponentDto::getPartNumber, f -> f, (a, b) -> a));\n        for (ComponentActiveReleaseDto child : engChildren) {\n            if (child.getPartNumber() == null) continue;\n            FusionComponentDto match = childMap.get(child.getPartNumber());\n            if (match != null) {\n                processChildren(match, child.getParts());\n            } else {\n                FusionComponentDto group = ensureDeleteGroup(fusionParent);\n                group.addChild(child.convert(FusionComponentDto.class));\n            }\n        }\n    }\n\n    private FusionComponentDto ensureDeleteGroup(FusionComponentDto parent) {\n        for (FusionComponentDto c : parent.getChildren()) {\n            if (\"items to delete\".equalsIgnoreCase(c.getPartName())) {\n                return c;\n            }\n        }\n        FusionComponentDto group = new FusionComponentDto();\n        group.setPartName(\"items to delete\");\n        parent.addChild(group);\n        return group;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/merge/MergeTreeGrid.java =====\npackage com.ua.crow.views.components.fusionbom.merge;\n\nimport com.ua.crow.views.components.Badge;\nimport com.vaadin.flow.component.dependency.CssImport;\nimport com.vaadin.flow.component.dependency.StyleSheet;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.icon.Icon;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport com.ua.crow.views.components.itemtype.ItemTypeComponent;\n\nimport java.util.Collections;\n\n/**\n * TreeGrid displaying merged CAD and Engineering BOM data.\n */\n\n\n\n@StyleSheet(\"themes/crow/theme-editor.css\")\n@CssImport(\"themes/crow/theme-editor.css\")\npublic class MergeTreeGrid extends TreeGrid<MergeGridItem> {\n\n    private static final int NAME_MAX_LENGTH = 20;\n\n    public MergeTreeGrid() {\n        super(MergeGridItem.class);\n        removeAllColumns();\n        setSizeFull();\n\n        addComponentHierarchyColumn(item -> {\n            String name = item.getCadName();\n            Span span = new Span(trim(name, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        })\n                .setHeader(\"CAD Name\")\n                .setFlexGrow(1)\n                .setAutoWidth(true);\n\n        Column<MergeGridItem> column = addColumn(MergeGridItem::getCadPartNumber)\n                .setHeader(\"CAD Part Number\")\n                .setAutoWidth(true);\n        column.setRenderer(new ComponentRenderer<>(c -> {\n            if (c.isToDelete()) {\n                return Badge.removedItemsBadge(c.getEngPartNumber());\n            }\n            if (c.isToAdd()) {\n                return Badge.addedItemsBadge(c.getCadPartNumber());\n            }\n            return Badge.confirmedBadge(c.getCadPartNumber());\n        }));\n        addColumn(new ComponentRenderer<>(comp -> new ItemTypeComponent(comp.getCadType())))\n                .setHeader(\"CAD Type\")\n                .setAutoWidth(true);\n\n        addColumn(c -> formatQuantity(c.getCadQty()))\n                .setHeader(\"CAD Qty\")\n                .setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(c -> {\n            String full = indent(c.getEngName(), c.getEngLevel());\n            Span span = new Span(trim(full, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", c.getEngName() == null ? \"\" : c.getEngName());\n            return span;\n        })).setHeader(\"Eng Name\").setAutoWidth(true);\n\n        addColumn(c -> indent(c.getEngPartNumber(), c.getEngLevel()))\n                .setHeader(\"Eng Part Number\").setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(c -> new ItemTypeComponent(c.getEngType())))\n                .setHeader(\"Eng Type\").setAutoWidth(true);\n\n        addColumn(c -> formatQuantity(c.getEngQty()))\n                .setHeader(\"Eng Qty\").setAutoWidth(true);\n    }\n\n\n    public void setData(MergeGridItem root) {\n        setItems(Collections.singletonList(root), MergeGridItem::getChildren);\n        expandRecursively(Collections.singletonList(root), 2);\n    }\n\n    private String formatQuantity(Double qty) {\n        if (qty == null) return \"\";\n        return String.valueOf(qty);\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private String indent(String text, int level) {\n        if (text == null) {\n            return \"\";\n        }\n        String indent = \"\\u00A0\".repeat(Math.max(0, level) * 2);\n        return indent + text;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/edit/FusionComponentTreeGrid.java =====\npackage com.ua.crow.views.components.fusionbom.edit;\n\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.views.components.fusionbom.util.FusionComponentUtils;\nimport com.ua.crow.views.components.itemtype.ItemTypeComponent;\nimport com.ua.crow.views.components.itemtype.ItemTypeSelect;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.confirmdialog.ConfirmDialog;\nimport com.vaadin.flow.component.dependency.CssImport;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.grid.dnd.GridDropMode;\nimport com.vaadin.flow.component.grid.dnd.GridDragStartEvent;\nimport com.vaadin.flow.component.grid.editor.Editor;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.textfield.TextField;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.data.binder.Binder;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport java.util.function.BiConsumer;\n\nimport java.text.DecimalFormat;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Optional;\npublic class FusionComponentTreeGrid extends TreeGrid<FusionComponentDto> {\n\n    private final FusionBomController controller;\n    private final Binder<FusionComponentDto> binder;\n    private final Editor<FusionComponentDto> editor;\n    private FusionComponentDto draggedItem;\n    private BiConsumer<FusionComponentDto, FusionComponentDto> mergeHandler;\n\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public FusionComponentTreeGrid(FusionBomController controller) {\n        super(FusionComponentDto.class);\n        this.controller = controller;\n        this.binder = new Binder<>(FusionComponentDto.class);\n        this.editor = getEditor();\n\n        initializeGrid();\n        configureEditor();\n        configureColumns();\n        configureEditComponents();\n        configureListeners();\n        configureDragAndDrop();\n        configureRowStyles();\n    }\n\n    private void initializeGrid() {\n        removeAllColumns();\n        setSizeFull();\n    }\n\n    private void configureColumns() {\n        addComponentHierarchyColumn(item -> {\n            String name = item.getPartName();\n            Span span = new Span(trim(name, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        })\n                .setHeader(\"Part Name\")\n                .setFlexGrow(1)\n                .setAutoWidth(true);\n\n        addColumn(FusionComponentDto::getPartNumber)\n                .setHeader(\"Part Number\")\n                .setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(comp -> new ItemTypeComponent(comp.getType())))\n                .setHeader(\"Type\")\n                .setAutoWidth(true);\n\n        addColumn(c -> formatQuantity(c.getQuantity()))\n                .setHeader(\"Quantity\")\n                .setAutoWidth(true);\n\n        createBodiesColumn();\n\n        addColumn(FusionComponentDto::getDescription)\n                .setHeader(\"Description\")\n                .setFlexGrow(2)\n                .setAutoWidth(true);\n\n\n    }\n\n    private void configureEditor() {\n        editor.setBinder(binder);\n        editor.setBuffered(true);\n    }\n\n    private void configureEditComponents() {\n        var partNameColumn = getColumns().get(0);\n        var typeColumn = getColumns().get(2);\n        var quantityColumn = getColumns().get(3);\n        var descriptionColumn = getColumns().get(5);\n\n        TextField partNameField = new TextField();\n        binder.forField(partNameField).bind(FusionComponentDto::getPartName, FusionComponentDto::setPartName);\n        partNameColumn.setEditorComponent(partNameField);\n\n        ItemTypeSelect typeSelect = new ItemTypeSelect();\n        binder.forField(typeSelect).bind(FusionComponentDto::getType, FusionComponentDto::setType);\n        typeColumn.setEditorComponent(typeSelect);\n\n        TextField quantityField = new TextField();\n        binder.forField(quantityField)\n                .withConverter(Double::valueOf, String::valueOf)\n                .bind(FusionComponentDto::getQuantity, FusionComponentDto::setQuantity);\n        quantityColumn.setEditorComponent(quantityField);\n\n        TextField descriptionField = new TextField();\n        binder.forField(descriptionField).bind(FusionComponentDto::getDescription, FusionComponentDto::setDescription);\n        descriptionColumn.setEditorComponent(descriptionField);\n    }\n\n    private void configureListeners() {\n        addItemDoubleClickListener(event -> {\n            if (editor.isOpen()) {\n                editor.cancel();\n            }\n            editor.editItem(event.getItem());\n        });\n\n        editor.addOpenListener(e -> {\n            var partNameField = (TextField) getColumns().get(0).getEditorComponent();\n            partNameField.focus();\n        });\n    }\n\n    private void configureDragAndDrop() {\n        setRowsDraggable(true);\n        setDropMode(GridDropMode.ON_TOP);\n\n        addDragStartListener(this::onDragStart);\n\n        addDropListener(event -> event.getDropTargetItem().ifPresent(targetItem -> {\n            if (draggedItem != null && !draggedItem.equals(targetItem)) {\n                ConfirmDialog confirmDialog = new ConfirmDialog(\"Merge Items\",\n                        \"Do you want to merge '\" + draggedItem.getPartName() + \"' into '\" + targetItem.getPartName() + \"'?\",\n                        \"Merge\", e -> mergeItems(draggedItem, targetItem),\n                        \"Cancel\", e -> {});\n                confirmDialog.open();\n            }\n        }));\n\n        addDragEndListener(event -> draggedItem = null);\n    }\n\n    private void configureRowStyles() {\n        setClassNameGenerator(item -> {\n            if (FusionComponentUtils.hasMultipleBodiesIssue(item)) {\n                System.out.println(\"Multiple bodies: \" + item.getPartName());\n                return \"multiple-bodies\";\n            }\n            return null;\n        });\n    }\n\n    private void onDragStart(GridDragStartEvent<FusionComponentDto> event) {\n        draggedItem = event.getDraggedItems().stream().findFirst().orElse(null);\n    }\n\n    private void mergeItems(FusionComponentDto source, FusionComponentDto target) {\n        if (mergeHandler != null) {\n            mergeHandler.accept(source, target);\n        }\n    }\n    public void setMergeHandler(BiConsumer<FusionComponentDto, FusionComponentDto> handler) {\n        this.mergeHandler = handler;\n    }\n\n\n\n\n    public void setRoot(FusionComponentDto root) {\n        setItems(List.of(root), FusionComponentDto::getChildren);\n        expandRecursively(List.of(root), Integer.MAX_VALUE);\n    }\n\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n\n    private String formatQuantity(Double quantity) {\n        if (quantity == null) return \"\";\n        return new DecimalFormat(\"#.###\").format(quantity);\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private int getBodiesCount(FusionComponentDto component) {\n        Collection<?> bodies = component.getBodies();\n        return bodies == null ? 0 : bodies.size();\n    }\n\n    private void createBodiesColumn() {\n        Column<FusionComponentDto> column = addColumn(this::getBodiesCount)\n                .setHeader(\"Bodies\")\n                .setAutoWidth(true);\n        column.setClassNameGenerator(item ->\n                FusionComponentUtils.hasMultipleBodiesIssue(item) ? \"highlight-cell\" : null);\n\n        column.setRenderer(new ComponentRenderer<>(this::createBodiesCell));\n    }\n\n    private Span createBodiesCell(FusionComponentDto item) {\n        Span cell = new Span(String.valueOf(getBodiesCount(item)));\n        if (FusionComponentUtils.hasMultipleBodiesIssue(item)) {\n            cell.getStyle().setColor(\"var(--lumo-error-text-color)\");\n        }\n        return cell;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/edit/CADBomView.java =====\npackage com.ua.crow.views.components.fusionbom.edit;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.controller.fusion.FusionBomItemController;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.fusion.FusionComponentDto;\nimport com.ua.crow.service.NotFoundException;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.Online3DViewer;\nimport com.ua.crow.plm.controller.cad.CadController;\nimport com.ua.crow.views.components.fusionbom.bomitem.FusionComponentPanel;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.*;\n\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.contextmenu.MenuItem;\nimport com.vaadin.flow.component.dialog.Dialog;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.notification.Notification;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.component.splitlayout.SplitLayout;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.combobox.ComboBox;\nimport com.vaadin.flow.component.UI;\nimport com.ua.crow.plm.dto.fusion.FusionRevisionDto;\nimport org.springframework.data.domain.Pageable;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.views.components.fusionbom.merge.FusionBomMergeView;\nimport com.vaadin.flow.router.*;\nimport com.vaadin.flow.theme.lumo.LumoIcon;\nimport com.ua.crow.views.components.fusionbom.util.FusionComponentUtils;\n\nimport jakarta.annotation.security.PermitAll;\n\n@Route(value = \"product/:productId/fusionbom/:fusionId/rev/:revId\", layout = MainLayout.class)\n\n@PageTitle(\"Fusion BOM\")\n@PermitAll\npublic class CADBomView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    private final FusionBomController fusionBomController;\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final FusionBomItemController itemController;\n    private final CadController cadController;\n    private final FusionComponentTreeGrid treeGrid;\n    private final BreadcrumbBar breadcrumbBar;\n    private final Online3DViewer viewerComponent;\n    private final VerticalLayout viewerLayout;\n    private final SplitLayout splitLayout;\n\n    private Long productId;\n    private String fusionId;\n    private String revisionId;\n    private FusionBomDto bom;\n\n    private TreeGridToolbar toolbar;\n    private MenuItem convertButton;\n    private ComboBox<FusionRevisionDto> versionSwitcher;\n\n    public CADBomView(FusionBomController fusionBomController,\n                      EngineeringBomController engineeringBomController,\n                      NavigationHistoryService historyService,\n                      FusionBomItemController itemController,\n                      CadController cadController) {\n        this.fusionBomController = fusionBomController;\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.itemController = itemController;\n        this.cadController = cadController;\n        this.treeGrid = new FusionComponentTreeGrid(fusionBomController);\n        this.treeGrid.setMergeHandler(this::mergeComponents);\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n        this.viewerComponent = new Online3DViewer();\n        //<theme-editor-local-classname>\n        addClassName(\"fusion-bom-view-div-1\");\n\n        toolbar = new TreeGridToolbar(false, false, true, true);\n        versionSwitcher = new ComboBox<>();\n        versionSwitcher.setItemLabelGenerator(v -> \"Revision \" + v.getNumber());\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!treeGrid.getSelectedItems().isEmpty()));\n        toolbar.setDeleteHandler(b -> treeGrid.getSelectedItems().stream()\n                .findFirst()\n                .ifPresent(this::handleDelete));\n        treeGrid.addSelectionListener(e -> {\n            toolbar.refreshButtonsStates();\n            e.getFirstSelectedItem().ifPresentOrElse(\n                    comp -> viewerComponent.highlightComponent(createPathfromPartNumbers()),\n                    () -> viewerComponent.highlightComponent(null)\n            );\n        });\n        toolbar.addCustomButton(COMPONENT, \"View component\", LumoIcon.PLUS.create(), btn -> {\n            FusionComponentDto selected = treeGrid.asSingleSelect().getValue();\n            if (selected != null) {\n                openComponentModal(selected.getFusionId(), selected.getRevisionId());\n            } else {\n                Notification.show(\"Please select a component first.\", 2000, Notification.Position.MIDDLE);\n            }\n        });\n\n        convertButton = toolbar.addCustomButton(CONVERT, \"Convert\", LumoIcon.DOWNLOAD.create(), btn -> {\n        });\n        var convertMenu = convertButton.getSubMenu();\n        convertMenu.addItem(\"Convert to New Engineering BOM\", e -> convertBom());\n        convertMenu.addItem(\"Merge into Existing Engineering BOM\", e -> openMergeDialog());\n        toolbar.addButtonStateHandler(CONVERT, b ->\n                b.setEnabled(bom != null && !FusionComponentUtils.containsMultipleBodiesIssue(bom.getRootPart())));\n        toolbar.addSpacer();\n\n        versionSwitcher.addValueChangeListener(e -> {\n            if (e.getValue() != null && !e.getValue().getRevisionId().equals(revisionId)) {\n                UI.getCurrent().navigate(CADBomView.class,\n                        new RouteParameters(\n                                java.util.Map.of(\n                                        \"productId\", String.valueOf(productId),\n                                        \"fusionId\", fusionId,\n                                        \"revId\", e.getValue().getRevisionId()\n                                )));\n            }\n        });\n        toolbar.addItem(versionSwitcher);\n\n        toolbar.manageTreeGrid(treeGrid);\n        toolbar.setRefreshHandler(b -> refresh());\n\n        toolbar.addCustomButton(SAVE, \"Save\", LumoIcon.CHECKMARK.create(), btn -> treeGrid.getEditor().save()).setVisible(false);\n        toolbar.addCustomButton(CANCEL, \"Cancel\", LumoIcon.CROSS.create(), btn -> treeGrid.getEditor().cancel()).setVisible(false);\n\n        treeGrid.getEditor().addOpenListener(e -> {\n            toolbar.setButtonVisibility(SAVE, true);\n            toolbar.setButtonVisibility(CANCEL, true);\n        });\n\n        treeGrid.getEditor().addCloseListener(e -> {\n            toolbar.setButtonVisibility(SAVE, false);\n            toolbar.setButtonVisibility(CANCEL, false);\n        });\n\n        treeGrid.getEditor().addSaveListener(e -> {\n            itemController.update(e.getItem(), false);\n            Notification.show(\"Changes saved successfully\", 3000, Notification.Position.TOP_END);\n            treeGrid.refresh();\n            toolbar.refreshButtonsStates();\n        });\n\n        this.splitLayout = new SplitLayout();\n\n        VerticalLayout bomLayout = new VerticalLayout(toolbar, treeGrid);\n        bomLayout.setSizeFull();\n        bomLayout.setFlexGrow(1, treeGrid);\n\n\n        this.viewerLayout = new VerticalLayout(viewerComponent);\n        this.viewerLayout.setSizeFull();\n        this.viewerLayout.setPadding(false);\n\n        splitLayout.addToPrimary(bomLayout);\n        splitLayout.addToSecondary(viewerLayout);\n        splitLayout.setSizeFull();\n        splitLayout.setSplitterPosition(50);\n\n        setSizeFull();\n        add(breadcrumbBar, splitLayout);\n        setFlexGrow(1, splitLayout);\n    }\n\n    private String createPathfromPartNumbers() {\n        return null;\n    }\n\n    private void openComponentModal(String compId, String compVer) {\n        Dialog dialog = new Dialog();\n        dialog.setWidth(\"90%\");\n        dialog.setHeight(\"90%\");\n        dialog.setModal(true);\n        dialog.setDraggable(true);\n        dialog.setResizable(true);\n\n        FusionComponentDto selectedComponent = itemController.readById(compId, compVer, true);\n\n        if (selectedComponent == null) {\n            Notification.show(\"Please select a component first.\", 2000, Notification.Position.MIDDLE);\n            return;\n        }\n\n        FusionComponentPanel componentPanel = new FusionComponentPanel(true);\n        componentPanel.setComponent(selectedComponent);\n\n        Button save = new Button(\"Save\", e -> {\n            itemController.update(componentPanel.getUpdatedComponent(selectedComponent), false);\n            treeGrid.refresh();\n            dialog.close();\n        });\n        Button cancel = new Button(\"Cancel\", e -> dialog.close());\n\n        dialog.add(componentPanel,\n                new com.vaadin.flow.component.orderedlayout.HorizontalLayout(save, cancel));\n        dialog.open();\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        try {\n            productId = event.getRouteParameters()\n                    .get(\"productId\")\n                    .map(Long::parseLong)\n                    .orElse(null);\n            fusionId = event.getRouteParameters().get(\"fusionId\").orElse(null);\n            revisionId = event.getRouteParameters().get(\"revId\").orElse(null);\n\n            if (productId == null || fusionId == null) {\n                event.rerouteTo(\"not-found\");\n                return;\n            }\n\n            if (!loadBom()) {\n                event.rerouteTo(\"not-found\");\n                return;\n            }\n\n            addToHistory();\n            loadAvailableRevisions();\n            updateView();\n            loadModel(bom.getRootPart());\n\n        } catch (NotFoundException e) {\n            event.rerouteTo(\"not-found\");\n        }\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(\n                CADBomView.class,\n                bom.getName(),\n                \"product/\" + productId + \"/fusionbom/\" + fusionId + \"/rev/\" + revisionId,\n                bom, () -> fusionBomController.getFusionBom(fusionId, revisionId)\n        );\n    }\n\n    private void mergeComponents(FusionComponentDto source, FusionComponentDto target) {\n        try {\n            var request = new com.ua.crow.plm.dto.requests.MergeBomItemsRequest();\n            request.setSourceFusionId(source.getFusionId());\n            request.setSourceRevisionId(source.getRevisionId());\n            request.setTargetFusionId(target.getFusionId());\n            request.setTargetRevisionId(target.getRevisionId());\n            itemController.merge(request);\n            Notification.show(\"Items merged\", 3000, Notification.Position.TOP_END);\n            refresh();\n        } catch (Exception e) {\n            Notification.show(\"Merge failed: \" + e.getMessage(), 5000, Notification.Position.MIDDLE);\n        }\n    }\n\n\n    private void convertBom() {\n        try {\n            var response = engineeringBomController.convertToEngineeringBom(fusionId, revisionId);\n            if (response.getStatusCode().is2xxSuccessful()) {\n                Notification.show(\"BOM converted successfully\", 3000, Notification.Position.TOP_END);\n            } else {\n                Notification.show(\"Conversion failed\", 3000, Notification.Position.TOP_END);\n            }\n        } catch (Exception e) {\n            Notification.show(\"Conversion failed\", 3000, Notification.Position.TOP_END);\n        }\n    }\n\n    private void handleDelete(FusionComponentDto dto) {\n        com.vaadin.flow.component.dialog.Dialog dialog = new com.vaadin.flow.component.dialog.Dialog();\n        dialog.add(\"Delete or remove the selected component from the BOM?\");\n        com.vaadin.flow.component.button.Button removeBtn =\n                new com.vaadin.flow.component.button.Button(\"Delete from BOM\", e -> {\n                    unlinkComponent(dto);\n                    dialog.close();\n                });\n        com.vaadin.flow.component.button.Button deleteBtn =\n                new com.vaadin.flow.component.button.Button(\"Delete\", e -> {\n                    deleteComponent(dto);\n                    dialog.close();\n                });\n        com.vaadin.flow.component.button.Button cancelBtn =\n                new com.vaadin.flow.component.button.Button(\"Cancel\", e -> dialog.close());\n        com.vaadin.flow.component.orderedlayout.HorizontalLayout hl =\n                new com.vaadin.flow.component.orderedlayout.HorizontalLayout(removeBtn, deleteBtn, cancelBtn);\n        dialog.add(hl);\n        dialog.open();\n    }\n\n    private void unlinkComponent(FusionComponentDto dto) {\n        fusionBomController.unlink(new com.ua.crow.plm.database.fusion.FusionId(dto.getFusionId(), dto.getRevisionId()));\n        refresh();\n    }\n\n    private void deleteComponent(FusionComponentDto dto) {\n        fusionBomController.deleteComponent(dto.getFusionId(), dto.getRevisionId());\n        refresh();\n    }\n\n    private void openMergeDialog() {\n        Dialog dialog = new Dialog();\n        dialog.setWidth(\"400px\");\n        dialog.setHeight(\"250px\");\n\n        ComboBox<EngineeringBomWoChildren> bomSelect = new ComboBox<>(\"Engineering BOM\");\n        bomSelect.setItemLabelGenerator(EngineeringBomWoChildren::getName);\n        List<EngineeringBomWoChildren> boms = engineeringBomController\n                .listByProductId(productId, 0L, Pageable.unpaged(), true);\n        bomSelect.setItems(boms);\n        var mergeableResponse = fusionBomController.mergeableEngineeringBom(fusionId, revisionId);\n        if (mergeableResponse.getStatusCode().is2xxSuccessful() && mergeableResponse.getBody() != null) {\n            bomSelect.setValue(mergeableResponse.getBody());\n        }\n\n        Button mergeBtn = new Button(\"Open Merge\", e -> {\n            EngineeringBomWoChildren selected = bomSelect.getValue();\n            if (selected != null) {\n                dialog.close();\n                UI.getCurrent().navigate(FusionBomMergeView.class, new RouteParameters(\n                        Map.of(\n                                \"productId\", String.valueOf(productId),\n                                \"fusionId\", String.valueOf(fusionId),\n                                \"revId\", String.valueOf(revisionId),\n                                \"engineeringBomId\", String.valueOf(selected.getId())\n                        )\n                ));\n            }\n        });\n\n        dialog.add(bomSelect, mergeBtn);\n        dialog.open();\n    }\n\n    private void showModelNotFound() {\n        viewerLayout.removeAll();\n        viewerLayout.add(new H2(\"Model not found\"));\n        splitLayout.setSplitterPosition(100);\n    }\n\n    private void loadModel(FusionComponentDto component) {\n        try {\n            String url = cadController.getStepFileUrl(component.getFusionId(), component.getRevisionId())\n                    .orElse(null);\n            if (url != null) {\n                viewerLayout.removeAll();\n                viewerLayout.add(viewerComponent);\n                splitLayout.setSplitterPosition(50);\n                viewerComponent.loadModel(url);\n            } else {\n                showModelNotFound();\n            }\n        } catch (NotFoundException e) {\n            showModelNotFound();\n        }\n    }\n\n    /**\n     * Fetches BOM data from the controller.\n     *\n     * @return true if BOM was successfully loaded\n     */\n    private boolean loadBom() {\n        bom = fusionBomController.getFusionBomTree(fusionId, revisionId, true).orElse(null);\n        return bom != null && bom.getRootPart() != null;\n    }\n\n    /**\n     * Applies loaded BOM data to UI components.\n     */\n    private void updateView() {\n        breadcrumbBar.refresh();\n        treeGrid.setRoot(bom.getRootPart());\n        toolbar.refreshButtonsStates();\n        if (bom.getRootPart() != null) {\n            loadModel(bom.getRootPart());\n        }\n    }\n\n    /**\n     * Refreshes data and updates UI. Toolbar buttons are disabled while data is being loaded.\n     */\n    private void refresh() {\n        setButtonsEnabled(false);\n        if (loadBom()) {\n            updateView();\n        }\n        setButtonsEnabled(true);\n        toolbar.refreshButtonsStates();\n    }\n\n    /**\n     * Enables or disables toolbar and custom buttons.\n     */\n    private void setButtonsEnabled(boolean enabled) {\n        toolbar.setDefaultButtonEnabled(REFRESH, enabled);\n        toolbar.setButtonEnabled(EXPAND_ALL, enabled);\n        toolbar.setButtonEnabled(COLLAPSE_ALL, enabled);\n        toolbar.setButtonEnabled(COMPONENT, enabled);\n        toolbar.setButtonEnabled(SAVE, enabled);\n        toolbar.setButtonEnabled(CANCEL, enabled);\n        convertButton.setEnabled(enabled);\n        toolbar.refreshButtonsStates();\n    }\n\n    private void loadAvailableRevisions() {\n        java.util.List<FusionRevisionDto> revs = fusionBomController.revisions(\n                fusionId, productId, 0L);\n        versionSwitcher.setItems(revs);\n        revs.stream()\n                .filter(r -> r.getRevisionId().equals(revisionId))\n                .findFirst()\n                .ifPresent(versionSwitcher::setValue);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/list/CADBomGrid.java =====\npackage com.ua.crow.views.components.fusionbom.list;\n\nimport com.flowingcode.vaadin.addons.gridhelpers.GridHelper;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.dto.fusion.FusionBomDto;\nimport com.ua.crow.plm.dto.requests.FusionBomsListRequest;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class CADBomGrid extends TreeGrid<FusionBomDto>  {\n\n    private final FusionBomController controller;\n    private Long productId = null;\n    private Long release = 0L;\n    private boolean unprocessed = true;\n    private String partNumber;\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public CADBomGrid(FusionBomController controller) {\n        super(FusionBomDto.class);\n        this.controller = controller;\n\n        // ✅ Setup columns\n        removeAllColumns();\n        addColumn(FusionBomDto::getVersion).setHeader(\"Version\");\n        addColumn(FusionBomDto::getPartNumber).setHeader(\"Part Number\");\n        addComponentHierarchyColumn(item -> {\n            String name = item.getName();\n            Span span = new Span(trim(name, NAME_MAX_LENGTH));\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        }).setHeader(\"Name\");\n        addColumn(f -> f.getProduct() != null ? f.getProduct().getName() : \"\").setHeader(\"Product\");\n        addColumn(FusionBomDto::getCreatedAt).setHeader(\"Created At\");\n        addColumn(FusionBomDto::getModifiedAt).setHeader(\"Modified At\");\n\n        // Grid behavior\n        GridHelper.setSelectOnClick(this, true);\n        setSelectionMode(SelectionMode.SINGLE);\n        GridHelper.setSelectionColumnHidden(this, true);\n\n        refresh();\n\n        // ✅ Navigation on double click\n        addItemDoubleClickListener(event -> {\n            FusionBomDto item = event.getItem();\n            UI.getCurrent().navigate(\"product/\" + productId + \"/fusionbom/\" + item.getFusionId()+\"/rev/\" + item.getRevisionId());\n        });\n    }\n\n    private List<FusionBomDto> fetchItems() {\n        FusionBomsListRequest request = new FusionBomsListRequest();\n        if (productId != null) {\n            request.setProductId(Optional.of(productId));\n            request.setRelease(Optional.ofNullable(release));\n            // When filtering by \"Unprocessed\" only send the flag when the\n            // checkbox is checked. Unchecked means show both processed and\n            // unprocessed BOMs, so the flag must be absent.\n            if (unprocessed) {\n                request.setUnprocessed(Optional.of(true));\n            }\n        }\n        if (partNumber != null && !partNumber.isBlank()) {\n            request.setPartNumber(Optional.of(partNumber));\n        }\n        return controller.fusionBoms(request, Pageable.unpaged());\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public void setRelease(Long release) {\n        this.release = release == null ? 0L : release;\n    }\n\n    public void setUnprocessed(boolean unprocessed) {\n        this.unprocessed = unprocessed;\n    }\n\n    public void setPartNumber(String partNumber) {\n        this.partNumber = partNumber;\n    }\n\n    public void refresh() {\n        List<FusionBomDto> items = fetchItems();\n        if (items == null) {\n            items = java.util.Collections.emptyList();\n        }\n        items = filterLastVersions(items);\n        setItems(items, FusionBomDto::getChildren);\n        if (!items.isEmpty()) {\n            expandRecursively(items, 1);\n        }\n    }\n\n    private List<FusionBomDto> filterLastVersions(List<FusionBomDto> items) {\n        java.util.Map<String, FusionBomDto> map = new java.util.HashMap<>();\n        for (FusionBomDto dto : items) {\n            FusionBomDto existing = map.get(dto.getFusionId());\n            if (existing == null || dto.getRevisionId().compareTo(existing.getRevisionId()) > 0) {\n                map.put(dto.getFusionId(), dto);\n            }\n        }\n        return new java.util.ArrayList<>(map.values());\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/fusionbom/list/CADBomListView.java =====\npackage com.ua.crow.views.components.fusionbom.list;\n\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.controller.fusion.FusionBomController;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.*;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\n\n@Route(value = CADBomListView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Fusion BOMs\")\n@PermitAll\npublic class CADBomListView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/newcadboms\";\n\n    private final FusionBomController fusionBomController;\n    private final NavigationHistoryService historyService;\n    private final CADBomGrid grid;\n    private final TreeGridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n    private final com.ua.crow.plm.service.product.ProductService productService;\n\n    private Long productId;\n    private Long release = 0L;\n    private ProductDto product;\n\n    private final com.vaadin.flow.component.textfield.TextField partNumberField;\n    private final com.vaadin.flow.component.checkbox.Checkbox unprocessedBox;\n\n    public CADBomListView(FusionBomController fusionBomController,\n                                     NavigationHistoryService historyService,\n                                     ProductController productController,\n                                     com.ua.crow.plm.service.product.ProductService productService) {\n        this.fusionBomController = fusionBomController;\n        this.historyService = historyService;\n        this.productService = productService;\n        this.grid = new CADBomGrid(fusionBomController);\n        this.partNumberField = new com.vaadin.flow.component.textfield.TextField();\n        this.unprocessedBox = new com.vaadin.flow.component.checkbox.Checkbox(\"Unprocessed\");\n        this.toolbar = createToolbar();\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n\n        setSizeFull();\n        add(breadcrumbBar, toolbar, grid);\n        setFlexGrow(1, grid);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n        String relParam = event.getLocation().getQueryParameters().getParameters().getOrDefault(\"release\", java.util.List.of(\"0\")).get(0);\n        release = Long.parseLong(relParam);\n        if (productId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        product = new ProductDto();\n        product.setId(productId);\n        addToHistory();\n        grid.setProductId(productId);\n        grid.setRelease(release);\n        grid.setUnprocessed(unprocessedBox.getValue());\n        grid.setPartNumber(partNumberField.getValue());\n        grid.refresh();\n        breadcrumbBar.refresh();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<ProductDto> getCurrentContext() {\n        return new HistoryEntry<>(CADBomListView.class,\"Fusion BOMs\", \"product/\" + productId + \"/newcadboms\", product,()->null);\n    }\n\n    private void handleDelete(com.ua.crow.plm.dto.fusion.FusionBomDto dto) {\n        boolean isRoot = grid.getTreeData().getParent(dto) == null;\n        if (isRoot) {\n            com.vaadin.flow.component.confirmdialog.ConfirmDialog dialog = new com.vaadin.flow.component.confirmdialog.ConfirmDialog(\n                    \"Delete CAD BOM\",\n                    \"Delete selected BOM?\",\n                    \"Delete\",\n                    e -> { deleteBom(dto); },\n                    \"Cancel\",\n                    e -> {});\n            dialog.open();\n        } else {\n            com.vaadin.flow.component.dialog.Dialog d = new com.vaadin.flow.component.dialog.Dialog();\n            d.add(\"Detach or delete the selected BOM?\");\n            com.vaadin.flow.component.button.Button detach = new com.vaadin.flow.component.button.Button(\"Detach\", ev -> { unlinkBom(dto); d.close(); });\n            com.vaadin.flow.component.button.Button del = new com.vaadin.flow.component.button.Button(\"Delete\", ev -> { unlinkBom(dto); deleteBom(dto); d.close(); });\n            com.vaadin.flow.component.button.Button cancel = new com.vaadin.flow.component.button.Button(\"Cancel\", ev -> d.close());\n            com.vaadin.flow.component.orderedlayout.HorizontalLayout hl = new com.vaadin.flow.component.orderedlayout.HorizontalLayout(detach, del, cancel);\n            d.add(hl);\n            d.open();\n        }\n    }\n\n    private void deleteBom(com.ua.crow.plm.dto.fusion.FusionBomDto dto) {\n        fusionBomController.delete(new com.ua.crow.plm.database.fusion.FusionId(dto.getFusionId(), dto.getRevisionId()));\n        grid.refresh();\n    }\n\n    private void unlinkBom(com.ua.crow.plm.dto.fusion.FusionBomDto dto) {\n        fusionBomController.unlink(new com.ua.crow.plm.database.fusion.FusionId(dto.getFusionId(), dto.getRevisionId()));\n        grid.refresh();\n    }\n\n\n    private TreeGridToolbar createToolbar() {\n        TreeGridToolbar toolbar = new TreeGridToolbar(true,true,true,true);\n        toolbar.manageTreeGrid(grid);\n        toolbar.setRefreshHandler(b->grid.refresh());\n        toolbar.setAddHandler((b) -> {/* Implement creation */});\n        toolbar.setEditHandler((b) -> {/* Implement edit */});\n        toolbar.setDeleteHandler((b) -> grid.getSelectedItems().stream().findFirst().ifPresent(this::handleDelete));\n        toolbar.addButtonStateHandler(EDIT,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addSpacer();\n        partNumberField.setPlaceholder(\"Part Number\");\n        partNumberField.setClearButtonVisible(true);\n        partNumberField.addValueChangeListener(e -> {\n            grid.setPartNumber(e.getValue());\n            grid.refresh();\n        });\n        toolbar.addItem(partNumberField);\n        unprocessedBox.setValue(true);\n        unprocessedBox.addValueChangeListener(e -> {\n            grid.setUnprocessed(e.getValue());\n            grid.refresh();\n        });\n        toolbar.addItem(unprocessedBox);\n        return toolbar;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/tree/BomActiveReleaseTreeView.java =====\npackage com.ua.crow.views.components.engineeringbom.tree;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.TreeGridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.ua.crow.views.components.engineeringbom.tree.ComponentDetailTabs;\nimport com.vaadin.flow.component.splitlayout.SplitLayout;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\n@Route(value = BomActiveReleaseTreeView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Engineering BOM\")\n@PermitAll\npublic class BomActiveReleaseTreeView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/engineeringbom/:bomId\";\n\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final BomActiveReleaseTreeGrid treeGrid;\n    private final TreeGridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n    private final ComponentDetailTabs detailTabs;\n    private final com.ua.crow.plm.service.engbom.BomService bomService;\n    private final com.vaadin.flow.component.combobox.ComboBox<com.ua.crow.plm.database.ReleaseVersion> versionBox;\n\n    private Long productId;\n    private Long bomId;\n    private Long release = 0L;\n    private EngineeringBomWoChildren bom;\n\n    public BomActiveReleaseTreeView(EngineeringBomController engineeringBomController,\n                                    NavigationHistoryService historyService,\n                                    com.ua.crow.plm.service.engbom.BomService bomService) {\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.bomService = bomService;\n        this.treeGrid = new BomActiveReleaseTreeGrid();\n        this.toolbar = new TreeGridToolbar(false, true, true, true);\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n        this.versionBox = new com.vaadin.flow.component.combobox.ComboBox<>();\n\n        toolbar.manageTreeGrid(treeGrid);\n        toolbar.setRefreshHandler(b -> refresh());\n        versionBox.setItemLabelGenerator(v -> v.getName());\n        versionBox.addValueChangeListener(e -> {\n            if (e.getValue() != null) {\n                release = e.getValue().getId();\n                refresh();\n            }\n        });\n        toolbar.addItem(versionBox);\n        treeGrid.addSelectionListener(e -> {\n            toolbar.refreshButtonsStates();\n            showProperties(e.getFirstSelectedItem().orElse(null));\n        });\n\n        setSizeFull();\n\n        VerticalLayout bomLayout = new VerticalLayout(toolbar, treeGrid);\n        bomLayout.setSizeFull();\n        bomLayout.setFlexGrow(1, treeGrid);\n\n        detailTabs = new ComponentDetailTabs();\n        detailTabs.setSizeFull();\n\n        VerticalLayout propertiesLayout = new VerticalLayout(detailTabs);\n        propertiesLayout.setSizeFull();\n\n        SplitLayout content = new SplitLayout();\n        content.addToPrimary(bomLayout);\n        content.addToSecondary(propertiesLayout);\n        content.setSizeFull();\n        content.setSplitterPosition(50);\n\n        add(breadcrumbBar, content);\n        setFlexGrow(1, content);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n        String relParam = event.getLocation().getQueryParameters().getParameters().getOrDefault(\"release\", java.util.List.of(\"0\")).get(0);\n        release = Long.parseLong(relParam);\n        bomId = event.getRouteParameters()\n                .get(\"bomId\")\n                .map(Long::parseLong)\n                .orElse(null);\n\n        if (bomId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        if (!loadBom()) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n\n        addToHistory();\n        versionBox.setItems(bomService.getAllVersions(bomId));\n        versionBox.setValue(versionBox.getDataProvider().fetch(new com.vaadin.flow.data.provider.Query<>()).findFirst().orElse(null));\n        updateView();\n        breadcrumbBar.refresh();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<?> getCurrentContext() {\n        return new HistoryEntry<>(BomActiveReleaseTreeView.class,\n                bom.getName(),\n                \"product/\" + productId + \"/engineeringbom/\" + bomId,\n                bom, () -> engineeringBomController.byId(bomId, release).orElse(null));\n    }\n\n    private boolean loadBom() {\n        bom = engineeringBomController.byId(bomId, release).orElse(null);\n        return bom != null;\n    }\n\n    private void updateView() {\n        List<ComponentActiveReleaseDto> roots = engineeringBomController.fullbyId(bomId, release);\n        treeGrid.setRoots(roots);\n        toolbar.refreshButtonsStates();\n    }\n\n    private void refresh() {\n        if (loadBom()) {\n            updateView();\n        }\n    }\n\n    private void showProperties(ComponentActiveReleaseDto component) {\n        detailTabs.showComponent(component);\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/tree/ComponentDetailTabs.java =====\npackage com.ua.crow.views.components.engineeringbom.tree;\n\nimport com.ua.crow.database.models.common.DataTypes;\nimport com.ua.crow.plm.dto.active.CompPropertiesActiveReleaseDto;\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.dto.base.ComponentPropertiesDTO;\nimport com.vaadin.flow.component.Component;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.formlayout.FormLayout;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.html.H3;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.tabs.TabSheet;\nimport com.vaadin.flow.component.textfield.NumberField;\nimport com.vaadin.flow.component.textfield.TextArea;\nimport com.vaadin.flow.component.textfield.TextField;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ComponentDetailTabs extends TabSheet {\n\n    private final VerticalLayout propertiesLayout = new VerticalLayout();\n    private final VerticalLayout tasksLayout = new VerticalLayout();\n    private final VerticalLayout assetsLayout = new VerticalLayout();\n    private final VerticalLayout instrumentsLayout = new VerticalLayout();\n    private final VerticalLayout camArtefactsLayout = new VerticalLayout();\n\n    private final VerticalLayout propertyGroupsLayout = new VerticalLayout();\n    private final FormLayout componentForm = new FormLayout();\n\n    private final TextField nameField = new TextField(\"Name\");\n    private final TextField ukrNameField = new TextField(\"Ukrainian Name\");\n    private final TextField partNumberField = new TextField(\"Part Number\");\n    private final NumberField quantityField = new NumberField(\"Quantity\");\n    private final TextArea descriptionField = new TextArea(\"Description\");\n    private final TextField creatorField = new TextField(\"Creator\");\n    private final TextField createdAtField = new TextField(\"Created At\");\n    private final TextField modifierField = new TextField(\"Modifier\");\n    private final TextField modifiedAtField = new TextField(\"Modified At\");\n\n    private final Button saveButton = new Button(\"Save\");\n    private final Button cancelButton = new Button(\"Cancel\");\n\n    public ComponentDetailTabs() {\n        setSizeFull();\n\n        propertiesLayout.setSizeFull();\n        tasksLayout.setSizeFull();\n        assetsLayout.setSizeFull();\n        instrumentsLayout.setSizeFull();\n        camArtefactsLayout.setSizeFull();\n\n        creatorField.setReadOnly(true);\n        createdAtField.setReadOnly(true);\n        modifierField.setReadOnly(true);\n        modifiedAtField.setReadOnly(true);\n\n        HorizontalLayout buttons = new HorizontalLayout(saveButton, cancelButton);\n\n        componentForm.add(nameField, ukrNameField, partNumberField,\n                quantityField, descriptionField, creatorField,\n                createdAtField, modifierField, modifiedAtField);\n\n        propertiesLayout.add(buttons, componentForm, propertyGroupsLayout);\n        propertiesLayout.setFlexGrow(1, propertyGroupsLayout);\n\n        add(\"Properties\", propertiesLayout);\n        add(\"Tasks\", tasksLayout);\n        add(\"Assets\", assetsLayout);\n        add(\"Instruments\", instrumentsLayout);\n        add(\"CAM Artefacts\", camArtefactsLayout);\n    }\n\n    public void showComponent(ComponentActiveReleaseDto component) {\n        propertyGroupsLayout.removeAll();\n\n        if (component == null) {\n            clearFields();\n            return;\n        }\n\n        nameField.setValue(component.getName() != null ? component.getName() : \"\");\n        ukrNameField.setValue(component.getUkrName() != null ? component.getUkrName() : \"\");\n        partNumberField.setValue(component.getPartNumber() != null ? component.getPartNumber() : \"\");\n        quantityField.setValue(component.getQuantity());\n        descriptionField.setValue(component.getDescription() != null ? component.getDescription() : \"\");\n        creatorField.setValue(component.getCreator() != null ? component.getCreator() : \"\");\n        createdAtField.setValue(component.getCreatedAt() != null ? component.getCreatedAt().toString() : \"\");\n        modifierField.setValue(component.getModifier() != null ? component.getModifier() : \"\");\n        modifiedAtField.setValue(component.getModifiedAt() != null ? component.getModifiedAt().toString() : \"\");\n\n        if (component.getProperties() != null) {\n            component.getProperties().stream()\n                    .collect(Collectors.groupingBy(p -> {\n                        var group = p.getPropertyType().getGroup();\n                        return group != null ? group.getName() : \"Ungrouped\";\n                    }))\n                    .forEach((groupName, props) -> {\n                        H3 title = new H3(groupName);\n                        Grid<CompPropertiesActiveReleaseDto> grid = createPropertyGrid(props);\n                        propertyGroupsLayout.add(title, grid);\n                    });\n        }\n    }\n\n    private void clearFields() {\n        nameField.clear();\n        ukrNameField.clear();\n        partNumberField.clear();\n        quantityField.clear();\n        descriptionField.clear();\n        creatorField.clear();\n        createdAtField.clear();\n        modifierField.clear();\n        modifiedAtField.clear();\n    }\n\n    private Grid<CompPropertiesActiveReleaseDto> createPropertyGrid(List<CompPropertiesActiveReleaseDto> props) {\n        Grid<CompPropertiesActiveReleaseDto> grid = new Grid<>();\n        grid.addColumn(p -> p.getPropertyType().getName()).setHeader(\"Property\");\n        grid.addComponentColumn(this::createValueField).setHeader(\"Value\");\n        grid.setItems(props);\n        grid.setWidthFull();\n        return grid;\n    }\n\n    private Component createValueField(ComponentPropertiesDTO property) {\n        if (property.getPropertyType().getDataType() == DataTypes.NUMBER) {\n            NumberField field = new NumberField();\n            if (property.getNumericValue() != null) {\n                field.setValue(property.getNumericValue());\n            }\n            field.addValueChangeListener(e -> property.setNumericValue(e.getValue()));\n            return field;\n        }\n        TextField field = new TextField();\n        field.setValue(property.getStringValue() != null ? property.getStringValue() : \"\");\n        field.addValueChangeListener(e -> property.setStringValue(e.getValue()));\n        return field;\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/tree/BomActiveReleaseTreeGrid.java =====\npackage com.ua.crow.views.components.engineeringbom.tree;\n\nimport com.ua.crow.plm.dto.active.ComponentActiveReleaseDto;\nimport com.ua.crow.plm.database.ItemTypes;\nimport com.ua.crow.views.components.itemtype.ItemTypeComponent;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\n\nimport java.util.Collection;\nimport java.util.List;\n\npublic class BomActiveReleaseTreeGrid extends TreeGrid<ComponentActiveReleaseDto> {\n\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public BomActiveReleaseTreeGrid() {\n        super(ComponentActiveReleaseDto.class);\n        removeAllColumns();\n        setSizeFull();\n\n        addComponentHierarchyColumn(item -> {\n            String formatted = formatName(item);\n            Span span = new Span(formatted);\n            span.getElement().setProperty(\"title\", item.getName() == null ? \"\" : item.getName());\n            return span;\n        })\n                .setHeader(\"Name\")\n                .setFlexGrow(1)\n                .setAutoWidth(true);\n\n        addColumn(new ComponentRenderer<>(dto -> {\n            ItemTypes type = dto.getItemType() == null ? ItemTypes.NONE : ItemTypes.valueOf(dto.getItemType());\n            return new ItemTypeComponent(type);\n        }))\n                .setHeader(\"Type\")\n                .setAutoWidth(true);\n\n        addColumn(dto -> formatQuantity(dto.getQuantity()))\n                .setHeader(\"Quantity\")\n                .setAutoWidth(true);\n\n    }\n\n    public void setRoots(Collection<ComponentActiveReleaseDto> roots) {\n        setItems(roots, ComponentActiveReleaseDto::getParts);\n        expandRecursively(roots, 2);\n    }\n\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private String formatQuantity(Double quantity) {\n        if (quantity == null) return \"\";\n        return String.valueOf(quantity);\n    }\n\n    private String formatName(ComponentActiveReleaseDto dto) {\n        String name = trim(dto.getName(), NAME_MAX_LENGTH);\n        String partNumber = dto.getPartNumber();\n        String quantity = formatQuantity(dto.getQuantity());\n        boolean hasPartNumber = partNumber != null && !partNumber.isBlank();\n        boolean hasQuantity = quantity != null && !quantity.isBlank();\n        if (!hasPartNumber && !hasQuantity) {\n            return name;\n        }\n        StringBuilder sb = new StringBuilder(name).append(\" (\");\n        if (hasPartNumber) {\n            sb.append(\"Part Number: \").append(partNumber);\n        }\n        if (hasQuantity) {\n            if (hasPartNumber) {\n                sb.append(\", \");\n            }\n            sb.append(\"Quantity: \").append(quantity);\n        }\n        sb.append(\")\");\n        return sb.toString();\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/list/BomActiveReleaseGrid.java =====\npackage com.ua.crow.views.components.engineeringbom.list;\n\nimport com.flowingcode.vaadin.addons.gridhelpers.GridHelper;\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.data.provider.CallbackDataProvider;\nimport com.vaadin.flow.data.renderer.ComponentRenderer;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\n\npublic class BomActiveReleaseGrid extends Grid<EngineeringBomWoChildren> {\n\n    private final EngineeringBomController controller;\n    private Long productId;\n    private Long release = 0L;\n\n    private static final int NAME_MAX_LENGTH = 40;\n\n    public BomActiveReleaseGrid(EngineeringBomController controller) {\n        super(EngineeringBomWoChildren.class);\n        this.controller = controller;\n\n        removeAllColumns();\n        addColumn(EngineeringBomWoChildren::getPartNumber).setHeader(\"Part Number\");\n        addColumn(new ComponentRenderer<>(item -> {\n            String name = item.getName();\n            String shortName = trim(name, NAME_MAX_LENGTH);\n            Span span = new Span(shortName);\n            span.getElement().setProperty(\"title\", name == null ? \"\" : name);\n            return span;\n        })).setHeader(\"Name\");\n        addColumn(b -> b.getProduct() != null ? b.getProduct().getName() : \"\")\n                .setHeader(\"Product\");\n        addColumn(EngineeringBomWoChildren::getCreatedAt).setHeader(\"Created At\");\n        addColumn(EngineeringBomWoChildren::getModifiedAt).setHeader(\"Modified At\");\n\n        GridHelper.setSelectOnClick(this, true);\n        setSelectionMode(SelectionMode.SINGLE);\n        GridHelper.setSelectionColumnHidden(this, true);\n\n        setDataProvider(new CallbackDataProvider<>(\n                query -> fetchItems(query.getOffset(), query.getLimit()).stream(),\n                query -> fetchItems(0, Integer.MAX_VALUE).size()\n        ));\n\n        addItemDoubleClickListener(event -> {\n            EngineeringBomWoChildren item = event.getItem();\n            UI.getCurrent().navigate(\"product/\" + productId + \"/engineeringbom/\" + item.getId());\n        });\n    }\n\n    private String trim(String text, int maxLength) {\n        if (text == null) {\n            return \"\";\n        }\n        String t = text.trim();\n        return t.length() > maxLength ? t.substring(0, Math.max(0, maxLength - 3)) + \"...\" : t;\n    }\n\n    private List<EngineeringBomWoChildren> fetchItems(int offset, int limit) {\n        if (productId == null) {\n            return List.of();\n        }\n        List<EngineeringBomWoChildren> items = controller\n                .listByProductId(productId, release, Pageable.unpaged(), true);\n        items = filterLastVersions(items);\n        return items.stream().skip(offset).limit(limit).toList();\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public void setRelease(Long release) {\n        this.release = release == null ? 0L : release;\n    }\n\n    public void refresh() {\n        getDataProvider().refreshAll();\n    }\n\n    private List<EngineeringBomWoChildren> filterLastVersions(List<EngineeringBomWoChildren> items) {\n        java.util.Map<String, EngineeringBomWoChildren> map = new java.util.HashMap<>();\n        for (EngineeringBomWoChildren b : items) {\n            EngineeringBomWoChildren existing = map.get(b.getPartNumber());\n            if (existing == null || b.getId() > existing.getId()) {\n                map.put(b.getPartNumber(), b);\n            }\n        }\n        return new java.util.ArrayList<>(map.values());\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/components/engineeringbom/list/BomActiveReleaseListView.java =====\npackage com.ua.crow.views.components.engineeringbom.list;\n\nimport com.ua.crow.plm.controller.EngineeringBomController;\nimport com.ua.crow.plm.controller.ProductController;\nimport com.ua.crow.plm.dto.base.ProductDto;\nimport com.ua.crow.views.MainLayout;\nimport com.ua.crow.views.components.toolbar.GridToolbar;\nimport com.ua.crow.views.navigation.BreadcrumbBar;\nimport com.ua.crow.views.navigation.NavigationContextAware;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.service.HistoryEntry;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.ua.crow.plm.dto.active.EngineeringBomWoChildren;\nimport com.ua.crow.views.workspaces.rnd.RndWorkspaceRestrictedView;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.DELETE;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.EDIT;\nimport static com.ua.crow.views.components.toolbar.ButtonKeys.ADD;\n\n@Route(value = BomActiveReleaseListView.ROUTE, layout = MainLayout.class)\n@PageTitle(\"Engineering BOMs\")\n@PermitAll\npublic class BomActiveReleaseListView extends RndWorkspaceRestrictedView implements BeforeEnterObserver, NavigationContextAware {\n\n    public static final String ROUTE = \"product/:productId/engineeringboms\";\n\n    private final EngineeringBomController engineeringBomController;\n    private final NavigationHistoryService historyService;\n    private final BomActiveReleaseGrid grid;\n    private final GridToolbar toolbar;\n    private final BreadcrumbBar breadcrumbBar;\n    private final com.ua.crow.plm.service.product.ProductService productService;\n\n    private Long productId;\n    private Long release = 0L;\n    private ProductDto product;\n\n    public BomActiveReleaseListView(EngineeringBomController engineeringBomController,\n                                    NavigationHistoryService historyService,\n                                    ProductController productController,\n                                    com.ua.crow.plm.service.product.ProductService productService) {\n        this.engineeringBomController = engineeringBomController;\n        this.historyService = historyService;\n        this.productService = productService;\n        this.grid = new BomActiveReleaseGrid(engineeringBomController);\n        this.toolbar = createToolbar();\n        this.breadcrumbBar = new BreadcrumbBar(historyService);\n\n        setSizeFull();\n        add(breadcrumbBar, toolbar, grid);\n        setFlexGrow(1, grid);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        productId = event.getRouteParameters()\n                .get(\"productId\")\n                .map(Long::parseLong)\n                .orElse(null);\n        String relParam = event.getLocation().getQueryParameters().getParameters().getOrDefault(\"release\", java.util.List.of(\"0\")).get(0);\n        release = Long.parseLong(relParam);\n        if (productId == null) {\n            event.rerouteTo(\"not-found\");\n            return;\n        }\n        product = new ProductDto();\n        product.setId(productId);\n        addToHistory();\n         grid.setProductId(productId);\n        grid.setRelease(release);\n        grid.refresh();\n        breadcrumbBar.refresh();\n    }\n\n    @Override\n    public NavigationHistoryService getHistoryService() {\n        return historyService;\n    }\n\n    @Override\n    public HistoryEntry<ProductDto> getCurrentContext() {\n        return new HistoryEntry<>(BomActiveReleaseListView.class,\n                \"Engineering BOMs\",\n                \"product/\" + productId + \"/engineeringboms\",\n                product, () -> null);\n    }\n\n    private GridToolbar createToolbar() {\n        GridToolbar toolbar = new GridToolbar(true, true, true, true);\n        toolbar.setRefreshHandler(b -> grid.refresh());\n        toolbar.setAddHandler(b -> {/* Implement creation */});\n        toolbar.setEditHandler(b -> {/* Implement edit */});\n        toolbar.setDeleteHandler(b -> grid.getSelectedItems().stream().findFirst().ifPresent(this::handleDelete));\n        toolbar.addButtonStateHandler(EDIT,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        toolbar.addButtonStateHandler(DELETE,\n                b -> b.setEnabled(!grid.getSelectedItems().isEmpty()));\n        grid.addSelectionListener(e -> toolbar.refreshButtonsStates());\n        return toolbar;\n    }\n\n    private void handleDelete(com.ua.crow.plm.dto.active.EngineeringBomWoChildren dto) {\n        com.vaadin.flow.component.dialog.Dialog dialog = new com.vaadin.flow.component.dialog.Dialog();\n        dialog.add(\"Delete selected BOM only or delete with components?\");\n        com.vaadin.flow.component.button.Button bomOnly = new com.vaadin.flow.component.button.Button(\"Delete BOM\", e -> {\n            engineeringBomController.delete(dto.getId(), false);\n            dialog.close();\n            grid.refresh();\n        });\n        com.vaadin.flow.component.button.Button fullDelete = new com.vaadin.flow.component.button.Button(\"Delete with Components\", e -> {\n            engineeringBomController.delete(dto.getId(), true);\n            dialog.close();\n            grid.refresh();\n        });\n        com.vaadin.flow.component.button.Button cancel = new com.vaadin.flow.component.button.Button(\"Cancel\", e -> dialog.close());\n        com.vaadin.flow.component.orderedlayout.HorizontalLayout hl = new com.vaadin.flow.component.orderedlayout.HorizontalLayout(bomOnly, fullDelete, cancel);\n        dialog.add(hl);\n        dialog.open();\n    }\n}\n\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/MainLayout.java =====\npackage com.ua.crow.views;\n\nimport com.ua.crow.service.CrowUserService;\nimport com.ua.crow.config.SecurityService;\nimport com.ua.crow.views.navigation.NavigationHistoryService;\nimport com.ua.crow.views.navigation.NavigationMenuBuilder;\nimport com.ua.crow.views.service.WorkspaceUIService;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.Unit;\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.applayout.AppLayout;\nimport com.vaadin.flow.component.applayout.DrawerToggle;\nimport com.vaadin.flow.component.combobox.ComboBox;\nimport com.vaadin.flow.component.avatar.Avatar;\nimport com.vaadin.flow.component.menubar.MenuBar;\nimport com.vaadin.flow.component.contextmenu.MenuItem;\nimport com.vaadin.flow.component.contextmenu.SubMenu;\nimport com.vaadin.flow.component.html.*;\nimport com.vaadin.flow.component.orderedlayout.Scroller;\nimport com.vaadin.flow.component.sidenav.SideNav;\nimport com.vaadin.flow.theme.lumo.LumoUtility;\n\npublic class MainLayout extends AppLayout {\n\n    private H1 viewTitle;\n    private final Image logo = new Image(\"images/logo2.svg\", \"Logo\");\n    private final SideNav nav;\n\n\n    private final NavigationHistoryService historyService;\n    private final WorkspaceUIService workspaceUIService;\n    private final CrowUserService userService;\n    private final SecurityService securityService;\n\n    public MainLayout(NavigationHistoryService historyService,\n                      WorkspaceUIService workspaceUIService,\n                      CrowUserService userService,\n                      SecurityService securityService) {\n        this.historyService = historyService;\n        this.workspaceUIService = workspaceUIService;\n        this.userService = userService;\n        this.securityService = securityService;\n        WorkspaceType workspace = userService.getCurrentUser().getCurrentWorkspace();\n        if (workspace == null) {\n            workspace = WorkspaceType.RND;\n            userService.switchWorkspace(workspace);\n        }\n        this.nav = workspaceUIService.createSideNav(workspace);\n        setPrimarySection(Section.DRAWER);\n        addDrawerContent();\n        addHeaderContent();\n    }\n\n    private void addHeaderContent() {\n        DrawerToggle toggle = new DrawerToggle();\n        toggle.setAriaLabel(\"Menu toggle\");\n        viewTitle = new H1(\"Crow\");\n        viewTitle.addClassNames(LumoUtility.FontSize.LARGE, LumoUtility.Margin.NONE);\n\n        ComboBox<WorkspaceType> workspaceSelector = new ComboBox<>();\n        workspaceSelector.setItems(WorkspaceType.values());\n        WorkspaceType current = userService.getCurrentUser().getCurrentWorkspace();\n        workspaceSelector.setValue(current != null ? current : WorkspaceType.RND);\n        workspaceSelector.addValueChangeListener(e -> {\n            if (e.getValue() != null) {\n                userService.switchWorkspace(e.getValue());\n                workspaceUIService.populateSideNav(nav, e.getValue());\n                UI.getCurrent().navigate(\"\");\n            }\n        });\n\n        MenuBar userMenu = new MenuBar();\n        Avatar avatar = new Avatar(userService.getCurrentUser().getName());\n        MenuItem rootItem = userMenu.addItem(avatar);\n        SubMenu sub = rootItem.getSubMenu();\n        sub.addItem(userService.getCurrentUser().getUsername()).setEnabled(false);\n        sub.addItem(workspaceSelector).setEnabled(false);\n        sub.addItem(\"Logout\", e -> securityService.logout());\n\n        Div spacer = new Div();\n        spacer.getStyle().set(\"flex-grow\", \"1\");\n\n        addToNavbar(true, toggle, logo, spacer, userMenu);\n    }\n\n    private void addDrawerContent() {\n        Span appName = new Span(logo);\n        appName.addClassNames(LumoUtility.FontWeight.SEMIBOLD, LumoUtility.FontSize.LARGE);\n        logo.setHeight(50, Unit.PIXELS);\n        Header header = new Header(appName);\n        Scroller scroller = new Scroller(nav);\n        addToDrawer(header, scroller, createFooter());\n    }\n\n    private void updateNavigation() {\n        java.util.Map<String, Boolean> expanded = captureExpanded(nav.getItems());\n\n        WorkspaceType workspace = userService.getCurrentUser().getCurrentWorkspace();\n        workspaceUIService.populateSideNav(nav, workspace);\n        if (workspace == WorkspaceType.RND) {\n\n            NavigationMenuBuilder.updateSideNav(nav, historyService);\n        }\n\n        applyExpanded(nav.getItems(), expanded);\n    }\n\n    private java.util.Map<String, Boolean> captureExpanded(java.util.List<com.vaadin.flow.component.sidenav.SideNavItem> items) {\n        java.util.Map<String, Boolean> map = new java.util.HashMap<>();\n        for (com.vaadin.flow.component.sidenav.SideNavItem item : items) {\n            map.put(item.getLabel(), item.isExpanded());\n            map.putAll(captureExpanded(item.getItems()));\n        }\n        return map;\n    }\n\n    private void applyExpanded(java.util.List<com.vaadin.flow.component.sidenav.SideNavItem> items, java.util.Map<String, Boolean> state) {\n        for (com.vaadin.flow.component.sidenav.SideNavItem item : items) {\n            Boolean expanded = state.get(item.getLabel());\n            if (expanded != null) {\n                item.setExpanded(expanded);\n            }\n            applyExpanded(item.getItems(), state);\n        }\n    }\n\n\n\n    private Footer createFooter() {\n        return new Footer();\n    }\n\n    @Override\n    protected void afterNavigation() {\n        super.afterNavigation();\n        viewTitle.setText(getCurrentPageTitle());\n        updateNavigation();\n    }\n\n    private String getCurrentPageTitle() {\n        return getContent() != null ? getContent().getClass().getSimpleName() : \"\";\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/service/WorkspaceUIService.java =====\npackage com.ua.crow.views.service;\n\nimport com.ua.crow.views.pages.CncRndInterfaceView;\nimport com.ua.crow.views.pages.NotFoundView;\nimport com.ua.crow.views.workspaces.assembly.AssemblyChecklistView;\nimport com.ua.crow.views.workspaces.assembly.AssemblyInstructionsView;\nimport com.ua.crow.views.workspaces.logistics.LogisticsIncomingView;\nimport com.ua.crow.views.workspaces.logistics.LogisticsOutgoingView;\nimport com.ua.crow.views.workspaces.rnd.RndBomView;\nimport com.ua.crow.views.workspaces.rnd.RndCadView;\nimport com.ua.crow.workspace.WorkspaceType;\nimport com.vaadin.flow.component.sidenav.SideNav;\nimport com.vaadin.flow.component.sidenav.SideNavItem;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class WorkspaceUIService {\n\n    public SideNav createSideNav(WorkspaceType workspace) {\n        SideNav nav = new SideNav();\n        populateSideNav(nav, workspace);\n        return nav;\n    }\n\n    public void populateSideNav(SideNav nav, WorkspaceType workspace) {\n        nav.addItem(new SideNavItem(\"CNC\", CncRndInterfaceView.class));\n        switch (workspace) {\n            case RND -> {\n                nav.addItem(new SideNavItem(\"CAD Editor\", RndCadView.class));\n                nav.addItem(new SideNavItem(\"BOM Viewer\", RndBomView.class));\n            }\n            case ASSEMBLY -> {\n                nav.addItem(new SideNavItem(\"Assembly Instructions\", AssemblyInstructionsView.class));\n                nav.addItem(new SideNavItem(\"Checklist\", AssemblyChecklistView.class));\n            }\n            case LOGISTICS -> {\n                nav.addItem(new SideNavItem(\"Incoming\", LogisticsIncomingView.class));\n                nav.addItem(new SideNavItem(\"Outgoing\", LogisticsOutgoingView.class));\n            }\n            default -> nav.addItem(new SideNavItem(\"Home\", NotFoundView.class));\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/service/HistoryEntry.java =====\npackage com.ua.crow.views.service;\n\nimport com.ua.crow.views.navigation.NavigationHistoryService;\n\nimport java.util.Objects;\nimport java.util.function.Supplier;\n\npublic class HistoryEntry<T> {\n    private final Class context;\n    private final String label;\n    private final String path;\n    private T contextObject;\n    private Supplier<T> fallbackSupplier;\n    private HistoryEntry<?> parentContext;\n    private HistoryEntry<?> childContext;\n\n    public HistoryEntry(Class context, String label, String path, T contextObject, Supplier<T> fallbackSupplier) {\n        this.context = context;\n        this.label = label;\n        this.path = path;\n        this.contextObject = contextObject;\n        this.fallbackSupplier = fallbackSupplier;\n    }\n\n    public T getContextObject() {\n        if (contextObject == null && fallbackSupplier != null) {\n            contextObject = fallbackSupplier.get();\n        }\n        return contextObject;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public Class<T> getContext() {\n        return context;\n    }\n\n    public HistoryEntry<?> getParentContext() {\n        return parentContext;\n    }\n\n    public void setParentContext(HistoryEntry<?> parentContext) {\n        this.parentContext = parentContext;\n    }\n\n    public HistoryEntry<?> getChildContext() {\n        return childContext;\n    }\n\n    public void setChildContext(HistoryEntry<?> childContext) {\n        this.childContext = childContext;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (!(obj instanceof HistoryEntry<?> other)) return false;\n        return Objects.equals(path, other.path);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(path);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/pages/LoginView.java =====\npackage com.ua.crow.views.pages;\n\nimport com.vaadin.flow.component.html.Image;\nimport com.vaadin.flow.component.checkbox.Checkbox;\nimport com.vaadin.flow.component.login.LoginForm;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.BeforeEnterEvent;\nimport com.vaadin.flow.router.BeforeEnterObserver;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport com.vaadin.flow.server.auth.AnonymousAllowed;\n\n@Route(\"login\")\n@PageTitle(\"Login | Corvus Forge\")\n@AnonymousAllowed\npublic class LoginView extends VerticalLayout implements BeforeEnterObserver {\n\n    private final LoginForm loginForm = new LoginForm();\n    private final Checkbox rememberMe = new Checkbox(\"Remember me\");\n    private final Image logo = new Image(\"images/logo1.svg\", \"Logo\");\n\n    public LoginView() {\n        addClassName(\"login-view\");\n        setSizeFull();\n        setAlignItems(Alignment.CENTER);\n        setJustifyContentMode(JustifyContentMode.CENTER);\n        setSpacing(false);\n\n        loginForm.setAction(\"login\");\n        logo.setWidth(\"200px\");\n\n        // Correct way: create a custom form layout explicitly\n        VerticalLayout customArea = new VerticalLayout();\n        customArea.setPadding(false);\n        customArea.setSpacing(false);\n        customArea.setAlignItems(Alignment.START);\n\n        // Add the checkbox to custom area\n        rememberMe.getElement().setAttribute(\"name\", \"remember-me\");\n        customArea.add(rememberMe);\n\n        // Attach custom area to login form slot\n        customArea.getElement().setAttribute(\"slot\", \"custom-form-area\");\n        loginForm.getElement().appendChild(customArea.getElement());\n\n        VerticalLayout wrapper = new VerticalLayout();\n        wrapper.setSpacing(true);\n        wrapper.setAlignItems(Alignment.CENTER);\n        wrapper.addClassName(\"login-wrapper\");\n        wrapper.add(logo, loginForm);\n\n        add(wrapper);\n    }\n\n    @Override\n    public void beforeEnter(BeforeEnterEvent event) {\n        if (event.getLocation().getQueryParameters().getParameters().containsKey(\"error\")) {\n            loginForm.setError(true);\n        }\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/pages/NotFoundView.java =====\npackage com.ua.crow.views.pages;\n\nimport com.vaadin.flow.component.UI;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.html.H1;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.router.Route;\nimport com.vaadin.flow.server.auth.AnonymousAllowed;\n\n@Route(\"not-found\")\n@AnonymousAllowed\npublic class NotFoundView extends VerticalLayout {\n    public NotFoundView() {\n\n        setSizeFull();\n        setJustifyContentMode(JustifyContentMode.CENTER);\n        setAlignItems(Alignment.CENTER);\n        add(new H1(getTranslation(\"notfound.title\")));\n        Button backButton = new Button(getTranslation(\"notfound.back\"), event -> {\n            UI.getCurrent().getPage().executeJs(\"window.history.back()\");\n        });\n\n        add(backButton);\n    }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/views/pages/CncRndInterfaceView.java =====\npackage com.ua.crow.views.pages;\n\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.html.Div;\nimport com.vaadin.flow.component.html.H3;\nimport com.vaadin.flow.component.html.Span;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.treegrid.TreeGrid;\nimport com.vaadin.flow.router.PageTitle;\nimport com.vaadin.flow.router.Route;\nimport jakarta.annotation.security.PermitAll;\n\nimport java.util.List;\n\n@Route(\"cnc-interface\")\n@PageTitle(\"CNC RnD Interface\")\n@PermitAll\npublic class CncRndInterfaceView extends HorizontalLayout {\n\n    public CncRndInterfaceView() {\n        setSizeFull();\n        setPadding(true);\n        \n        // Product Tree\n        VerticalLayout productTreeLayout = new VerticalLayout();\n        productTreeLayout.add(new H3(\"Product Tree\"));\n\n        TreeGrid<String> productTree = new TreeGrid<>();\n        productTree.addHierarchyColumn(String::toString).setHeader(\"Products\");\n        productTree.setItems(List.of(\"Product A\", \"Product B\"), item -> {\n            if (item.equals(\"Product A\")) return List.of(\"Component 1\", \"Component 2\");\n            if (item.equals(\"Product B\")) return List.of(\"Component 3\", \"Component 4\");\n            return List.of();\n        });\n        productTreeLayout.add(productTree);\n\n        // Component Tree\n        VerticalLayout componentTreeLayout = new VerticalLayout();\n        componentTreeLayout.add(new H3(\"Component Tree\"));\n\n        TreeGrid<String> componentTree = new TreeGrid<>();\n        componentTree.addHierarchyColumn(String::toString).setHeader(\"Components\");\n        componentTree.setItems(List.of(\"Root\"), item -> {\n            if (item.equals(\"Root\")) return List.of(\"Child Component2\", \"Selected component3\");\n            if (item.equals(\"Selected component5\")) return List.of(\"Child Component4\");\n            return List.of();\n        });\n\n        componentTree.addItemClickListener(event -> {\n            if (\"Selected component\".equals(event.getItem())) {\n                showProgramDetails(componentTreeLayout);\n            }\n        });\n\n        componentTreeLayout.add(componentTree);\n\n        // Git Repository Status\n        VerticalLayout gitStatusLayout = new VerticalLayout();\n        gitStatusLayout.add(new H3(\"Git Repository Status\"));\n\n        gitStatusLayout.add(new Div(new H3(\"Current Branch: main\"),\n            new Div(\"Uncommitted Changes: 5\"),\n            new Div(\"Staged Changes: 3\")));\n\n        HorizontalLayout gitButtons = new HorizontalLayout(\n                new Button(\"Commit\"), new Button(\"Push\")\n        );\n        gitStatusLayout.add(gitButtons);\n\n        TreeGrid<String> fileExplorer = new TreeGrid<>();\n        fileExplorer.addHierarchyColumn(String::toString).setHeader(\"File Explorer\");\n        fileExplorer.setItems(List.of(\"Documents\", \"Pictures\", \"Music\"), folder -> {\n            switch (folder) {\n                case \"Documents\": return List.of(\"Resume.pdf\", \"CoverLetter.docx\");\n                case \"Pictures\": return List.of(\"Vacation.jpg\", \"Birthday.png\");\n                case \"Music\": return List.of(\"Song.mp3\", \"Album.flac\");\n                default: return List.of();\n            }\n        });\n\n        gitStatusLayout.add(fileExplorer);\n\n        add(productTreeLayout, componentTreeLayout, gitStatusLayout);\n        expand(productTreeLayout, componentTreeLayout, gitStatusLayout);\n    }\n\n    private void showProgramDetails(VerticalLayout layout) {\n        Div details = new Div();\n        details.getStyle().set(\"border\", \"1px solid #ddd\").set(\"padding\", \"15px\").set(\"margin-top\", \"10px\");\n        details.add(new H3(\"CNC Program Details of the selected component\"));\n\n        HorizontalLayout programA = new HorizontalLayout();\n        programA.add(new Span(\"Program A\"), new Button(\"Execute\"), new Button(\"Setup Sheet\"));\n\n        HorizontalLayout programB = new HorizontalLayout();\n        programB.add(new Span(\"Program B\"), new Button(\"Execute\"), new Button(\"Setup Sheet\"));\n\n        details.add(programA, programB);\n\n        layout.add(details);\n    }\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/validation/FusionBomConvert.java =====\npackage com.ua.crow.validation;\n\npublic interface FusionBomConvert {\n}\n\n\n\n// ===== File: crow/src/main/java/com/ua/crow/validation/annotations/IpAddressValidator.java =====\npackage com.ua.crow.validation.annotations;\n\nimport jakarta.validation.ConstraintValidator;\nimport jakarta.validation.ConstraintValidatorContext;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass IpAddressValidator implements ConstraintValidator<IpAddress, String> {\n\n  @Override\n  public boolean isValid(String value, ConstraintValidatorContext context) {\n    Pattern pattern =\n      Pattern.compile(\"^([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})$\");\n    Matcher matcher = pattern.matcher(value);\n    try {\n      if (!matcher.matches()) {\n        return false;\n      } else {\n        for (int i = 1; i <= 4; i++) {\n          int octet = Integer.valueOf(matcher.group(i));\n          if (octet > 255) {\n            return false;\n          }\n        }\n        return true;\n      }\n    } catch (Exception e) {\n      return false;\n    }\n  }\n}\n\n\n// ===== File: crow/src/main/java/com/ua/crow/validation/annotations/IpAddress.java =====\npackage com.ua.crow.validation.annotations;\n\nimport jakarta.validation.Constraint;\nimport jakarta.validation.Payload;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\n@Target({ FIELD })\n@Retention(RUNTIME)\n@Constraint(validatedBy = IpAddressValidator.class)\n@Documented\npublic @interface IpAddress {\n\n  String message() default \"{IpAddress.invalid}\";\n\n  Class<?>[] groups() default { };\n\n  Class<? extends Payload>[] payload() default { };\n\n}\n\n\n\n</context_primary>\n</context>"},{"type":"text","text":"learn provided code of the PLM system projectCreate prompt for codex based on provided code and this input\"Add entity \"software package\" to the project entityImplement git integration in GithubService and GitlabServiceImplement GitService interface in order to be able abstract particular git implementationImplement methods for commit, push, pull, create branches, showing historyCreate separate vaadin \"view\" for the \"software package\" and implement ui controls for working with git and pointed functionality above. Also describe an ability to navigate by source tree. Describe this components for codexIn the view of the product add an ability to list repositories, add existing repositoriesRepository can be created on the github and gitlab. Investigate api and point methods could be used and point it in the prompt for codexProvide an ability to attach separate component to the \"software package\" fileAlso user could have an ability to attach specific components or BOMs to the files in the repository with respect to branches.Investigate code in details and describe tasks in details with references to the provided code\""}]}]},"responses":[{"timestamp":1753855310342,"id":"2025-07-30T05:59:38.492929Z","object":"chat.completion","created":1753855310342,"model":"llama3:70b","choices":[{"index":0,"message":{"role":"assistant","content":"Here is a prompt for Codex based on the provided code and input:\n\n**Task 1: Add entity \"software package\" to the project entity**\n\n* Create a new Java class `SoftwarePackage` that extends the `Project` entity\n* Add necessary fields and getters/setters for the software package (e.g. name, description, version)\n* Update the `Project` entity to include a list of `SoftwarePackage` entities\n\n**Task 2: Implement Git integration in GithubService and GitlabService**\n\n* Create an interface `GitService` that defines methods for commit, push, pull, create branches, and show history\n* Implement the `GitService` interface in both `GithubService` and `GitlabService`\n* Use the respective APIs to implement the git functionality (e.g. Github API, Gitlab API)\n\n**Task 3: Create separate Vaadin \"view\" for the \"software package\"**\n\n* Create a new Java class `SoftwarePackageView` that extends `VerticalLayout`\n* Add UI controls for working with git and pointed functionality above (e.g. buttons for commit, push, pull, create branches)\n* Implement navigation by source tree using a TreeGrid component\n* Reference: `CncRndInterfaceView` in the provided code\n\n**Task 4: List repositories and add existing repositories**\n\n* Create a new Java class `RepositoryListView` that extends `VerticalLayout`\n* Add UI controls to list repositories (e.g. Grid component)\n* Implement functionality to add existing repositories from Github and Gitlab\n* Use the respective APIs to fetch repository information (e.g. Github API, Gitlab API)\n\n**Task 5: Attach separate components to the \"software package\" file**\n\n* Create a new Java class `ComponentAttachmentView` that extends `VerticalLayout`\n* Add UI controls to attach separate components or BOMs to files in the repository with respect to branches\n* Implement functionality to display attached components and BOMs for each file\n\n**Task 6: Investigate API methods for Github and Gitlab**\n\n* Research and document the API methods that can be used for the following:\n\t+ Creating a new repository on Github and Gitlab\n\t+ Listing repositories on Github and Gitlab\n\t+ Fetching repository information (e.g. branches, files)\n\t+ Committing changes to a repository\n\t+ Pushing changes to a repository\n\t+ Pulling changes from a repository\n\t+ Creating a new branch in a repository\n\nSome possible API methods that can be used:\n\n* Github API:\n\t+ `POST /repos` to create a new repository\n\t+ `GET /repos` to list repositories\n\t+ `GET /repos/:owner/:repo` to fetch repository information\n\t+ `POST /repos/:owner/:repo/contents/:path` to commit changes\n\t+ `POST /repos/:owner/:repo/pulls` to push changes\n\t+ `GET /repos/:owner/:repo/pulls` to pull changes\n\t+ `POST /repos/:owner/:repo/branches` to create a new branch\n* Gitlab API:\n\t+ `POST /projects` to create a new repository\n\t+ `GET /projects` to list repositories\n\t+ `GET /projects/:id` to fetch repository information\n\t+ `POST /projects/:id/repository/files` to commit changes\n\t+ `POST /projects/:id/repository/pushes` to push changes\n\t+ `GET /projects/:id/repository/pushes` to pull changes\n\t+ `POST /projects/:id/repository/branches` to create a new branch\n\nNote: These API methods are subject to change and may require authentication and authorization."}}],"usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}],"chat_model":{"model_key":"llama3:70b","platform_key":"ollama"}},"key":"Untitled Chat 2025-07-29 14-15-17-1753808384562","thread_key":"Untitled Chat 2025-07-29 14-15-17","stream":true,"action_key":"lookup_context","user_message":"learn provided code of the PLM system projectCreate prompt for codex based on provided code and this input\"Add entity \"software package\" to the project entityImplement git integration in GithubService and GitlabServiceImplement GitService interface in order to be able abstract particular git implementationImplement methods for commit, push, pull, create branches, showing historyCreate separate vaadin \"view\" for the \"software package\" and implement ui controls for working with git and pointed functionality above. Also describe an ability to navigate by source tree. Describe this components for codexIn the view of the product add an ability to list repositories, add existing repositoriesRepository can be created on the github and gitlab. Investigate api and point methods could be used and point it in the prompt for codexProvide an ability to attach separate component to the \"software package\" fileAlso user could have an ability to attach specific components or BOMs to the files in the repository with respect to branches.Investigate code in details and describe tasks in details with references to the provided code\"","action_opts":{"context_key":"1753803341934"},"context_key":"1753803341934","class_name":"SmartCompletion","actions":{"lookup_context":true}},